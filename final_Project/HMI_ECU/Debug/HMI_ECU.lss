
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000426a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00800060  0000426a  000042fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800194  00800194  00004432  2**0
                  ALLOC
  3 .stab         00003750  00000000  00000000  00004434  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001172  00000000  00000000  00007b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000abef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bada  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c888  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c9e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cc75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d443  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 32 1e 	jmp	0x3c64	; 0x3c64 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c0 05 	call	0xb80	; 0xb80 <main>
      8a:	0c 94 33 21 	jmp	0x4266	; 0x4266 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b7 20 	jmp	0x416e	; 0x416e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e7       	ldi	r26, 0x7E	; 126
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d3 20 	jmp	0x41a6	; 0x41a6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c3 20 	jmp	0x4186	; 0x4186 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 df 20 	jmp	0x41be	; 0x41be <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c3 20 	jmp	0x4186	; 0x4186 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 df 20 	jmp	0x41be	; 0x41be <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b7 20 	jmp	0x416e	; 0x416e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e7       	ldi	r24, 0x7E	; 126
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d3 20 	jmp	0x41a6	; 0x41a6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c3 20 	jmp	0x4186	; 0x4186 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 df 20 	jmp	0x41be	; 0x41be <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c3 20 	jmp	0x4186	; 0x4186 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 df 20 	jmp	0x41be	; 0x41be <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c3 20 	jmp	0x4186	; 0x4186 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 df 20 	jmp	0x41be	; 0x41be <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c7 20 	jmp	0x418e	; 0x418e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e3 20 	jmp	0x41c6	; 0x41c6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Seconds_Count>:
uint8 safety_Count=0; //used to count how many times user entered wrong password
uint8 access_Times=0;
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
static void Seconds_Count(void){ //used to increase global variable every one second
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_Tick++;
     b4e:	80 91 94 01 	lds	r24, 0x0194
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 94 01 	sts	0x0194, r24

}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <Timer_Count>:
/*
 * function description:
 * stay in loop until input time equal to global variable Tick
 */
static void Timer_Count(uint8 time){
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	0f 92       	push	r0
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	89 83       	std	Y+1, r24	; 0x01
	g_Tick=0;
     b6a:	10 92 94 01 	sts	0x0194, r1
	while(g_Tick!=time);
     b6e:	90 91 94 01 	lds	r25, 0x0194
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	98 17       	cp	r25, r24
     b76:	d9 f7       	brne	.-10     	; 0xb6e <Timer_Count+0x10>

}
     b78:	0f 90       	pop	r0
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <main>:

int main(void){
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	df 93       	push	r29
     b86:	cf 93       	push	r28
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	c4 51       	subi	r28, 0x14	; 20
     b8e:	d1 40       	sbci	r29, 0x01	; 1
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	de bf       	out	0x3e, r29	; 62
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	cd bf       	out	0x3d, r28	; 61

	SREG |= (1<<7);
     b9a:	af e5       	ldi	r26, 0x5F	; 95
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	ef e5       	ldi	r30, 0x5F	; 95
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	80 68       	ori	r24, 0x80	; 128
     ba6:	8c 93       	st	X, r24
	Timer1_setCallBack(Seconds_Count);
     ba8:	83 ea       	ldi	r24, 0xA3	; 163
     baa:	95 e0       	ldi	r25, 0x05	; 5
     bac:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <Timer1_setCallBack>
	Timer1_ConfigType timer_config={0,7813,div1024,CTC};
     bb0:	ce 01       	movw	r24, r28
     bb2:	8b 50       	subi	r24, 0x0B	; 11
     bb4:	9f 4f       	sbci	r25, 0xFF	; 255
     bb6:	c5 5f       	subi	r28, 0xF5	; 245
     bb8:	de 4f       	sbci	r29, 0xFE	; 254
     bba:	99 83       	std	Y+1, r25	; 0x01
     bbc:	88 83       	st	Y, r24
     bbe:	cb 50       	subi	r28, 0x0B	; 11
     bc0:	d1 40       	sbci	r29, 0x01	; 1
     bc2:	2d e8       	ldi	r18, 0x8D	; 141
     bc4:	31 e0       	ldi	r19, 0x01	; 1
     bc6:	c3 5f       	subi	r28, 0xF3	; 243
     bc8:	de 4f       	sbci	r29, 0xFE	; 254
     bca:	39 83       	std	Y+1, r19	; 0x01
     bcc:	28 83       	st	Y, r18
     bce:	cd 50       	subi	r28, 0x0D	; 13
     bd0:	d1 40       	sbci	r29, 0x01	; 1
     bd2:	36 e0       	ldi	r19, 0x06	; 6
     bd4:	c1 5f       	subi	r28, 0xF1	; 241
     bd6:	de 4f       	sbci	r29, 0xFE	; 254
     bd8:	38 83       	st	Y, r19
     bda:	cf 50       	subi	r28, 0x0F	; 15
     bdc:	d1 40       	sbci	r29, 0x01	; 1
     bde:	c3 5f       	subi	r28, 0xF3	; 243
     be0:	de 4f       	sbci	r29, 0xFE	; 254
     be2:	e8 81       	ld	r30, Y
     be4:	f9 81       	ldd	r31, Y+1	; 0x01
     be6:	cd 50       	subi	r28, 0x0D	; 13
     be8:	d1 40       	sbci	r29, 0x01	; 1
     bea:	00 80       	ld	r0, Z
     bec:	c3 5f       	subi	r28, 0xF3	; 243
     bee:	de 4f       	sbci	r29, 0xFE	; 254
     bf0:	28 81       	ld	r18, Y
     bf2:	39 81       	ldd	r19, Y+1	; 0x01
     bf4:	cd 50       	subi	r28, 0x0D	; 13
     bf6:	d1 40       	sbci	r29, 0x01	; 1
     bf8:	2f 5f       	subi	r18, 0xFF	; 255
     bfa:	3f 4f       	sbci	r19, 0xFF	; 255
     bfc:	c3 5f       	subi	r28, 0xF3	; 243
     bfe:	de 4f       	sbci	r29, 0xFE	; 254
     c00:	39 83       	std	Y+1, r19	; 0x01
     c02:	28 83       	st	Y, r18
     c04:	cd 50       	subi	r28, 0x0D	; 13
     c06:	d1 40       	sbci	r29, 0x01	; 1
     c08:	c5 5f       	subi	r28, 0xF5	; 245
     c0a:	de 4f       	sbci	r29, 0xFE	; 254
     c0c:	e8 81       	ld	r30, Y
     c0e:	f9 81       	ldd	r31, Y+1	; 0x01
     c10:	cb 50       	subi	r28, 0x0B	; 11
     c12:	d1 40       	sbci	r29, 0x01	; 1
     c14:	00 82       	st	Z, r0
     c16:	c5 5f       	subi	r28, 0xF5	; 245
     c18:	de 4f       	sbci	r29, 0xFE	; 254
     c1a:	28 81       	ld	r18, Y
     c1c:	39 81       	ldd	r19, Y+1	; 0x01
     c1e:	cb 50       	subi	r28, 0x0B	; 11
     c20:	d1 40       	sbci	r29, 0x01	; 1
     c22:	2f 5f       	subi	r18, 0xFF	; 255
     c24:	3f 4f       	sbci	r19, 0xFF	; 255
     c26:	c5 5f       	subi	r28, 0xF5	; 245
     c28:	de 4f       	sbci	r29, 0xFE	; 254
     c2a:	39 83       	std	Y+1, r19	; 0x01
     c2c:	28 83       	st	Y, r18
     c2e:	cb 50       	subi	r28, 0x0B	; 11
     c30:	d1 40       	sbci	r29, 0x01	; 1
     c32:	c1 5f       	subi	r28, 0xF1	; 241
     c34:	de 4f       	sbci	r29, 0xFE	; 254
     c36:	38 81       	ld	r19, Y
     c38:	cf 50       	subi	r28, 0x0F	; 15
     c3a:	d1 40       	sbci	r29, 0x01	; 1
     c3c:	31 50       	subi	r19, 0x01	; 1
     c3e:	c1 5f       	subi	r28, 0xF1	; 241
     c40:	de 4f       	sbci	r29, 0xFE	; 254
     c42:	38 83       	st	Y, r19
     c44:	cf 50       	subi	r28, 0x0F	; 15
     c46:	d1 40       	sbci	r29, 0x01	; 1
     c48:	c1 5f       	subi	r28, 0xF1	; 241
     c4a:	de 4f       	sbci	r29, 0xFE	; 254
     c4c:	88 81       	ld	r24, Y
     c4e:	cf 50       	subi	r28, 0x0F	; 15
     c50:	d1 40       	sbci	r29, 0x01	; 1
     c52:	88 23       	and	r24, r24
     c54:	21 f6       	brne	.-120    	; 0xbde <main+0x5e>
	Timer1_init(&timer_config);/* Initialize the TIMER module */
     c56:	ce 01       	movw	r24, r28
     c58:	8b 50       	subi	r24, 0x0B	; 11
     c5a:	9f 4f       	sbci	r25, 0xFF	; 255
     c5c:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <Timer1_init>
	UART_ConfigType Uart_Config={9700,One_Bit,Disable,Eight_Bit};
     c60:	ce 01       	movw	r24, r28
     c62:	85 50       	subi	r24, 0x05	; 5
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	c0 5f       	subi	r28, 0xF0	; 240
     c68:	de 4f       	sbci	r29, 0xFE	; 254
     c6a:	99 83       	std	Y+1, r25	; 0x01
     c6c:	88 83       	st	Y, r24
     c6e:	c0 51       	subi	r28, 0x10	; 16
     c70:	d1 40       	sbci	r29, 0x01	; 1
     c72:	e6 e8       	ldi	r30, 0x86	; 134
     c74:	f1 e0       	ldi	r31, 0x01	; 1
     c76:	ce 5e       	subi	r28, 0xEE	; 238
     c78:	de 4f       	sbci	r29, 0xFE	; 254
     c7a:	f9 83       	std	Y+1, r31	; 0x01
     c7c:	e8 83       	st	Y, r30
     c7e:	c2 51       	subi	r28, 0x12	; 18
     c80:	d1 40       	sbci	r29, 0x01	; 1
     c82:	f7 e0       	ldi	r31, 0x07	; 7
     c84:	cc 5e       	subi	r28, 0xEC	; 236
     c86:	de 4f       	sbci	r29, 0xFE	; 254
     c88:	f8 83       	st	Y, r31
     c8a:	c4 51       	subi	r28, 0x14	; 20
     c8c:	d1 40       	sbci	r29, 0x01	; 1
     c8e:	ce 5e       	subi	r28, 0xEE	; 238
     c90:	de 4f       	sbci	r29, 0xFE	; 254
     c92:	e8 81       	ld	r30, Y
     c94:	f9 81       	ldd	r31, Y+1	; 0x01
     c96:	c2 51       	subi	r28, 0x12	; 18
     c98:	d1 40       	sbci	r29, 0x01	; 1
     c9a:	00 80       	ld	r0, Z
     c9c:	ce 5e       	subi	r28, 0xEE	; 238
     c9e:	de 4f       	sbci	r29, 0xFE	; 254
     ca0:	28 81       	ld	r18, Y
     ca2:	39 81       	ldd	r19, Y+1	; 0x01
     ca4:	c2 51       	subi	r28, 0x12	; 18
     ca6:	d1 40       	sbci	r29, 0x01	; 1
     ca8:	2f 5f       	subi	r18, 0xFF	; 255
     caa:	3f 4f       	sbci	r19, 0xFF	; 255
     cac:	ce 5e       	subi	r28, 0xEE	; 238
     cae:	de 4f       	sbci	r29, 0xFE	; 254
     cb0:	39 83       	std	Y+1, r19	; 0x01
     cb2:	28 83       	st	Y, r18
     cb4:	c2 51       	subi	r28, 0x12	; 18
     cb6:	d1 40       	sbci	r29, 0x01	; 1
     cb8:	c0 5f       	subi	r28, 0xF0	; 240
     cba:	de 4f       	sbci	r29, 0xFE	; 254
     cbc:	e8 81       	ld	r30, Y
     cbe:	f9 81       	ldd	r31, Y+1	; 0x01
     cc0:	c0 51       	subi	r28, 0x10	; 16
     cc2:	d1 40       	sbci	r29, 0x01	; 1
     cc4:	00 82       	st	Z, r0
     cc6:	c0 5f       	subi	r28, 0xF0	; 240
     cc8:	de 4f       	sbci	r29, 0xFE	; 254
     cca:	28 81       	ld	r18, Y
     ccc:	39 81       	ldd	r19, Y+1	; 0x01
     cce:	c0 51       	subi	r28, 0x10	; 16
     cd0:	d1 40       	sbci	r29, 0x01	; 1
     cd2:	2f 5f       	subi	r18, 0xFF	; 255
     cd4:	3f 4f       	sbci	r19, 0xFF	; 255
     cd6:	c0 5f       	subi	r28, 0xF0	; 240
     cd8:	de 4f       	sbci	r29, 0xFE	; 254
     cda:	39 83       	std	Y+1, r19	; 0x01
     cdc:	28 83       	st	Y, r18
     cde:	c0 51       	subi	r28, 0x10	; 16
     ce0:	d1 40       	sbci	r29, 0x01	; 1
     ce2:	cc 5e       	subi	r28, 0xEC	; 236
     ce4:	de 4f       	sbci	r29, 0xFE	; 254
     ce6:	38 81       	ld	r19, Y
     ce8:	c4 51       	subi	r28, 0x14	; 20
     cea:	d1 40       	sbci	r29, 0x01	; 1
     cec:	31 50       	subi	r19, 0x01	; 1
     cee:	cc 5e       	subi	r28, 0xEC	; 236
     cf0:	de 4f       	sbci	r29, 0xFE	; 254
     cf2:	38 83       	st	Y, r19
     cf4:	c4 51       	subi	r28, 0x14	; 20
     cf6:	d1 40       	sbci	r29, 0x01	; 1
     cf8:	cc 5e       	subi	r28, 0xEC	; 236
     cfa:	de 4f       	sbci	r29, 0xFE	; 254
     cfc:	88 81       	ld	r24, Y
     cfe:	c4 51       	subi	r28, 0x14	; 20
     d00:	d1 40       	sbci	r29, 0x01	; 1
     d02:	88 23       	and	r24, r24
     d04:	21 f6       	brne	.-120    	; 0xc8e <main+0x10e>
	UART_init(&Uart_Config);/* Initialize the UART module */
     d06:	ce 01       	movw	r24, r28
     d08:	85 50       	subi	r24, 0x05	; 5
     d0a:	9f 4f       	sbci	r25, 0xFF	; 255
     d0c:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <UART_init>
	LCD_init();/* Initialize the LCD module */
     d10:	0e 94 03 19 	call	0x3206	; 0x3206 <LCD_init>
	while(UART_recieveByte()!=MC2_ready); //wait until MC2 is ready to start process
     d14:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_recieveByte>
     d18:	88 36       	cpi	r24, 0x68	; 104
     d1a:	e1 f7       	brne	.-8      	; 0xd14 <main+0x194>
     d1c:	14 c6       	rjmp	.+3112   	; 0x1946 <main+0xdc6>

	while(1){

		while(access_Times==0){ //while first use for application or change password case
			UART_sendByte(New_Password); //notification about upcoming process to other MC
     d1e:	8b e6       	ldi	r24, 0x6B	; 107
     d20:	0e 94 03 20 	call	0x4006	; 0x4006 <UART_sendByte>
			LCD_displayString("plz enter pass:");
     d24:	80 e6       	ldi	r24, 0x60	; 96
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
			LCD_moveCursor(1,0); //messege displayed for human interface
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <LCD_moveCursor>
			uint8 temp=0;
     d34:	fe 01       	movw	r30, r28
     d36:	ec 50       	subi	r30, 0x0C	; 12
     d38:	ff 4f       	sbci	r31, 0xFF	; 255
     d3a:	10 82       	st	Z, r1
			uint8 i=0;
     d3c:	fe 01       	movw	r30, r28
     d3e:	ed 50       	subi	r30, 0x0D	; 13
     d40:	ff 4f       	sbci	r31, 0xFF	; 255
     d42:	10 82       	st	Z, r1
			uint8 key=0;
     d44:	fe 01       	movw	r30, r28
     d46:	ee 50       	subi	r30, 0x0E	; 14
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	10 82       	st	Z, r1
			for(i=0;i<5;i++){
     d4c:	fe 01       	movw	r30, r28
     d4e:	ed 50       	subi	r30, 0x0D	; 13
     d50:	ff 4f       	sbci	r31, 0xFF	; 255
     d52:	10 82       	st	Z, r1
     d54:	dd c0       	rjmp	.+442    	; 0xf10 <main+0x390>
				if((KEYPAD_getPressedKey()>=0)&&(KEYPAD_getPressedKey()<=9)){// to make sure user pushes a number
     d56:	0e 94 f7 17 	call	0x2fee	; 0x2fee <KEYPAD_getPressedKey>
     d5a:	0e 94 f7 17 	call	0x2fee	; 0x2fee <KEYPAD_getPressedKey>
     d5e:	8a 30       	cpi	r24, 0x0A	; 10
     d60:	08 f0       	brcs	.+2      	; 0xd64 <main+0x1e4>
     d62:	c4 c0       	rjmp	.+392    	; 0xeec <main+0x36c>
					send_Pass[i]=KEYPAD_getPressedKey(); //save input from user in first string
     d64:	fe 01       	movw	r30, r28
     d66:	ed 50       	subi	r30, 0x0D	; 13
     d68:	ff 4f       	sbci	r31, 0xFF	; 255
     d6a:	80 81       	ld	r24, Z
     d6c:	08 2f       	mov	r16, r24
     d6e:	10 e0       	ldi	r17, 0x00	; 0
     d70:	0e 94 f7 17 	call	0x2fee	; 0x2fee <KEYPAD_getPressedKey>
     d74:	f8 01       	movw	r30, r16
     d76:	e7 56       	subi	r30, 0x67	; 103
     d78:	fe 4f       	sbci	r31, 0xFE	; 254
     d7a:	80 83       	st	Z, r24
     d7c:	fe 01       	movw	r30, r28
     d7e:	e5 51       	subi	r30, 0x15	; 21
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	aa ef       	ldi	r26, 0xFA	; 250
     d88:	b3 e4       	ldi	r27, 0x43	; 67
     d8a:	80 83       	st	Z, r24
     d8c:	91 83       	std	Z+1, r25	; 0x01
     d8e:	a2 83       	std	Z+2, r26	; 0x02
     d90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d92:	8e 01       	movw	r16, r28
     d94:	09 51       	subi	r16, 0x19	; 25
     d96:	1f 4f       	sbci	r17, 0xFF	; 255
     d98:	fe 01       	movw	r30, r28
     d9a:	e5 51       	subi	r30, 0x15	; 21
     d9c:	ff 4f       	sbci	r31, 0xFF	; 255
     d9e:	60 81       	ld	r22, Z
     da0:	71 81       	ldd	r23, Z+1	; 0x01
     da2:	82 81       	ldd	r24, Z+2	; 0x02
     da4:	93 81       	ldd	r25, Z+3	; 0x03
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	4a ef       	ldi	r20, 0xFA	; 250
     dac:	54 e4       	ldi	r21, 0x44	; 68
     dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	f8 01       	movw	r30, r16
     db8:	80 83       	st	Z, r24
     dba:	91 83       	std	Z+1, r25	; 0x01
     dbc:	a2 83       	std	Z+2, r26	; 0x02
     dbe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dc0:	fe 01       	movw	r30, r28
     dc2:	e9 51       	subi	r30, 0x19	; 25
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	60 81       	ld	r22, Z
     dc8:	71 81       	ldd	r23, Z+1	; 0x01
     dca:	82 81       	ldd	r24, Z+2	; 0x02
     dcc:	93 81       	ldd	r25, Z+3	; 0x03
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e8       	ldi	r20, 0x80	; 128
     dd4:	5f e3       	ldi	r21, 0x3F	; 63
     dd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dda:	88 23       	and	r24, r24
     ddc:	44 f4       	brge	.+16     	; 0xdee <main+0x26e>
		__ticks = 1;
     dde:	fe 01       	movw	r30, r28
     de0:	eb 51       	subi	r30, 0x1B	; 27
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	91 83       	std	Z+1, r25	; 0x01
     dea:	80 83       	st	Z, r24
     dec:	64 c0       	rjmp	.+200    	; 0xeb6 <main+0x336>
	else if (__tmp > 65535)
     dee:	fe 01       	movw	r30, r28
     df0:	e9 51       	subi	r30, 0x19	; 25
     df2:	ff 4f       	sbci	r31, 0xFF	; 255
     df4:	60 81       	ld	r22, Z
     df6:	71 81       	ldd	r23, Z+1	; 0x01
     df8:	82 81       	ldd	r24, Z+2	; 0x02
     dfa:	93 81       	ldd	r25, Z+3	; 0x03
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	3f ef       	ldi	r19, 0xFF	; 255
     e00:	4f e7       	ldi	r20, 0x7F	; 127
     e02:	57 e4       	ldi	r21, 0x47	; 71
     e04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e08:	18 16       	cp	r1, r24
     e0a:	0c f0       	brlt	.+2      	; 0xe0e <main+0x28e>
     e0c:	43 c0       	rjmp	.+134    	; 0xe94 <main+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e0e:	fe 01       	movw	r30, r28
     e10:	e5 51       	subi	r30, 0x15	; 21
     e12:	ff 4f       	sbci	r31, 0xFF	; 255
     e14:	60 81       	ld	r22, Z
     e16:	71 81       	ldd	r23, Z+1	; 0x01
     e18:	82 81       	ldd	r24, Z+2	; 0x02
     e1a:	93 81       	ldd	r25, Z+3	; 0x03
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 e2       	ldi	r20, 0x20	; 32
     e22:	51 e4       	ldi	r21, 0x41	; 65
     e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	8e 01       	movw	r16, r28
     e2e:	0b 51       	subi	r16, 0x1B	; 27
     e30:	1f 4f       	sbci	r17, 0xFF	; 255
     e32:	bc 01       	movw	r22, r24
     e34:	cd 01       	movw	r24, r26
     e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	f8 01       	movw	r30, r16
     e40:	91 83       	std	Z+1, r25	; 0x01
     e42:	80 83       	st	Z, r24
     e44:	1f c0       	rjmp	.+62     	; 0xe84 <main+0x304>
     e46:	fe 01       	movw	r30, r28
     e48:	ed 51       	subi	r30, 0x1D	; 29
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	88 ec       	ldi	r24, 0xC8	; 200
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	91 83       	std	Z+1, r25	; 0x01
     e52:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e54:	fe 01       	movw	r30, r28
     e56:	ed 51       	subi	r30, 0x1D	; 29
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	80 81       	ld	r24, Z
     e5c:	91 81       	ldd	r25, Z+1	; 0x01
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	f1 f7       	brne	.-4      	; 0xe5e <main+0x2de>
     e62:	fe 01       	movw	r30, r28
     e64:	ed 51       	subi	r30, 0x1D	; 29
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	91 83       	std	Z+1, r25	; 0x01
     e6a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e6c:	de 01       	movw	r26, r28
     e6e:	ab 51       	subi	r26, 0x1B	; 27
     e70:	bf 4f       	sbci	r27, 0xFF	; 255
     e72:	fe 01       	movw	r30, r28
     e74:	eb 51       	subi	r30, 0x1B	; 27
     e76:	ff 4f       	sbci	r31, 0xFF	; 255
     e78:	80 81       	ld	r24, Z
     e7a:	91 81       	ldd	r25, Z+1	; 0x01
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	11 96       	adiw	r26, 0x01	; 1
     e80:	9c 93       	st	X, r25
     e82:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e84:	fe 01       	movw	r30, r28
     e86:	eb 51       	subi	r30, 0x1B	; 27
     e88:	ff 4f       	sbci	r31, 0xFF	; 255
     e8a:	80 81       	ld	r24, Z
     e8c:	91 81       	ldd	r25, Z+1	; 0x01
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	d1 f6       	brne	.-76     	; 0xe46 <main+0x2c6>
     e92:	27 c0       	rjmp	.+78     	; 0xee2 <main+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e94:	8e 01       	movw	r16, r28
     e96:	0b 51       	subi	r16, 0x1B	; 27
     e98:	1f 4f       	sbci	r17, 0xFF	; 255
     e9a:	fe 01       	movw	r30, r28
     e9c:	e9 51       	subi	r30, 0x19	; 25
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	60 81       	ld	r22, Z
     ea2:	71 81       	ldd	r23, Z+1	; 0x01
     ea4:	82 81       	ldd	r24, Z+2	; 0x02
     ea6:	93 81       	ldd	r25, Z+3	; 0x03
     ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	f8 01       	movw	r30, r16
     eb2:	91 83       	std	Z+1, r25	; 0x01
     eb4:	80 83       	st	Z, r24
     eb6:	de 01       	movw	r26, r28
     eb8:	af 51       	subi	r26, 0x1F	; 31
     eba:	bf 4f       	sbci	r27, 0xFF	; 255
     ebc:	fe 01       	movw	r30, r28
     ebe:	eb 51       	subi	r30, 0x1B	; 27
     ec0:	ff 4f       	sbci	r31, 0xFF	; 255
     ec2:	80 81       	ld	r24, Z
     ec4:	91 81       	ldd	r25, Z+1	; 0x01
     ec6:	8d 93       	st	X+, r24
     ec8:	9c 93       	st	X, r25
     eca:	fe 01       	movw	r30, r28
     ecc:	ef 51       	subi	r30, 0x1F	; 31
     ece:	ff 4f       	sbci	r31, 0xFF	; 255
     ed0:	80 81       	ld	r24, Z
     ed2:	91 81       	ldd	r25, Z+1	; 0x01
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <main+0x354>
     ed8:	fe 01       	movw	r30, r28
     eda:	ef 51       	subi	r30, 0x1F	; 31
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	91 83       	std	Z+1, r25	; 0x01
     ee0:	80 83       	st	Z, r24
					_delay_ms(500);//to make sure there is no re-bouncing
					LCD_displayString("*"); //for safety print '*'
     ee2:	80 e7       	ldi	r24, 0x70	; 112
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
     eea:	09 c0       	rjmp	.+18     	; 0xefe <main+0x37e>
				}
				else{
					i--;
     eec:	de 01       	movw	r26, r28
     eee:	ad 50       	subi	r26, 0x0D	; 13
     ef0:	bf 4f       	sbci	r27, 0xFF	; 255
     ef2:	fe 01       	movw	r30, r28
     ef4:	ed 50       	subi	r30, 0x0D	; 13
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	80 81       	ld	r24, Z
     efa:	81 50       	subi	r24, 0x01	; 1
     efc:	8c 93       	st	X, r24
			LCD_displayString("plz enter pass:");
			LCD_moveCursor(1,0); //messege displayed for human interface
			uint8 temp=0;
			uint8 i=0;
			uint8 key=0;
			for(i=0;i<5;i++){
     efe:	de 01       	movw	r26, r28
     f00:	ad 50       	subi	r26, 0x0D	; 13
     f02:	bf 4f       	sbci	r27, 0xFF	; 255
     f04:	fe 01       	movw	r30, r28
     f06:	ed 50       	subi	r30, 0x0D	; 13
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	80 81       	ld	r24, Z
     f0c:	8f 5f       	subi	r24, 0xFF	; 255
     f0e:	8c 93       	st	X, r24
     f10:	fe 01       	movw	r30, r28
     f12:	ed 50       	subi	r30, 0x0D	; 13
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	80 81       	ld	r24, Z
     f18:	85 30       	cpi	r24, 0x05	; 5
     f1a:	08 f4       	brcc	.+2      	; 0xf1e <main+0x39e>
     f1c:	1c cf       	rjmp	.-456    	; 0xd56 <main+0x1d6>
				}
				else{
					i--;
				}
			}
			while(KEYPAD_getPressedKey()!='=');// to submit password
     f1e:	0e 94 f7 17 	call	0x2fee	; 0x2fee <KEYPAD_getPressedKey>
     f22:	8d 33       	cpi	r24, 0x3D	; 61
     f24:	e1 f7       	brne	.-8      	; 0xf1e <main+0x39e>
			LCD_clearScreen();
     f26:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
			LCD_displayString("    loading"); //to display that system is running
     f2a:	82 e7       	ldi	r24, 0x72	; 114
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
     f32:	fe 01       	movw	r30, r28
     f34:	e3 52       	subi	r30, 0x23	; 35
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	aa ef       	ldi	r26, 0xFA	; 250
     f3e:	b3 e4       	ldi	r27, 0x43	; 67
     f40:	80 83       	st	Z, r24
     f42:	91 83       	std	Z+1, r25	; 0x01
     f44:	a2 83       	std	Z+2, r26	; 0x02
     f46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f48:	8e 01       	movw	r16, r28
     f4a:	07 52       	subi	r16, 0x27	; 39
     f4c:	1f 4f       	sbci	r17, 0xFF	; 255
     f4e:	fe 01       	movw	r30, r28
     f50:	e3 52       	subi	r30, 0x23	; 35
     f52:	ff 4f       	sbci	r31, 0xFF	; 255
     f54:	60 81       	ld	r22, Z
     f56:	71 81       	ldd	r23, Z+1	; 0x01
     f58:	82 81       	ldd	r24, Z+2	; 0x02
     f5a:	93 81       	ldd	r25, Z+3	; 0x03
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	4a ef       	ldi	r20, 0xFA	; 250
     f62:	54 e4       	ldi	r21, 0x44	; 68
     f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	f8 01       	movw	r30, r16
     f6e:	80 83       	st	Z, r24
     f70:	91 83       	std	Z+1, r25	; 0x01
     f72:	a2 83       	std	Z+2, r26	; 0x02
     f74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f76:	fe 01       	movw	r30, r28
     f78:	e7 52       	subi	r30, 0x27	; 39
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	60 81       	ld	r22, Z
     f7e:	71 81       	ldd	r23, Z+1	; 0x01
     f80:	82 81       	ldd	r24, Z+2	; 0x02
     f82:	93 81       	ldd	r25, Z+3	; 0x03
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e8       	ldi	r20, 0x80	; 128
     f8a:	5f e3       	ldi	r21, 0x3F	; 63
     f8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f90:	88 23       	and	r24, r24
     f92:	44 f4       	brge	.+16     	; 0xfa4 <main+0x424>
		__ticks = 1;
     f94:	fe 01       	movw	r30, r28
     f96:	e9 52       	subi	r30, 0x29	; 41
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	91 83       	std	Z+1, r25	; 0x01
     fa0:	80 83       	st	Z, r24
     fa2:	64 c0       	rjmp	.+200    	; 0x106c <main+0x4ec>
	else if (__tmp > 65535)
     fa4:	fe 01       	movw	r30, r28
     fa6:	e7 52       	subi	r30, 0x27	; 39
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	60 81       	ld	r22, Z
     fac:	71 81       	ldd	r23, Z+1	; 0x01
     fae:	82 81       	ldd	r24, Z+2	; 0x02
     fb0:	93 81       	ldd	r25, Z+3	; 0x03
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	3f ef       	ldi	r19, 0xFF	; 255
     fb6:	4f e7       	ldi	r20, 0x7F	; 127
     fb8:	57 e4       	ldi	r21, 0x47	; 71
     fba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fbe:	18 16       	cp	r1, r24
     fc0:	0c f0       	brlt	.+2      	; 0xfc4 <main+0x444>
     fc2:	43 c0       	rjmp	.+134    	; 0x104a <main+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fc4:	fe 01       	movw	r30, r28
     fc6:	e3 52       	subi	r30, 0x23	; 35
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	60 81       	ld	r22, Z
     fcc:	71 81       	ldd	r23, Z+1	; 0x01
     fce:	82 81       	ldd	r24, Z+2	; 0x02
     fd0:	93 81       	ldd	r25, Z+3	; 0x03
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e2       	ldi	r20, 0x20	; 32
     fd8:	51 e4       	ldi	r21, 0x41	; 65
     fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	8e 01       	movw	r16, r28
     fe4:	09 52       	subi	r16, 0x29	; 41
     fe6:	1f 4f       	sbci	r17, 0xFF	; 255
     fe8:	bc 01       	movw	r22, r24
     fea:	cd 01       	movw	r24, r26
     fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	f8 01       	movw	r30, r16
     ff6:	91 83       	std	Z+1, r25	; 0x01
     ff8:	80 83       	st	Z, r24
     ffa:	1f c0       	rjmp	.+62     	; 0x103a <main+0x4ba>
     ffc:	fe 01       	movw	r30, r28
     ffe:	eb 52       	subi	r30, 0x2B	; 43
    1000:	ff 4f       	sbci	r31, 0xFF	; 255
    1002:	88 ec       	ldi	r24, 0xC8	; 200
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	91 83       	std	Z+1, r25	; 0x01
    1008:	80 83       	st	Z, r24
    100a:	fe 01       	movw	r30, r28
    100c:	eb 52       	subi	r30, 0x2B	; 43
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	80 81       	ld	r24, Z
    1012:	91 81       	ldd	r25, Z+1	; 0x01
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	f1 f7       	brne	.-4      	; 0x1014 <main+0x494>
    1018:	fe 01       	movw	r30, r28
    101a:	eb 52       	subi	r30, 0x2B	; 43
    101c:	ff 4f       	sbci	r31, 0xFF	; 255
    101e:	91 83       	std	Z+1, r25	; 0x01
    1020:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1022:	de 01       	movw	r26, r28
    1024:	a9 52       	subi	r26, 0x29	; 41
    1026:	bf 4f       	sbci	r27, 0xFF	; 255
    1028:	fe 01       	movw	r30, r28
    102a:	e9 52       	subi	r30, 0x29	; 41
    102c:	ff 4f       	sbci	r31, 0xFF	; 255
    102e:	80 81       	ld	r24, Z
    1030:	91 81       	ldd	r25, Z+1	; 0x01
    1032:	01 97       	sbiw	r24, 0x01	; 1
    1034:	11 96       	adiw	r26, 0x01	; 1
    1036:	9c 93       	st	X, r25
    1038:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103a:	fe 01       	movw	r30, r28
    103c:	e9 52       	subi	r30, 0x29	; 41
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	80 81       	ld	r24, Z
    1042:	91 81       	ldd	r25, Z+1	; 0x01
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	d1 f6       	brne	.-76     	; 0xffc <main+0x47c>
    1048:	27 c0       	rjmp	.+78     	; 0x1098 <main+0x518>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    104a:	8e 01       	movw	r16, r28
    104c:	09 52       	subi	r16, 0x29	; 41
    104e:	1f 4f       	sbci	r17, 0xFF	; 255
    1050:	fe 01       	movw	r30, r28
    1052:	e7 52       	subi	r30, 0x27	; 39
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	60 81       	ld	r22, Z
    1058:	71 81       	ldd	r23, Z+1	; 0x01
    105a:	82 81       	ldd	r24, Z+2	; 0x02
    105c:	93 81       	ldd	r25, Z+3	; 0x03
    105e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	f8 01       	movw	r30, r16
    1068:	91 83       	std	Z+1, r25	; 0x01
    106a:	80 83       	st	Z, r24
    106c:	de 01       	movw	r26, r28
    106e:	ad 52       	subi	r26, 0x2D	; 45
    1070:	bf 4f       	sbci	r27, 0xFF	; 255
    1072:	fe 01       	movw	r30, r28
    1074:	e9 52       	subi	r30, 0x29	; 41
    1076:	ff 4f       	sbci	r31, 0xFF	; 255
    1078:	80 81       	ld	r24, Z
    107a:	91 81       	ldd	r25, Z+1	; 0x01
    107c:	8d 93       	st	X+, r24
    107e:	9c 93       	st	X, r25
    1080:	fe 01       	movw	r30, r28
    1082:	ed 52       	subi	r30, 0x2D	; 45
    1084:	ff 4f       	sbci	r31, 0xFF	; 255
    1086:	80 81       	ld	r24, Z
    1088:	91 81       	ldd	r25, Z+1	; 0x01
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <main+0x50a>
    108e:	fe 01       	movw	r30, r28
    1090:	ed 52       	subi	r30, 0x2D	; 45
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	91 83       	std	Z+1, r25	; 0x01
    1096:	80 83       	st	Z, r24
			_delay_ms(500);//to make sure there is no re-bouncing
			LCD_clearScreen(); //clear screen from previous writings
    1098:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
			send_Pass[i]='#'; // character chosen to be the last in any Uart send string
    109c:	fe 01       	movw	r30, r28
    109e:	ed 50       	subi	r30, 0x0D	; 13
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	80 81       	ld	r24, Z
    10a4:	88 2f       	mov	r24, r24
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	fc 01       	movw	r30, r24
    10aa:	e7 56       	subi	r30, 0x67	; 103
    10ac:	fe 4f       	sbci	r31, 0xFE	; 254
    10ae:	83 e2       	ldi	r24, 0x23	; 35
    10b0:	80 83       	st	Z, r24
			LCD_displayString("plz re-enter the");
    10b2:	8e e7       	ldi	r24, 0x7E	; 126
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
			LCD_moveCursor(1,0); //user display to know what action to do
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <LCD_moveCursor>
			LCD_displayString("same pass:");
    10c2:	8f e8       	ldi	r24, 0x8F	; 143
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
			LCD_moveCursor(1,11);
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	6b e0       	ldi	r22, 0x0B	; 11
    10ce:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <LCD_moveCursor>
			for(i=0;i<5;i++){
    10d2:	fe 01       	movw	r30, r28
    10d4:	ed 50       	subi	r30, 0x0D	; 13
    10d6:	ff 4f       	sbci	r31, 0xFF	; 255
    10d8:	10 82       	st	Z, r1
    10da:	dd c0       	rjmp	.+442    	; 0x1296 <main+0x716>
				if((KEYPAD_getPressedKey()>=0)&&(KEYPAD_getPressedKey()<=9)){// to make sure user pushes a number
    10dc:	0e 94 f7 17 	call	0x2fee	; 0x2fee <KEYPAD_getPressedKey>
    10e0:	0e 94 f7 17 	call	0x2fee	; 0x2fee <KEYPAD_getPressedKey>
    10e4:	8a 30       	cpi	r24, 0x0A	; 10
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <main+0x56a>
    10e8:	c4 c0       	rjmp	.+392    	; 0x1272 <main+0x6f2>
					confirm_Pass[i]=KEYPAD_getPressedKey();//save input from user in second string
    10ea:	fe 01       	movw	r30, r28
    10ec:	ed 50       	subi	r30, 0x0D	; 13
    10ee:	ff 4f       	sbci	r31, 0xFF	; 255
    10f0:	80 81       	ld	r24, Z
    10f2:	08 2f       	mov	r16, r24
    10f4:	10 e0       	ldi	r17, 0x00	; 0
    10f6:	0e 94 f7 17 	call	0x2fee	; 0x2fee <KEYPAD_getPressedKey>
    10fa:	f8 01       	movw	r30, r16
    10fc:	e0 56       	subi	r30, 0x60	; 96
    10fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1100:	80 83       	st	Z, r24
    1102:	fe 01       	movw	r30, r28
    1104:	e1 53       	subi	r30, 0x31	; 49
    1106:	ff 4f       	sbci	r31, 0xFF	; 255
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	aa ef       	ldi	r26, 0xFA	; 250
    110e:	b3 e4       	ldi	r27, 0x43	; 67
    1110:	80 83       	st	Z, r24
    1112:	91 83       	std	Z+1, r25	; 0x01
    1114:	a2 83       	std	Z+2, r26	; 0x02
    1116:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1118:	8e 01       	movw	r16, r28
    111a:	05 53       	subi	r16, 0x35	; 53
    111c:	1f 4f       	sbci	r17, 0xFF	; 255
    111e:	fe 01       	movw	r30, r28
    1120:	e1 53       	subi	r30, 0x31	; 49
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	60 81       	ld	r22, Z
    1126:	71 81       	ldd	r23, Z+1	; 0x01
    1128:	82 81       	ldd	r24, Z+2	; 0x02
    112a:	93 81       	ldd	r25, Z+3	; 0x03
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	4a ef       	ldi	r20, 0xFA	; 250
    1132:	54 e4       	ldi	r21, 0x44	; 68
    1134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	f8 01       	movw	r30, r16
    113e:	80 83       	st	Z, r24
    1140:	91 83       	std	Z+1, r25	; 0x01
    1142:	a2 83       	std	Z+2, r26	; 0x02
    1144:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1146:	fe 01       	movw	r30, r28
    1148:	e5 53       	subi	r30, 0x35	; 53
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	60 81       	ld	r22, Z
    114e:	71 81       	ldd	r23, Z+1	; 0x01
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	93 81       	ldd	r25, Z+3	; 0x03
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e8       	ldi	r20, 0x80	; 128
    115a:	5f e3       	ldi	r21, 0x3F	; 63
    115c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1160:	88 23       	and	r24, r24
    1162:	44 f4       	brge	.+16     	; 0x1174 <main+0x5f4>
		__ticks = 1;
    1164:	fe 01       	movw	r30, r28
    1166:	e7 53       	subi	r30, 0x37	; 55
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	91 83       	std	Z+1, r25	; 0x01
    1170:	80 83       	st	Z, r24
    1172:	64 c0       	rjmp	.+200    	; 0x123c <main+0x6bc>
	else if (__tmp > 65535)
    1174:	fe 01       	movw	r30, r28
    1176:	e5 53       	subi	r30, 0x35	; 53
    1178:	ff 4f       	sbci	r31, 0xFF	; 255
    117a:	60 81       	ld	r22, Z
    117c:	71 81       	ldd	r23, Z+1	; 0x01
    117e:	82 81       	ldd	r24, Z+2	; 0x02
    1180:	93 81       	ldd	r25, Z+3	; 0x03
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	3f ef       	ldi	r19, 0xFF	; 255
    1186:	4f e7       	ldi	r20, 0x7F	; 127
    1188:	57 e4       	ldi	r21, 0x47	; 71
    118a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    118e:	18 16       	cp	r1, r24
    1190:	0c f0       	brlt	.+2      	; 0x1194 <main+0x614>
    1192:	43 c0       	rjmp	.+134    	; 0x121a <main+0x69a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1194:	fe 01       	movw	r30, r28
    1196:	e1 53       	subi	r30, 0x31	; 49
    1198:	ff 4f       	sbci	r31, 0xFF	; 255
    119a:	60 81       	ld	r22, Z
    119c:	71 81       	ldd	r23, Z+1	; 0x01
    119e:	82 81       	ldd	r24, Z+2	; 0x02
    11a0:	93 81       	ldd	r25, Z+3	; 0x03
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e2       	ldi	r20, 0x20	; 32
    11a8:	51 e4       	ldi	r21, 0x41	; 65
    11aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	8e 01       	movw	r16, r28
    11b4:	07 53       	subi	r16, 0x37	; 55
    11b6:	1f 4f       	sbci	r17, 0xFF	; 255
    11b8:	bc 01       	movw	r22, r24
    11ba:	cd 01       	movw	r24, r26
    11bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	f8 01       	movw	r30, r16
    11c6:	91 83       	std	Z+1, r25	; 0x01
    11c8:	80 83       	st	Z, r24
    11ca:	1f c0       	rjmp	.+62     	; 0x120a <main+0x68a>
    11cc:	fe 01       	movw	r30, r28
    11ce:	e9 53       	subi	r30, 0x39	; 57
    11d0:	ff 4f       	sbci	r31, 0xFF	; 255
    11d2:	88 ec       	ldi	r24, 0xC8	; 200
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	91 83       	std	Z+1, r25	; 0x01
    11d8:	80 83       	st	Z, r24
    11da:	fe 01       	movw	r30, r28
    11dc:	e9 53       	subi	r30, 0x39	; 57
    11de:	ff 4f       	sbci	r31, 0xFF	; 255
    11e0:	80 81       	ld	r24, Z
    11e2:	91 81       	ldd	r25, Z+1	; 0x01
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <main+0x664>
    11e8:	fe 01       	movw	r30, r28
    11ea:	e9 53       	subi	r30, 0x39	; 57
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	91 83       	std	Z+1, r25	; 0x01
    11f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f2:	de 01       	movw	r26, r28
    11f4:	a7 53       	subi	r26, 0x37	; 55
    11f6:	bf 4f       	sbci	r27, 0xFF	; 255
    11f8:	fe 01       	movw	r30, r28
    11fa:	e7 53       	subi	r30, 0x37	; 55
    11fc:	ff 4f       	sbci	r31, 0xFF	; 255
    11fe:	80 81       	ld	r24, Z
    1200:	91 81       	ldd	r25, Z+1	; 0x01
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	11 96       	adiw	r26, 0x01	; 1
    1206:	9c 93       	st	X, r25
    1208:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    120a:	fe 01       	movw	r30, r28
    120c:	e7 53       	subi	r30, 0x37	; 55
    120e:	ff 4f       	sbci	r31, 0xFF	; 255
    1210:	80 81       	ld	r24, Z
    1212:	91 81       	ldd	r25, Z+1	; 0x01
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	d1 f6       	brne	.-76     	; 0x11cc <main+0x64c>
    1218:	27 c0       	rjmp	.+78     	; 0x1268 <main+0x6e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    121a:	8e 01       	movw	r16, r28
    121c:	07 53       	subi	r16, 0x37	; 55
    121e:	1f 4f       	sbci	r17, 0xFF	; 255
    1220:	fe 01       	movw	r30, r28
    1222:	e5 53       	subi	r30, 0x35	; 53
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	60 81       	ld	r22, Z
    1228:	71 81       	ldd	r23, Z+1	; 0x01
    122a:	82 81       	ldd	r24, Z+2	; 0x02
    122c:	93 81       	ldd	r25, Z+3	; 0x03
    122e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	f8 01       	movw	r30, r16
    1238:	91 83       	std	Z+1, r25	; 0x01
    123a:	80 83       	st	Z, r24
    123c:	de 01       	movw	r26, r28
    123e:	ab 53       	subi	r26, 0x3B	; 59
    1240:	bf 4f       	sbci	r27, 0xFF	; 255
    1242:	fe 01       	movw	r30, r28
    1244:	e7 53       	subi	r30, 0x37	; 55
    1246:	ff 4f       	sbci	r31, 0xFF	; 255
    1248:	80 81       	ld	r24, Z
    124a:	91 81       	ldd	r25, Z+1	; 0x01
    124c:	8d 93       	st	X+, r24
    124e:	9c 93       	st	X, r25
    1250:	fe 01       	movw	r30, r28
    1252:	eb 53       	subi	r30, 0x3B	; 59
    1254:	ff 4f       	sbci	r31, 0xFF	; 255
    1256:	80 81       	ld	r24, Z
    1258:	91 81       	ldd	r25, Z+1	; 0x01
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	f1 f7       	brne	.-4      	; 0x125a <main+0x6da>
    125e:	fe 01       	movw	r30, r28
    1260:	eb 53       	subi	r30, 0x3B	; 59
    1262:	ff 4f       	sbci	r31, 0xFF	; 255
    1264:	91 83       	std	Z+1, r25	; 0x01
    1266:	80 83       	st	Z, r24
					_delay_ms(500);//to make sure there is no re-bouncing
					LCD_displayString("*");
    1268:	80 e7       	ldi	r24, 0x70	; 112
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
    1270:	09 c0       	rjmp	.+18     	; 0x1284 <main+0x704>
				}
				else{
					i--;
    1272:	de 01       	movw	r26, r28
    1274:	ad 50       	subi	r26, 0x0D	; 13
    1276:	bf 4f       	sbci	r27, 0xFF	; 255
    1278:	fe 01       	movw	r30, r28
    127a:	ed 50       	subi	r30, 0x0D	; 13
    127c:	ff 4f       	sbci	r31, 0xFF	; 255
    127e:	80 81       	ld	r24, Z
    1280:	81 50       	subi	r24, 0x01	; 1
    1282:	8c 93       	st	X, r24
			send_Pass[i]='#'; // character chosen to be the last in any Uart send string
			LCD_displayString("plz re-enter the");
			LCD_moveCursor(1,0); //user display to know what action to do
			LCD_displayString("same pass:");
			LCD_moveCursor(1,11);
			for(i=0;i<5;i++){
    1284:	de 01       	movw	r26, r28
    1286:	ad 50       	subi	r26, 0x0D	; 13
    1288:	bf 4f       	sbci	r27, 0xFF	; 255
    128a:	fe 01       	movw	r30, r28
    128c:	ed 50       	subi	r30, 0x0D	; 13
    128e:	ff 4f       	sbci	r31, 0xFF	; 255
    1290:	80 81       	ld	r24, Z
    1292:	8f 5f       	subi	r24, 0xFF	; 255
    1294:	8c 93       	st	X, r24
    1296:	fe 01       	movw	r30, r28
    1298:	ed 50       	subi	r30, 0x0D	; 13
    129a:	ff 4f       	sbci	r31, 0xFF	; 255
    129c:	80 81       	ld	r24, Z
    129e:	85 30       	cpi	r24, 0x05	; 5
    12a0:	08 f4       	brcc	.+2      	; 0x12a4 <main+0x724>
    12a2:	1c cf       	rjmp	.-456    	; 0x10dc <main+0x55c>
				}
				else{
					i--;
				}
			}
			while(KEYPAD_getPressedKey()!='=');// to submit password
    12a4:	0e 94 f7 17 	call	0x2fee	; 0x2fee <KEYPAD_getPressedKey>
    12a8:	8d 33       	cpi	r24, 0x3D	; 61
    12aa:	e1 f7       	brne	.-8      	; 0x12a4 <main+0x724>
			LCD_clearScreen();
    12ac:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
			LCD_displayString("    loading"); //to display that system is running
    12b0:	82 e7       	ldi	r24, 0x72	; 114
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
    12b8:	fe 01       	movw	r30, r28
    12ba:	ef 53       	subi	r30, 0x3F	; 63
    12bc:	ff 4f       	sbci	r31, 0xFF	; 255
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	aa ef       	ldi	r26, 0xFA	; 250
    12c4:	b3 e4       	ldi	r27, 0x43	; 67
    12c6:	80 83       	st	Z, r24
    12c8:	91 83       	std	Z+1, r25	; 0x01
    12ca:	a2 83       	std	Z+2, r26	; 0x02
    12cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ce:	8e 01       	movw	r16, r28
    12d0:	03 54       	subi	r16, 0x43	; 67
    12d2:	1f 4f       	sbci	r17, 0xFF	; 255
    12d4:	fe 01       	movw	r30, r28
    12d6:	ef 53       	subi	r30, 0x3F	; 63
    12d8:	ff 4f       	sbci	r31, 0xFF	; 255
    12da:	60 81       	ld	r22, Z
    12dc:	71 81       	ldd	r23, Z+1	; 0x01
    12de:	82 81       	ldd	r24, Z+2	; 0x02
    12e0:	93 81       	ldd	r25, Z+3	; 0x03
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	4a ef       	ldi	r20, 0xFA	; 250
    12e8:	54 e4       	ldi	r21, 0x44	; 68
    12ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	f8 01       	movw	r30, r16
    12f4:	80 83       	st	Z, r24
    12f6:	91 83       	std	Z+1, r25	; 0x01
    12f8:	a2 83       	std	Z+2, r26	; 0x02
    12fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12fc:	fe 01       	movw	r30, r28
    12fe:	e3 54       	subi	r30, 0x43	; 67
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	60 81       	ld	r22, Z
    1304:	71 81       	ldd	r23, Z+1	; 0x01
    1306:	82 81       	ldd	r24, Z+2	; 0x02
    1308:	93 81       	ldd	r25, Z+3	; 0x03
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e8       	ldi	r20, 0x80	; 128
    1310:	5f e3       	ldi	r21, 0x3F	; 63
    1312:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1316:	88 23       	and	r24, r24
    1318:	44 f4       	brge	.+16     	; 0x132a <main+0x7aa>
		__ticks = 1;
    131a:	fe 01       	movw	r30, r28
    131c:	e5 54       	subi	r30, 0x45	; 69
    131e:	ff 4f       	sbci	r31, 0xFF	; 255
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	91 83       	std	Z+1, r25	; 0x01
    1326:	80 83       	st	Z, r24
    1328:	64 c0       	rjmp	.+200    	; 0x13f2 <main+0x872>
	else if (__tmp > 65535)
    132a:	fe 01       	movw	r30, r28
    132c:	e3 54       	subi	r30, 0x43	; 67
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	60 81       	ld	r22, Z
    1332:	71 81       	ldd	r23, Z+1	; 0x01
    1334:	82 81       	ldd	r24, Z+2	; 0x02
    1336:	93 81       	ldd	r25, Z+3	; 0x03
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	3f ef       	ldi	r19, 0xFF	; 255
    133c:	4f e7       	ldi	r20, 0x7F	; 127
    133e:	57 e4       	ldi	r21, 0x47	; 71
    1340:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1344:	18 16       	cp	r1, r24
    1346:	0c f0       	brlt	.+2      	; 0x134a <main+0x7ca>
    1348:	43 c0       	rjmp	.+134    	; 0x13d0 <main+0x850>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    134a:	fe 01       	movw	r30, r28
    134c:	ef 53       	subi	r30, 0x3F	; 63
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	60 81       	ld	r22, Z
    1352:	71 81       	ldd	r23, Z+1	; 0x01
    1354:	82 81       	ldd	r24, Z+2	; 0x02
    1356:	93 81       	ldd	r25, Z+3	; 0x03
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e2       	ldi	r20, 0x20	; 32
    135e:	51 e4       	ldi	r21, 0x41	; 65
    1360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	8e 01       	movw	r16, r28
    136a:	05 54       	subi	r16, 0x45	; 69
    136c:	1f 4f       	sbci	r17, 0xFF	; 255
    136e:	bc 01       	movw	r22, r24
    1370:	cd 01       	movw	r24, r26
    1372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	f8 01       	movw	r30, r16
    137c:	91 83       	std	Z+1, r25	; 0x01
    137e:	80 83       	st	Z, r24
    1380:	1f c0       	rjmp	.+62     	; 0x13c0 <main+0x840>
    1382:	fe 01       	movw	r30, r28
    1384:	e7 54       	subi	r30, 0x47	; 71
    1386:	ff 4f       	sbci	r31, 0xFF	; 255
    1388:	88 ec       	ldi	r24, 0xC8	; 200
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	80 83       	st	Z, r24
    1390:	fe 01       	movw	r30, r28
    1392:	e7 54       	subi	r30, 0x47	; 71
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	80 81       	ld	r24, Z
    1398:	91 81       	ldd	r25, Z+1	; 0x01
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	f1 f7       	brne	.-4      	; 0x139a <main+0x81a>
    139e:	fe 01       	movw	r30, r28
    13a0:	e7 54       	subi	r30, 0x47	; 71
    13a2:	ff 4f       	sbci	r31, 0xFF	; 255
    13a4:	91 83       	std	Z+1, r25	; 0x01
    13a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a8:	de 01       	movw	r26, r28
    13aa:	a5 54       	subi	r26, 0x45	; 69
    13ac:	bf 4f       	sbci	r27, 0xFF	; 255
    13ae:	fe 01       	movw	r30, r28
    13b0:	e5 54       	subi	r30, 0x45	; 69
    13b2:	ff 4f       	sbci	r31, 0xFF	; 255
    13b4:	80 81       	ld	r24, Z
    13b6:	91 81       	ldd	r25, Z+1	; 0x01
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	11 96       	adiw	r26, 0x01	; 1
    13bc:	9c 93       	st	X, r25
    13be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c0:	fe 01       	movw	r30, r28
    13c2:	e5 54       	subi	r30, 0x45	; 69
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	80 81       	ld	r24, Z
    13c8:	91 81       	ldd	r25, Z+1	; 0x01
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	d1 f6       	brne	.-76     	; 0x1382 <main+0x802>
    13ce:	27 c0       	rjmp	.+78     	; 0x141e <main+0x89e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d0:	8e 01       	movw	r16, r28
    13d2:	05 54       	subi	r16, 0x45	; 69
    13d4:	1f 4f       	sbci	r17, 0xFF	; 255
    13d6:	fe 01       	movw	r30, r28
    13d8:	e3 54       	subi	r30, 0x43	; 67
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	60 81       	ld	r22, Z
    13de:	71 81       	ldd	r23, Z+1	; 0x01
    13e0:	82 81       	ldd	r24, Z+2	; 0x02
    13e2:	93 81       	ldd	r25, Z+3	; 0x03
    13e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	f8 01       	movw	r30, r16
    13ee:	91 83       	std	Z+1, r25	; 0x01
    13f0:	80 83       	st	Z, r24
    13f2:	de 01       	movw	r26, r28
    13f4:	a9 54       	subi	r26, 0x49	; 73
    13f6:	bf 4f       	sbci	r27, 0xFF	; 255
    13f8:	fe 01       	movw	r30, r28
    13fa:	e5 54       	subi	r30, 0x45	; 69
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	80 81       	ld	r24, Z
    1400:	91 81       	ldd	r25, Z+1	; 0x01
    1402:	8d 93       	st	X+, r24
    1404:	9c 93       	st	X, r25
    1406:	fe 01       	movw	r30, r28
    1408:	e9 54       	subi	r30, 0x49	; 73
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	80 81       	ld	r24, Z
    140e:	91 81       	ldd	r25, Z+1	; 0x01
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	f1 f7       	brne	.-4      	; 0x1410 <main+0x890>
    1414:	fe 01       	movw	r30, r28
    1416:	e9 54       	subi	r30, 0x49	; 73
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	91 83       	std	Z+1, r25	; 0x01
    141c:	80 83       	st	Z, r24
			_delay_ms(500); //to make sure there is no re-bouncing
			confirm_Pass[i]='#';// character chosen to be the last in any Uart send string
    141e:	fe 01       	movw	r30, r28
    1420:	ed 50       	subi	r30, 0x0D	; 13
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	80 81       	ld	r24, Z
    1426:	88 2f       	mov	r24, r24
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	fc 01       	movw	r30, r24
    142c:	e0 56       	subi	r30, 0x60	; 96
    142e:	fe 4f       	sbci	r31, 0xFE	; 254
    1430:	83 e2       	ldi	r24, 0x23	; 35
    1432:	80 83       	st	Z, r24
			UART_sendString(send_Pass);//send first string to control MC
    1434:	89 e9       	ldi	r24, 0x99	; 153
    1436:	91 e0       	ldi	r25, 0x01	; 1
    1438:	0e 94 29 20 	call	0x4052	; 0x4052 <UART_sendString>
			while(UART_recieveByte()!=Confirm_Msg); //wait until confirmation notification
    143c:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_recieveByte>
    1440:	85 36       	cpi	r24, 0x65	; 101
    1442:	e1 f7       	brne	.-8      	; 0x143c <main+0x8bc>
			UART_sendString(confirm_Pass); //send second string to control MC
    1444:	80 ea       	ldi	r24, 0xA0	; 160
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	0e 94 29 20 	call	0x4052	; 0x4052 <UART_sendString>
			key=0;
    144c:	fe 01       	movw	r30, r28
    144e:	ee 50       	subi	r30, 0x0E	; 14
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	10 82       	st	Z, r1
			temp=0;
    1454:	fe 01       	movw	r30, r28
    1456:	ec 50       	subi	r30, 0x0C	; 12
    1458:	ff 4f       	sbci	r31, 0xFF	; 255
    145a:	10 82       	st	Z, r1
    145c:	6d c2       	rjmp	.+1242   	; 0x1938 <main+0xdb8>
			while(temp==0){
				while(UART_recieveByte()!=Confirm_Msg); //waiting confirmation from MC2 to continue
    145e:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_recieveByte>
    1462:	85 36       	cpi	r24, 0x65	; 101
    1464:	e1 f7       	brne	.-8      	; 0x145e <main+0x8de>
				key=UART_recieveByte();
    1466:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_recieveByte>
    146a:	fe 01       	movw	r30, r28
    146c:	ee 50       	subi	r30, 0x0E	; 14
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	80 83       	st	Z, r24
				if(key==Password_Match){//passwords are identical notification
    1472:	fe 01       	movw	r30, r28
    1474:	ee 50       	subi	r30, 0x0E	; 14
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	80 81       	ld	r24, Z
    147a:	8d 36       	cpi	r24, 0x6D	; 109
    147c:	09 f0       	breq	.+2      	; 0x1480 <main+0x900>
    147e:	cc c0       	rjmp	.+408    	; 0x1618 <main+0xa98>
					LCD_clearScreen();
    1480:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
					LCD_displayString(" password saved");
    1484:	8a e9       	ldi	r24, 0x9A	; 154
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
					LCD_moveCursor(1,0); //user display on system status
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <LCD_moveCursor>
					LCD_displayString("  successfully ");
    1494:	8a ea       	ldi	r24, 0xAA	; 170
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
    149c:	fe 01       	movw	r30, r28
    149e:	ed 54       	subi	r30, 0x4D	; 77
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	aa e7       	ldi	r26, 0x7A	; 122
    14a8:	b4 e4       	ldi	r27, 0x44	; 68
    14aa:	80 83       	st	Z, r24
    14ac:	91 83       	std	Z+1, r25	; 0x01
    14ae:	a2 83       	std	Z+2, r26	; 0x02
    14b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b2:	8e 01       	movw	r16, r28
    14b4:	01 55       	subi	r16, 0x51	; 81
    14b6:	1f 4f       	sbci	r17, 0xFF	; 255
    14b8:	fe 01       	movw	r30, r28
    14ba:	ed 54       	subi	r30, 0x4D	; 77
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	60 81       	ld	r22, Z
    14c0:	71 81       	ldd	r23, Z+1	; 0x01
    14c2:	82 81       	ldd	r24, Z+2	; 0x02
    14c4:	93 81       	ldd	r25, Z+3	; 0x03
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	4a ef       	ldi	r20, 0xFA	; 250
    14cc:	54 e4       	ldi	r21, 0x44	; 68
    14ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	f8 01       	movw	r30, r16
    14d8:	80 83       	st	Z, r24
    14da:	91 83       	std	Z+1, r25	; 0x01
    14dc:	a2 83       	std	Z+2, r26	; 0x02
    14de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14e0:	fe 01       	movw	r30, r28
    14e2:	e1 55       	subi	r30, 0x51	; 81
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	60 81       	ld	r22, Z
    14e8:	71 81       	ldd	r23, Z+1	; 0x01
    14ea:	82 81       	ldd	r24, Z+2	; 0x02
    14ec:	93 81       	ldd	r25, Z+3	; 0x03
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e8       	ldi	r20, 0x80	; 128
    14f4:	5f e3       	ldi	r21, 0x3F	; 63
    14f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14fa:	88 23       	and	r24, r24
    14fc:	44 f4       	brge	.+16     	; 0x150e <main+0x98e>
		__ticks = 1;
    14fe:	fe 01       	movw	r30, r28
    1500:	e3 55       	subi	r30, 0x53	; 83
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	91 83       	std	Z+1, r25	; 0x01
    150a:	80 83       	st	Z, r24
    150c:	64 c0       	rjmp	.+200    	; 0x15d6 <main+0xa56>
	else if (__tmp > 65535)
    150e:	fe 01       	movw	r30, r28
    1510:	e1 55       	subi	r30, 0x51	; 81
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	60 81       	ld	r22, Z
    1516:	71 81       	ldd	r23, Z+1	; 0x01
    1518:	82 81       	ldd	r24, Z+2	; 0x02
    151a:	93 81       	ldd	r25, Z+3	; 0x03
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	3f ef       	ldi	r19, 0xFF	; 255
    1520:	4f e7       	ldi	r20, 0x7F	; 127
    1522:	57 e4       	ldi	r21, 0x47	; 71
    1524:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1528:	18 16       	cp	r1, r24
    152a:	0c f0       	brlt	.+2      	; 0x152e <main+0x9ae>
    152c:	43 c0       	rjmp	.+134    	; 0x15b4 <main+0xa34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152e:	fe 01       	movw	r30, r28
    1530:	ed 54       	subi	r30, 0x4D	; 77
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	60 81       	ld	r22, Z
    1536:	71 81       	ldd	r23, Z+1	; 0x01
    1538:	82 81       	ldd	r24, Z+2	; 0x02
    153a:	93 81       	ldd	r25, Z+3	; 0x03
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e2       	ldi	r20, 0x20	; 32
    1542:	51 e4       	ldi	r21, 0x41	; 65
    1544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	8e 01       	movw	r16, r28
    154e:	03 55       	subi	r16, 0x53	; 83
    1550:	1f 4f       	sbci	r17, 0xFF	; 255
    1552:	bc 01       	movw	r22, r24
    1554:	cd 01       	movw	r24, r26
    1556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	f8 01       	movw	r30, r16
    1560:	91 83       	std	Z+1, r25	; 0x01
    1562:	80 83       	st	Z, r24
    1564:	1f c0       	rjmp	.+62     	; 0x15a4 <main+0xa24>
    1566:	fe 01       	movw	r30, r28
    1568:	e5 55       	subi	r30, 0x55	; 85
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	88 ec       	ldi	r24, 0xC8	; 200
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	91 83       	std	Z+1, r25	; 0x01
    1572:	80 83       	st	Z, r24
    1574:	fe 01       	movw	r30, r28
    1576:	e5 55       	subi	r30, 0x55	; 85
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	80 81       	ld	r24, Z
    157c:	91 81       	ldd	r25, Z+1	; 0x01
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	f1 f7       	brne	.-4      	; 0x157e <main+0x9fe>
    1582:	fe 01       	movw	r30, r28
    1584:	e5 55       	subi	r30, 0x55	; 85
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	91 83       	std	Z+1, r25	; 0x01
    158a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158c:	de 01       	movw	r26, r28
    158e:	a3 55       	subi	r26, 0x53	; 83
    1590:	bf 4f       	sbci	r27, 0xFF	; 255
    1592:	fe 01       	movw	r30, r28
    1594:	e3 55       	subi	r30, 0x53	; 83
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	80 81       	ld	r24, Z
    159a:	91 81       	ldd	r25, Z+1	; 0x01
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	11 96       	adiw	r26, 0x01	; 1
    15a0:	9c 93       	st	X, r25
    15a2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a4:	fe 01       	movw	r30, r28
    15a6:	e3 55       	subi	r30, 0x53	; 83
    15a8:	ff 4f       	sbci	r31, 0xFF	; 255
    15aa:	80 81       	ld	r24, Z
    15ac:	91 81       	ldd	r25, Z+1	; 0x01
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	d1 f6       	brne	.-76     	; 0x1566 <main+0x9e6>
    15b2:	27 c0       	rjmp	.+78     	; 0x1602 <main+0xa82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b4:	8e 01       	movw	r16, r28
    15b6:	03 55       	subi	r16, 0x53	; 83
    15b8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ba:	fe 01       	movw	r30, r28
    15bc:	e1 55       	subi	r30, 0x51	; 81
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	60 81       	ld	r22, Z
    15c2:	71 81       	ldd	r23, Z+1	; 0x01
    15c4:	82 81       	ldd	r24, Z+2	; 0x02
    15c6:	93 81       	ldd	r25, Z+3	; 0x03
    15c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	f8 01       	movw	r30, r16
    15d2:	91 83       	std	Z+1, r25	; 0x01
    15d4:	80 83       	st	Z, r24
    15d6:	de 01       	movw	r26, r28
    15d8:	a7 55       	subi	r26, 0x57	; 87
    15da:	bf 4f       	sbci	r27, 0xFF	; 255
    15dc:	fe 01       	movw	r30, r28
    15de:	e3 55       	subi	r30, 0x53	; 83
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	8d 93       	st	X+, r24
    15e8:	9c 93       	st	X, r25
    15ea:	fe 01       	movw	r30, r28
    15ec:	e7 55       	subi	r30, 0x57	; 87
    15ee:	ff 4f       	sbci	r31, 0xFF	; 255
    15f0:	80 81       	ld	r24, Z
    15f2:	91 81       	ldd	r25, Z+1	; 0x01
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <main+0xa74>
    15f8:	fe 01       	movw	r30, r28
    15fa:	e7 55       	subi	r30, 0x57	; 87
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	91 83       	std	Z+1, r25	; 0x01
    1600:	80 83       	st	Z, r24
					_delay_ms(1000);
					LCD_clearScreen(); //clear screen after finished writing
    1602:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
					access_Times=1; //to get out of while loop and go to main options loop
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	80 93 96 01 	sts	0x0196, r24
					temp=1; //to get out of current loop
    160c:	fe 01       	movw	r30, r28
    160e:	ec 50       	subi	r30, 0x0C	; 12
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	80 83       	st	Z, r24
    1616:	90 c1       	rjmp	.+800    	; 0x1938 <main+0xdb8>
				}
				else if(key==Invalid_Pass){ //passwords are invalid notification
    1618:	fe 01       	movw	r30, r28
    161a:	ee 50       	subi	r30, 0x0E	; 14
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	80 81       	ld	r24, Z
    1620:	86 36       	cpi	r24, 0x66	; 102
    1622:	09 f0       	breq	.+2      	; 0x1626 <main+0xaa6>
    1624:	89 c1       	rjmp	.+786    	; 0x1938 <main+0xdb8>
					LCD_clearScreen();
    1626:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
					LCD_displayString("password entered");
    162a:	8a eb       	ldi	r24, 0xBA	; 186
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
					LCD_moveCursor(1,0);//user display on system status
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <LCD_moveCursor>
					LCD_displayString(" is incorrect ");
    163a:	8b ec       	ldi	r24, 0xCB	; 203
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
    1642:	fe 01       	movw	r30, r28
    1644:	eb 55       	subi	r30, 0x5B	; 91
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	aa e7       	ldi	r26, 0x7A	; 122
    164e:	b4 e4       	ldi	r27, 0x44	; 68
    1650:	80 83       	st	Z, r24
    1652:	91 83       	std	Z+1, r25	; 0x01
    1654:	a2 83       	std	Z+2, r26	; 0x02
    1656:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1658:	8e 01       	movw	r16, r28
    165a:	0f 55       	subi	r16, 0x5F	; 95
    165c:	1f 4f       	sbci	r17, 0xFF	; 255
    165e:	fe 01       	movw	r30, r28
    1660:	eb 55       	subi	r30, 0x5B	; 91
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	60 81       	ld	r22, Z
    1666:	71 81       	ldd	r23, Z+1	; 0x01
    1668:	82 81       	ldd	r24, Z+2	; 0x02
    166a:	93 81       	ldd	r25, Z+3	; 0x03
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	4a ef       	ldi	r20, 0xFA	; 250
    1672:	54 e4       	ldi	r21, 0x44	; 68
    1674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	f8 01       	movw	r30, r16
    167e:	80 83       	st	Z, r24
    1680:	91 83       	std	Z+1, r25	; 0x01
    1682:	a2 83       	std	Z+2, r26	; 0x02
    1684:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1686:	fe 01       	movw	r30, r28
    1688:	ef 55       	subi	r30, 0x5F	; 95
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	93 81       	ldd	r25, Z+3	; 0x03
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e8       	ldi	r20, 0x80	; 128
    169a:	5f e3       	ldi	r21, 0x3F	; 63
    169c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16a0:	88 23       	and	r24, r24
    16a2:	44 f4       	brge	.+16     	; 0x16b4 <main+0xb34>
		__ticks = 1;
    16a4:	fe 01       	movw	r30, r28
    16a6:	e1 56       	subi	r30, 0x61	; 97
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	91 83       	std	Z+1, r25	; 0x01
    16b0:	80 83       	st	Z, r24
    16b2:	64 c0       	rjmp	.+200    	; 0x177c <main+0xbfc>
	else if (__tmp > 65535)
    16b4:	fe 01       	movw	r30, r28
    16b6:	ef 55       	subi	r30, 0x5F	; 95
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	60 81       	ld	r22, Z
    16bc:	71 81       	ldd	r23, Z+1	; 0x01
    16be:	82 81       	ldd	r24, Z+2	; 0x02
    16c0:	93 81       	ldd	r25, Z+3	; 0x03
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	3f ef       	ldi	r19, 0xFF	; 255
    16c6:	4f e7       	ldi	r20, 0x7F	; 127
    16c8:	57 e4       	ldi	r21, 0x47	; 71
    16ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ce:	18 16       	cp	r1, r24
    16d0:	0c f0       	brlt	.+2      	; 0x16d4 <main+0xb54>
    16d2:	43 c0       	rjmp	.+134    	; 0x175a <main+0xbda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d4:	fe 01       	movw	r30, r28
    16d6:	eb 55       	subi	r30, 0x5B	; 91
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	60 81       	ld	r22, Z
    16dc:	71 81       	ldd	r23, Z+1	; 0x01
    16de:	82 81       	ldd	r24, Z+2	; 0x02
    16e0:	93 81       	ldd	r25, Z+3	; 0x03
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e2       	ldi	r20, 0x20	; 32
    16e8:	51 e4       	ldi	r21, 0x41	; 65
    16ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	8e 01       	movw	r16, r28
    16f4:	01 56       	subi	r16, 0x61	; 97
    16f6:	1f 4f       	sbci	r17, 0xFF	; 255
    16f8:	bc 01       	movw	r22, r24
    16fa:	cd 01       	movw	r24, r26
    16fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	f8 01       	movw	r30, r16
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	80 83       	st	Z, r24
    170a:	1f c0       	rjmp	.+62     	; 0x174a <main+0xbca>
    170c:	fe 01       	movw	r30, r28
    170e:	e3 56       	subi	r30, 0x63	; 99
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	88 ec       	ldi	r24, 0xC8	; 200
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	91 83       	std	Z+1, r25	; 0x01
    1718:	80 83       	st	Z, r24
    171a:	fe 01       	movw	r30, r28
    171c:	e3 56       	subi	r30, 0x63	; 99
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	80 81       	ld	r24, Z
    1722:	91 81       	ldd	r25, Z+1	; 0x01
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <main+0xba4>
    1728:	fe 01       	movw	r30, r28
    172a:	e3 56       	subi	r30, 0x63	; 99
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	91 83       	std	Z+1, r25	; 0x01
    1730:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1732:	de 01       	movw	r26, r28
    1734:	a1 56       	subi	r26, 0x61	; 97
    1736:	bf 4f       	sbci	r27, 0xFF	; 255
    1738:	fe 01       	movw	r30, r28
    173a:	e1 56       	subi	r30, 0x61	; 97
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	80 81       	ld	r24, Z
    1740:	91 81       	ldd	r25, Z+1	; 0x01
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	11 96       	adiw	r26, 0x01	; 1
    1746:	9c 93       	st	X, r25
    1748:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174a:	fe 01       	movw	r30, r28
    174c:	e1 56       	subi	r30, 0x61	; 97
    174e:	ff 4f       	sbci	r31, 0xFF	; 255
    1750:	80 81       	ld	r24, Z
    1752:	91 81       	ldd	r25, Z+1	; 0x01
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	d1 f6       	brne	.-76     	; 0x170c <main+0xb8c>
    1758:	27 c0       	rjmp	.+78     	; 0x17a8 <main+0xc28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175a:	8e 01       	movw	r16, r28
    175c:	01 56       	subi	r16, 0x61	; 97
    175e:	1f 4f       	sbci	r17, 0xFF	; 255
    1760:	fe 01       	movw	r30, r28
    1762:	ef 55       	subi	r30, 0x5F	; 95
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	60 81       	ld	r22, Z
    1768:	71 81       	ldd	r23, Z+1	; 0x01
    176a:	82 81       	ldd	r24, Z+2	; 0x02
    176c:	93 81       	ldd	r25, Z+3	; 0x03
    176e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	f8 01       	movw	r30, r16
    1778:	91 83       	std	Z+1, r25	; 0x01
    177a:	80 83       	st	Z, r24
    177c:	de 01       	movw	r26, r28
    177e:	a5 56       	subi	r26, 0x65	; 101
    1780:	bf 4f       	sbci	r27, 0xFF	; 255
    1782:	fe 01       	movw	r30, r28
    1784:	e1 56       	subi	r30, 0x61	; 97
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	80 81       	ld	r24, Z
    178a:	91 81       	ldd	r25, Z+1	; 0x01
    178c:	8d 93       	st	X+, r24
    178e:	9c 93       	st	X, r25
    1790:	fe 01       	movw	r30, r28
    1792:	e5 56       	subi	r30, 0x65	; 101
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	80 81       	ld	r24, Z
    1798:	91 81       	ldd	r25, Z+1	; 0x01
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	f1 f7       	brne	.-4      	; 0x179a <main+0xc1a>
    179e:	fe 01       	movw	r30, r28
    17a0:	e5 56       	subi	r30, 0x65	; 101
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	91 83       	std	Z+1, r25	; 0x01
    17a6:	80 83       	st	Z, r24
					_delay_ms(1000); //to give time for user to read system status
					LCD_clearScreen();
    17a8:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
					LCD_displayString("please enter the");
    17ac:	8a ed       	ldi	r24, 0xDA	; 218
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
					LCD_moveCursor(1,0);//user display on system status
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <LCD_moveCursor>
					LCD_displayString("passwords again ");
    17bc:	8b ee       	ldi	r24, 0xEB	; 235
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
    17c4:	fe 01       	movw	r30, r28
    17c6:	e9 56       	subi	r30, 0x69	; 105
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	aa e7       	ldi	r26, 0x7A	; 122
    17d0:	b4 e4       	ldi	r27, 0x44	; 68
    17d2:	80 83       	st	Z, r24
    17d4:	91 83       	std	Z+1, r25	; 0x01
    17d6:	a2 83       	std	Z+2, r26	; 0x02
    17d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17da:	8e 01       	movw	r16, r28
    17dc:	0d 56       	subi	r16, 0x6D	; 109
    17de:	1f 4f       	sbci	r17, 0xFF	; 255
    17e0:	fe 01       	movw	r30, r28
    17e2:	e9 56       	subi	r30, 0x69	; 105
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	60 81       	ld	r22, Z
    17e8:	71 81       	ldd	r23, Z+1	; 0x01
    17ea:	82 81       	ldd	r24, Z+2	; 0x02
    17ec:	93 81       	ldd	r25, Z+3	; 0x03
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	4a ef       	ldi	r20, 0xFA	; 250
    17f4:	54 e4       	ldi	r21, 0x44	; 68
    17f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	f8 01       	movw	r30, r16
    1800:	80 83       	st	Z, r24
    1802:	91 83       	std	Z+1, r25	; 0x01
    1804:	a2 83       	std	Z+2, r26	; 0x02
    1806:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1808:	fe 01       	movw	r30, r28
    180a:	ed 56       	subi	r30, 0x6D	; 109
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	60 81       	ld	r22, Z
    1810:	71 81       	ldd	r23, Z+1	; 0x01
    1812:	82 81       	ldd	r24, Z+2	; 0x02
    1814:	93 81       	ldd	r25, Z+3	; 0x03
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e8       	ldi	r20, 0x80	; 128
    181c:	5f e3       	ldi	r21, 0x3F	; 63
    181e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1822:	88 23       	and	r24, r24
    1824:	44 f4       	brge	.+16     	; 0x1836 <main+0xcb6>
		__ticks = 1;
    1826:	fe 01       	movw	r30, r28
    1828:	ef 56       	subi	r30, 0x6F	; 111
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	91 83       	std	Z+1, r25	; 0x01
    1832:	80 83       	st	Z, r24
    1834:	64 c0       	rjmp	.+200    	; 0x18fe <main+0xd7e>
	else if (__tmp > 65535)
    1836:	fe 01       	movw	r30, r28
    1838:	ed 56       	subi	r30, 0x6D	; 109
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	60 81       	ld	r22, Z
    183e:	71 81       	ldd	r23, Z+1	; 0x01
    1840:	82 81       	ldd	r24, Z+2	; 0x02
    1842:	93 81       	ldd	r25, Z+3	; 0x03
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	3f ef       	ldi	r19, 0xFF	; 255
    1848:	4f e7       	ldi	r20, 0x7F	; 127
    184a:	57 e4       	ldi	r21, 0x47	; 71
    184c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1850:	18 16       	cp	r1, r24
    1852:	0c f0       	brlt	.+2      	; 0x1856 <main+0xcd6>
    1854:	43 c0       	rjmp	.+134    	; 0x18dc <main+0xd5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1856:	fe 01       	movw	r30, r28
    1858:	e9 56       	subi	r30, 0x69	; 105
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	60 81       	ld	r22, Z
    185e:	71 81       	ldd	r23, Z+1	; 0x01
    1860:	82 81       	ldd	r24, Z+2	; 0x02
    1862:	93 81       	ldd	r25, Z+3	; 0x03
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e2       	ldi	r20, 0x20	; 32
    186a:	51 e4       	ldi	r21, 0x41	; 65
    186c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	8e 01       	movw	r16, r28
    1876:	0f 56       	subi	r16, 0x6F	; 111
    1878:	1f 4f       	sbci	r17, 0xFF	; 255
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	f8 01       	movw	r30, r16
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	80 83       	st	Z, r24
    188c:	1f c0       	rjmp	.+62     	; 0x18cc <main+0xd4c>
    188e:	fe 01       	movw	r30, r28
    1890:	e1 57       	subi	r30, 0x71	; 113
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	88 ec       	ldi	r24, 0xC8	; 200
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	91 83       	std	Z+1, r25	; 0x01
    189a:	80 83       	st	Z, r24
    189c:	fe 01       	movw	r30, r28
    189e:	e1 57       	subi	r30, 0x71	; 113
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	80 81       	ld	r24, Z
    18a4:	91 81       	ldd	r25, Z+1	; 0x01
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <main+0xd26>
    18aa:	fe 01       	movw	r30, r28
    18ac:	e1 57       	subi	r30, 0x71	; 113
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b4:	de 01       	movw	r26, r28
    18b6:	af 56       	subi	r26, 0x6F	; 111
    18b8:	bf 4f       	sbci	r27, 0xFF	; 255
    18ba:	fe 01       	movw	r30, r28
    18bc:	ef 56       	subi	r30, 0x6F	; 111
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	80 81       	ld	r24, Z
    18c2:	91 81       	ldd	r25, Z+1	; 0x01
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	11 96       	adiw	r26, 0x01	; 1
    18c8:	9c 93       	st	X, r25
    18ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18cc:	fe 01       	movw	r30, r28
    18ce:	ef 56       	subi	r30, 0x6F	; 111
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	80 81       	ld	r24, Z
    18d4:	91 81       	ldd	r25, Z+1	; 0x01
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	d1 f6       	brne	.-76     	; 0x188e <main+0xd0e>
    18da:	27 c0       	rjmp	.+78     	; 0x192a <main+0xdaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18dc:	8e 01       	movw	r16, r28
    18de:	0f 56       	subi	r16, 0x6F	; 111
    18e0:	1f 4f       	sbci	r17, 0xFF	; 255
    18e2:	fe 01       	movw	r30, r28
    18e4:	ed 56       	subi	r30, 0x6D	; 109
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	60 81       	ld	r22, Z
    18ea:	71 81       	ldd	r23, Z+1	; 0x01
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	93 81       	ldd	r25, Z+3	; 0x03
    18f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	f8 01       	movw	r30, r16
    18fa:	91 83       	std	Z+1, r25	; 0x01
    18fc:	80 83       	st	Z, r24
    18fe:	de 01       	movw	r26, r28
    1900:	a3 57       	subi	r26, 0x73	; 115
    1902:	bf 4f       	sbci	r27, 0xFF	; 255
    1904:	fe 01       	movw	r30, r28
    1906:	ef 56       	subi	r30, 0x6F	; 111
    1908:	ff 4f       	sbci	r31, 0xFF	; 255
    190a:	80 81       	ld	r24, Z
    190c:	91 81       	ldd	r25, Z+1	; 0x01
    190e:	8d 93       	st	X+, r24
    1910:	9c 93       	st	X, r25
    1912:	fe 01       	movw	r30, r28
    1914:	e3 57       	subi	r30, 0x73	; 115
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	80 81       	ld	r24, Z
    191a:	91 81       	ldd	r25, Z+1	; 0x01
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	f1 f7       	brne	.-4      	; 0x191c <main+0xd9c>
    1920:	fe 01       	movw	r30, r28
    1922:	e3 57       	subi	r30, 0x73	; 115
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	91 83       	std	Z+1, r25	; 0x01
    1928:	80 83       	st	Z, r24
					_delay_ms(1000);//to give time for user to read system status
					LCD_clearScreen();
    192a:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
					temp=1; // to exit loop
    192e:	fe 01       	movw	r30, r28
    1930:	ec 50       	subi	r30, 0x0C	; 12
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	80 83       	st	Z, r24
			UART_sendString(send_Pass);//send first string to control MC
			while(UART_recieveByte()!=Confirm_Msg); //wait until confirmation notification
			UART_sendString(confirm_Pass); //send second string to control MC
			key=0;
			temp=0;
			while(temp==0){
    1938:	fe 01       	movw	r30, r28
    193a:	ec 50       	subi	r30, 0x0C	; 12
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	80 81       	ld	r24, Z
    1940:	88 23       	and	r24, r24
    1942:	09 f4       	brne	.+2      	; 0x1946 <main+0xdc6>
    1944:	8c cd       	rjmp	.-1256   	; 0x145e <main+0x8de>
	LCD_init();/* Initialize the LCD module */
	while(UART_recieveByte()!=MC2_ready); //wait until MC2 is ready to start process

	while(1){

		while(access_Times==0){ //while first use for application or change password case
    1946:	80 91 96 01 	lds	r24, 0x0196
    194a:	88 23       	and	r24, r24
    194c:	09 f4       	brne	.+2      	; 0x1950 <main+0xdd0>
    194e:	e7 c9       	rjmp	.-3122   	; 0xd1e <main+0x19e>
    1950:	0c 94 b1 14 	jmp	0x2962	; 0x2962 <main+0x1de2>
				}
			}

		}
		while(access_Times==1){ //as system has a saved password we exit first loop
			uint8 key=0;
    1954:	fe 01       	movw	r30, r28
    1956:	ef 50       	subi	r30, 0x0F	; 15
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	10 82       	st	Z, r1
			uint8 temp=0;
    195c:	fe 01       	movw	r30, r28
    195e:	e0 51       	subi	r30, 0x10	; 16
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	10 82       	st	Z, r1
			uint8 send_Pass[7]; //string used to take user input password and send it to MC2 to compare with saved password
			LCD_clearScreen();
    1964:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
			LCD_displayString(" + : Open door ");
    1968:	8c ef       	ldi	r24, 0xFC	; 252
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
			LCD_moveCursor(1,0);//user display on system options to choose from
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	60 e0       	ldi	r22, 0x00	; 0
    1974:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <LCD_moveCursor>
			LCD_displayString(" - : Change pass");
    1978:	8c e0       	ldi	r24, 0x0C	; 12
    197a:	91 e0       	ldi	r25, 0x01	; 1
    197c:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
			while(KEYPAD_getPressedKey()==KEYPAD_BUTTON_RELEASED);//wait while user pushes on keypad
    1980:	0e 94 f7 17 	call	0x2fee	; 0x2fee <KEYPAD_getPressedKey>
    1984:	81 30       	cpi	r24, 0x01	; 1
    1986:	e1 f3       	breq	.-8      	; 0x1980 <main+0xe00>
			key=KEYPAD_getPressedKey();
    1988:	0e 94 f7 17 	call	0x2fee	; 0x2fee <KEYPAD_getPressedKey>
    198c:	fe 01       	movw	r30, r28
    198e:	ef 50       	subi	r30, 0x0F	; 15
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	80 83       	st	Z, r24
			LCD_clearScreen();
    1994:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
			LCD_displayString("    loading");
    1998:	82 e7       	ldi	r24, 0x72	; 114
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
    19a0:	fe 01       	movw	r30, r28
    19a2:	e7 57       	subi	r30, 0x77	; 119
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	aa ef       	ldi	r26, 0xFA	; 250
    19ac:	b3 e4       	ldi	r27, 0x43	; 67
    19ae:	80 83       	st	Z, r24
    19b0:	91 83       	std	Z+1, r25	; 0x01
    19b2:	a2 83       	std	Z+2, r26	; 0x02
    19b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b6:	8e 01       	movw	r16, r28
    19b8:	0b 57       	subi	r16, 0x7B	; 123
    19ba:	1f 4f       	sbci	r17, 0xFF	; 255
    19bc:	fe 01       	movw	r30, r28
    19be:	e7 57       	subi	r30, 0x77	; 119
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	60 81       	ld	r22, Z
    19c4:	71 81       	ldd	r23, Z+1	; 0x01
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	4a ef       	ldi	r20, 0xFA	; 250
    19d0:	54 e4       	ldi	r21, 0x44	; 68
    19d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	f8 01       	movw	r30, r16
    19dc:	80 83       	st	Z, r24
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	a2 83       	std	Z+2, r26	; 0x02
    19e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19e4:	fe 01       	movw	r30, r28
    19e6:	eb 57       	subi	r30, 0x7B	; 123
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	60 81       	ld	r22, Z
    19ec:	71 81       	ldd	r23, Z+1	; 0x01
    19ee:	82 81       	ldd	r24, Z+2	; 0x02
    19f0:	93 81       	ldd	r25, Z+3	; 0x03
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e8       	ldi	r20, 0x80	; 128
    19f8:	5f e3       	ldi	r21, 0x3F	; 63
    19fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19fe:	88 23       	and	r24, r24
    1a00:	44 f4       	brge	.+16     	; 0x1a12 <main+0xe92>
		__ticks = 1;
    1a02:	fe 01       	movw	r30, r28
    1a04:	ed 57       	subi	r30, 0x7D	; 125
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	80 83       	st	Z, r24
    1a10:	64 c0       	rjmp	.+200    	; 0x1ada <main+0xf5a>
	else if (__tmp > 65535)
    1a12:	fe 01       	movw	r30, r28
    1a14:	eb 57       	subi	r30, 0x7B	; 123
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	3f ef       	ldi	r19, 0xFF	; 255
    1a24:	4f e7       	ldi	r20, 0x7F	; 127
    1a26:	57 e4       	ldi	r21, 0x47	; 71
    1a28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a2c:	18 16       	cp	r1, r24
    1a2e:	0c f0       	brlt	.+2      	; 0x1a32 <main+0xeb2>
    1a30:	43 c0       	rjmp	.+134    	; 0x1ab8 <main+0xf38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a32:	fe 01       	movw	r30, r28
    1a34:	e7 57       	subi	r30, 0x77	; 119
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	60 81       	ld	r22, Z
    1a3a:	71 81       	ldd	r23, Z+1	; 0x01
    1a3c:	82 81       	ldd	r24, Z+2	; 0x02
    1a3e:	93 81       	ldd	r25, Z+3	; 0x03
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e2       	ldi	r20, 0x20	; 32
    1a46:	51 e4       	ldi	r21, 0x41	; 65
    1a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	8e 01       	movw	r16, r28
    1a52:	0d 57       	subi	r16, 0x7D	; 125
    1a54:	1f 4f       	sbci	r17, 0xFF	; 255
    1a56:	bc 01       	movw	r22, r24
    1a58:	cd 01       	movw	r24, r26
    1a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	f8 01       	movw	r30, r16
    1a64:	91 83       	std	Z+1, r25	; 0x01
    1a66:	80 83       	st	Z, r24
    1a68:	1f c0       	rjmp	.+62     	; 0x1aa8 <main+0xf28>
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	ef 57       	subi	r30, 0x7F	; 127
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	88 ec       	ldi	r24, 0xC8	; 200
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	91 83       	std	Z+1, r25	; 0x01
    1a76:	80 83       	st	Z, r24
    1a78:	fe 01       	movw	r30, r28
    1a7a:	ef 57       	subi	r30, 0x7F	; 127
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	80 81       	ld	r24, Z
    1a80:	91 81       	ldd	r25, Z+1	; 0x01
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	f1 f7       	brne	.-4      	; 0x1a82 <main+0xf02>
    1a86:	fe 01       	movw	r30, r28
    1a88:	ef 57       	subi	r30, 0x7F	; 127
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	91 83       	std	Z+1, r25	; 0x01
    1a8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a90:	de 01       	movw	r26, r28
    1a92:	ad 57       	subi	r26, 0x7D	; 125
    1a94:	bf 4f       	sbci	r27, 0xFF	; 255
    1a96:	fe 01       	movw	r30, r28
    1a98:	ed 57       	subi	r30, 0x7D	; 125
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	80 81       	ld	r24, Z
    1a9e:	91 81       	ldd	r25, Z+1	; 0x01
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	11 96       	adiw	r26, 0x01	; 1
    1aa4:	9c 93       	st	X, r25
    1aa6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	ed 57       	subi	r30, 0x7D	; 125
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	80 81       	ld	r24, Z
    1ab0:	91 81       	ldd	r25, Z+1	; 0x01
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	d1 f6       	brne	.-76     	; 0x1a6a <main+0xeea>
    1ab6:	27 c0       	rjmp	.+78     	; 0x1b06 <main+0xf86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab8:	8e 01       	movw	r16, r28
    1aba:	0d 57       	subi	r16, 0x7D	; 125
    1abc:	1f 4f       	sbci	r17, 0xFF	; 255
    1abe:	fe 01       	movw	r30, r28
    1ac0:	eb 57       	subi	r30, 0x7B	; 123
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	60 81       	ld	r22, Z
    1ac6:	71 81       	ldd	r23, Z+1	; 0x01
    1ac8:	82 81       	ldd	r24, Z+2	; 0x02
    1aca:	93 81       	ldd	r25, Z+3	; 0x03
    1acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	f8 01       	movw	r30, r16
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	80 83       	st	Z, r24
    1ada:	de 01       	movw	r26, r28
    1adc:	a1 58       	subi	r26, 0x81	; 129
    1ade:	bf 4f       	sbci	r27, 0xFF	; 255
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	ed 57       	subi	r30, 0x7D	; 125
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	80 81       	ld	r24, Z
    1ae8:	91 81       	ldd	r25, Z+1	; 0x01
    1aea:	8d 93       	st	X+, r24
    1aec:	9c 93       	st	X, r25
    1aee:	fe 01       	movw	r30, r28
    1af0:	e1 58       	subi	r30, 0x81	; 129
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	80 81       	ld	r24, Z
    1af6:	91 81       	ldd	r25, Z+1	; 0x01
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <main+0xf78>
    1afc:	fe 01       	movw	r30, r28
    1afe:	e1 58       	subi	r30, 0x81	; 129
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	91 83       	std	Z+1, r25	; 0x01
    1b04:	80 83       	st	Z, r24
			_delay_ms(500);//to make sure there is no re-bouncing
			LCD_clearScreen();
    1b06:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
			switch(key){
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	ef 50       	subi	r30, 0x0F	; 15
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	80 81       	ld	r24, Z
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	c7 5f       	subi	r28, 0xF7	; 247
    1b18:	de 4f       	sbci	r29, 0xFE	; 254
    1b1a:	39 83       	std	Y+1, r19	; 0x01
    1b1c:	28 83       	st	Y, r18
    1b1e:	c9 50       	subi	r28, 0x09	; 9
    1b20:	d1 40       	sbci	r29, 0x01	; 1
    1b22:	c7 5f       	subi	r28, 0xF7	; 247
    1b24:	de 4f       	sbci	r29, 0xFE	; 254
    1b26:	88 81       	ld	r24, Y
    1b28:	99 81       	ldd	r25, Y+1	; 0x01
    1b2a:	c9 50       	subi	r28, 0x09	; 9
    1b2c:	d1 40       	sbci	r29, 0x01	; 1
    1b2e:	8b 32       	cpi	r24, 0x2B	; 43
    1b30:	91 05       	cpc	r25, r1
    1b32:	59 f0       	breq	.+22     	; 0x1b4a <main+0xfca>
    1b34:	c7 5f       	subi	r28, 0xF7	; 247
    1b36:	de 4f       	sbci	r29, 0xFE	; 254
    1b38:	e8 81       	ld	r30, Y
    1b3a:	f9 81       	ldd	r31, Y+1	; 0x01
    1b3c:	c9 50       	subi	r28, 0x09	; 9
    1b3e:	d1 40       	sbci	r29, 0x01	; 1
    1b40:	ed 32       	cpi	r30, 0x2D	; 45
    1b42:	f1 05       	cpc	r31, r1
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <main+0xfc8>
    1b46:	cd c3       	rjmp	.+1946   	; 0x22e2 <main+0x1762>
    1b48:	0c c7       	rjmp	.+3608   	; 0x2962 <main+0x1de2>
			 * if not user is given another chance unless for 3 consecutive times user enters wrong password
			 * system will go in alert mode for 1 min buzzer will turn on and no inputs will be taken
			 *
			 */
			case'+':
				UART_sendByte(Open_Door_Protocol); //get MC2 to work on open door process
    1b4a:	89 e6       	ldi	r24, 0x69	; 105
    1b4c:	0e 94 03 20 	call	0x4006	; 0x4006 <UART_sendByte>
				LCD_displayString("plz enter pass:");
    1b50:	80 e6       	ldi	r24, 0x60	; 96
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
				LCD_moveCursor(1,0);
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	60 e0       	ldi	r22, 0x00	; 0
    1b5c:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <LCD_moveCursor>
				uint8 i=0;
    1b60:	fe 01       	movw	r30, r28
    1b62:	e1 51       	subi	r30, 0x11	; 17
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	10 82       	st	Z, r1
				for(i=0;i<5;i++){
    1b68:	fe 01       	movw	r30, r28
    1b6a:	e1 51       	subi	r30, 0x11	; 17
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	10 82       	st	Z, r1
    1b70:	e1 c0       	rjmp	.+450    	; 0x1d34 <main+0x11b4>
					if((KEYPAD_getPressedKey()>=0)&&(KEYPAD_getPressedKey()<=9)){// to make sure user pushes a number
    1b72:	0e 94 f7 17 	call	0x2fee	; 0x2fee <KEYPAD_getPressedKey>
    1b76:	0e 94 f7 17 	call	0x2fee	; 0x2fee <KEYPAD_getPressedKey>
    1b7a:	8a 30       	cpi	r24, 0x0A	; 10
    1b7c:	08 f0       	brcs	.+2      	; 0x1b80 <main+0x1000>
    1b7e:	c8 c0       	rjmp	.+400    	; 0x1d10 <main+0x1190>
						send_Pass[i]=KEYPAD_getPressedKey(); //take varibles from keypadinside the string
    1b80:	fe 01       	movw	r30, r28
    1b82:	e1 51       	subi	r30, 0x11	; 17
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	80 81       	ld	r24, Z
    1b88:	08 2f       	mov	r16, r24
    1b8a:	10 e0       	ldi	r17, 0x00	; 0
    1b8c:	0e 94 f7 17 	call	0x2fee	; 0x2fee <KEYPAD_getPressedKey>
    1b90:	28 2f       	mov	r18, r24
    1b92:	ce 01       	movw	r24, r28
    1b94:	8e 5f       	subi	r24, 0xFE	; 254
    1b96:	9e 4f       	sbci	r25, 0xFE	; 254
    1b98:	fc 01       	movw	r30, r24
    1b9a:	e0 0f       	add	r30, r16
    1b9c:	f1 1f       	adc	r31, r17
    1b9e:	20 83       	st	Z, r18
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	e5 58       	subi	r30, 0x85	; 133
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	aa ef       	ldi	r26, 0xFA	; 250
    1bac:	b3 e4       	ldi	r27, 0x43	; 67
    1bae:	80 83       	st	Z, r24
    1bb0:	91 83       	std	Z+1, r25	; 0x01
    1bb2:	a2 83       	std	Z+2, r26	; 0x02
    1bb4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb6:	8e 01       	movw	r16, r28
    1bb8:	09 58       	subi	r16, 0x89	; 137
    1bba:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e5 58       	subi	r30, 0x85	; 133
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	60 81       	ld	r22, Z
    1bc4:	71 81       	ldd	r23, Z+1	; 0x01
    1bc6:	82 81       	ldd	r24, Z+2	; 0x02
    1bc8:	93 81       	ldd	r25, Z+3	; 0x03
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	4a ef       	ldi	r20, 0xFA	; 250
    1bd0:	54 e4       	ldi	r21, 0x44	; 68
    1bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	f8 01       	movw	r30, r16
    1bdc:	80 83       	st	Z, r24
    1bde:	91 83       	std	Z+1, r25	; 0x01
    1be0:	a2 83       	std	Z+2, r26	; 0x02
    1be2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1be4:	fe 01       	movw	r30, r28
    1be6:	e9 58       	subi	r30, 0x89	; 137
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	60 81       	ld	r22, Z
    1bec:	71 81       	ldd	r23, Z+1	; 0x01
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	93 81       	ldd	r25, Z+3	; 0x03
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e8       	ldi	r20, 0x80	; 128
    1bf8:	5f e3       	ldi	r21, 0x3F	; 63
    1bfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bfe:	88 23       	and	r24, r24
    1c00:	44 f4       	brge	.+16     	; 0x1c12 <main+0x1092>
		__ticks = 1;
    1c02:	fe 01       	movw	r30, r28
    1c04:	eb 58       	subi	r30, 0x8B	; 139
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	80 83       	st	Z, r24
    1c10:	64 c0       	rjmp	.+200    	; 0x1cda <main+0x115a>
	else if (__tmp > 65535)
    1c12:	fe 01       	movw	r30, r28
    1c14:	e9 58       	subi	r30, 0x89	; 137
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	60 81       	ld	r22, Z
    1c1a:	71 81       	ldd	r23, Z+1	; 0x01
    1c1c:	82 81       	ldd	r24, Z+2	; 0x02
    1c1e:	93 81       	ldd	r25, Z+3	; 0x03
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	3f ef       	ldi	r19, 0xFF	; 255
    1c24:	4f e7       	ldi	r20, 0x7F	; 127
    1c26:	57 e4       	ldi	r21, 0x47	; 71
    1c28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c2c:	18 16       	cp	r1, r24
    1c2e:	0c f0       	brlt	.+2      	; 0x1c32 <main+0x10b2>
    1c30:	43 c0       	rjmp	.+134    	; 0x1cb8 <main+0x1138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c32:	fe 01       	movw	r30, r28
    1c34:	e5 58       	subi	r30, 0x85	; 133
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	60 81       	ld	r22, Z
    1c3a:	71 81       	ldd	r23, Z+1	; 0x01
    1c3c:	82 81       	ldd	r24, Z+2	; 0x02
    1c3e:	93 81       	ldd	r25, Z+3	; 0x03
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e2       	ldi	r20, 0x20	; 32
    1c46:	51 e4       	ldi	r21, 0x41	; 65
    1c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	8e 01       	movw	r16, r28
    1c52:	0b 58       	subi	r16, 0x8B	; 139
    1c54:	1f 4f       	sbci	r17, 0xFF	; 255
    1c56:	bc 01       	movw	r22, r24
    1c58:	cd 01       	movw	r24, r26
    1c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	f8 01       	movw	r30, r16
    1c64:	91 83       	std	Z+1, r25	; 0x01
    1c66:	80 83       	st	Z, r24
    1c68:	1f c0       	rjmp	.+62     	; 0x1ca8 <main+0x1128>
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	ed 58       	subi	r30, 0x8D	; 141
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	88 ec       	ldi	r24, 0xC8	; 200
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	80 83       	st	Z, r24
    1c78:	fe 01       	movw	r30, r28
    1c7a:	ed 58       	subi	r30, 0x8D	; 141
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	80 81       	ld	r24, Z
    1c80:	91 81       	ldd	r25, Z+1	; 0x01
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <main+0x1102>
    1c86:	fe 01       	movw	r30, r28
    1c88:	ed 58       	subi	r30, 0x8D	; 141
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	91 83       	std	Z+1, r25	; 0x01
    1c8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c90:	de 01       	movw	r26, r28
    1c92:	ab 58       	subi	r26, 0x8B	; 139
    1c94:	bf 4f       	sbci	r27, 0xFF	; 255
    1c96:	fe 01       	movw	r30, r28
    1c98:	eb 58       	subi	r30, 0x8B	; 139
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	80 81       	ld	r24, Z
    1c9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	11 96       	adiw	r26, 0x01	; 1
    1ca4:	9c 93       	st	X, r25
    1ca6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca8:	fe 01       	movw	r30, r28
    1caa:	eb 58       	subi	r30, 0x8B	; 139
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	80 81       	ld	r24, Z
    1cb0:	91 81       	ldd	r25, Z+1	; 0x01
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	d1 f6       	brne	.-76     	; 0x1c6a <main+0x10ea>
    1cb6:	27 c0       	rjmp	.+78     	; 0x1d06 <main+0x1186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb8:	8e 01       	movw	r16, r28
    1cba:	0b 58       	subi	r16, 0x8B	; 139
    1cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e9 58       	subi	r30, 0x89	; 137
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	60 81       	ld	r22, Z
    1cc6:	71 81       	ldd	r23, Z+1	; 0x01
    1cc8:	82 81       	ldd	r24, Z+2	; 0x02
    1cca:	93 81       	ldd	r25, Z+3	; 0x03
    1ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	f8 01       	movw	r30, r16
    1cd6:	91 83       	std	Z+1, r25	; 0x01
    1cd8:	80 83       	st	Z, r24
    1cda:	de 01       	movw	r26, r28
    1cdc:	af 58       	subi	r26, 0x8F	; 143
    1cde:	bf 4f       	sbci	r27, 0xFF	; 255
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	eb 58       	subi	r30, 0x8B	; 139
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	80 81       	ld	r24, Z
    1ce8:	91 81       	ldd	r25, Z+1	; 0x01
    1cea:	8d 93       	st	X+, r24
    1cec:	9c 93       	st	X, r25
    1cee:	fe 01       	movw	r30, r28
    1cf0:	ef 58       	subi	r30, 0x8F	; 143
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	80 81       	ld	r24, Z
    1cf6:	91 81       	ldd	r25, Z+1	; 0x01
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <main+0x1178>
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	ef 58       	subi	r30, 0x8F	; 143
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
						_delay_ms(500);//to make sure there is no re-bouncing
						LCD_displayString("*");
    1d06:	80 e7       	ldi	r24, 0x70	; 112
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
    1d0e:	09 c0       	rjmp	.+18     	; 0x1d22 <main+0x11a2>
					}
					else{
						i--;
    1d10:	de 01       	movw	r26, r28
    1d12:	a1 51       	subi	r26, 0x11	; 17
    1d14:	bf 4f       	sbci	r27, 0xFF	; 255
    1d16:	fe 01       	movw	r30, r28
    1d18:	e1 51       	subi	r30, 0x11	; 17
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	80 81       	ld	r24, Z
    1d1e:	81 50       	subi	r24, 0x01	; 1
    1d20:	8c 93       	st	X, r24
			case'+':
				UART_sendByte(Open_Door_Protocol); //get MC2 to work on open door process
				LCD_displayString("plz enter pass:");
				LCD_moveCursor(1,0);
				uint8 i=0;
				for(i=0;i<5;i++){
    1d22:	de 01       	movw	r26, r28
    1d24:	a1 51       	subi	r26, 0x11	; 17
    1d26:	bf 4f       	sbci	r27, 0xFF	; 255
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e1 51       	subi	r30, 0x11	; 17
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 81       	ld	r24, Z
    1d30:	8f 5f       	subi	r24, 0xFF	; 255
    1d32:	8c 93       	st	X, r24
    1d34:	fe 01       	movw	r30, r28
    1d36:	e1 51       	subi	r30, 0x11	; 17
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 81       	ld	r24, Z
    1d3c:	85 30       	cpi	r24, 0x05	; 5
    1d3e:	08 f4       	brcc	.+2      	; 0x1d42 <main+0x11c2>
    1d40:	18 cf       	rjmp	.-464    	; 0x1b72 <main+0xff2>
					}
					else{
						i--;
					}
				}
				while(KEYPAD_getPressedKey()!='='); // to submit user answer
    1d42:	0e 94 f7 17 	call	0x2fee	; 0x2fee <KEYPAD_getPressedKey>
    1d46:	8d 33       	cpi	r24, 0x3D	; 61
    1d48:	e1 f7       	brne	.-8      	; 0x1d42 <main+0x11c2>
				send_Pass[i]='#';// character chosen to be the last in any Uart send string
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e1 51       	subi	r30, 0x11	; 17
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	ce 01       	movw	r24, r28
    1d58:	8e 5f       	subi	r24, 0xFE	; 254
    1d5a:	9e 4f       	sbci	r25, 0xFE	; 254
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	e2 0f       	add	r30, r18
    1d60:	f3 1f       	adc	r31, r19
    1d62:	83 e2       	ldi	r24, 0x23	; 35
    1d64:	80 83       	st	Z, r24
				LCD_clearScreen();
    1d66:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
				LCD_displayString("    loading");
    1d6a:	82 e7       	ldi	r24, 0x72	; 114
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
    1d72:	fe 01       	movw	r30, r28
    1d74:	e3 59       	subi	r30, 0x93	; 147
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	aa ef       	ldi	r26, 0xFA	; 250
    1d7e:	b3 e4       	ldi	r27, 0x43	; 67
    1d80:	80 83       	st	Z, r24
    1d82:	91 83       	std	Z+1, r25	; 0x01
    1d84:	a2 83       	std	Z+2, r26	; 0x02
    1d86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d88:	8e 01       	movw	r16, r28
    1d8a:	07 59       	subi	r16, 0x97	; 151
    1d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8e:	fe 01       	movw	r30, r28
    1d90:	e3 59       	subi	r30, 0x93	; 147
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	60 81       	ld	r22, Z
    1d96:	71 81       	ldd	r23, Z+1	; 0x01
    1d98:	82 81       	ldd	r24, Z+2	; 0x02
    1d9a:	93 81       	ldd	r25, Z+3	; 0x03
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	4a ef       	ldi	r20, 0xFA	; 250
    1da2:	54 e4       	ldi	r21, 0x44	; 68
    1da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	f8 01       	movw	r30, r16
    1dae:	80 83       	st	Z, r24
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	a2 83       	std	Z+2, r26	; 0x02
    1db4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1db6:	fe 01       	movw	r30, r28
    1db8:	e7 59       	subi	r30, 0x97	; 151
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	60 81       	ld	r22, Z
    1dbe:	71 81       	ldd	r23, Z+1	; 0x01
    1dc0:	82 81       	ldd	r24, Z+2	; 0x02
    1dc2:	93 81       	ldd	r25, Z+3	; 0x03
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e8       	ldi	r20, 0x80	; 128
    1dca:	5f e3       	ldi	r21, 0x3F	; 63
    1dcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dd0:	88 23       	and	r24, r24
    1dd2:	44 f4       	brge	.+16     	; 0x1de4 <main+0x1264>
		__ticks = 1;
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e9 59       	subi	r30, 0x99	; 153
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	80 83       	st	Z, r24
    1de2:	64 c0       	rjmp	.+200    	; 0x1eac <main+0x132c>
	else if (__tmp > 65535)
    1de4:	fe 01       	movw	r30, r28
    1de6:	e7 59       	subi	r30, 0x97	; 151
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	60 81       	ld	r22, Z
    1dec:	71 81       	ldd	r23, Z+1	; 0x01
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	3f ef       	ldi	r19, 0xFF	; 255
    1df6:	4f e7       	ldi	r20, 0x7F	; 127
    1df8:	57 e4       	ldi	r21, 0x47	; 71
    1dfa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dfe:	18 16       	cp	r1, r24
    1e00:	0c f0       	brlt	.+2      	; 0x1e04 <main+0x1284>
    1e02:	43 c0       	rjmp	.+134    	; 0x1e8a <main+0x130a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e04:	fe 01       	movw	r30, r28
    1e06:	e3 59       	subi	r30, 0x93	; 147
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	60 81       	ld	r22, Z
    1e0c:	71 81       	ldd	r23, Z+1	; 0x01
    1e0e:	82 81       	ldd	r24, Z+2	; 0x02
    1e10:	93 81       	ldd	r25, Z+3	; 0x03
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e2       	ldi	r20, 0x20	; 32
    1e18:	51 e4       	ldi	r21, 0x41	; 65
    1e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	8e 01       	movw	r16, r28
    1e24:	09 59       	subi	r16, 0x99	; 153
    1e26:	1f 4f       	sbci	r17, 0xFF	; 255
    1e28:	bc 01       	movw	r22, r24
    1e2a:	cd 01       	movw	r24, r26
    1e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	f8 01       	movw	r30, r16
    1e36:	91 83       	std	Z+1, r25	; 0x01
    1e38:	80 83       	st	Z, r24
    1e3a:	1f c0       	rjmp	.+62     	; 0x1e7a <main+0x12fa>
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	eb 59       	subi	r30, 0x9B	; 155
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	88 ec       	ldi	r24, 0xC8	; 200
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	91 83       	std	Z+1, r25	; 0x01
    1e48:	80 83       	st	Z, r24
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	eb 59       	subi	r30, 0x9B	; 155
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	80 81       	ld	r24, Z
    1e52:	91 81       	ldd	r25, Z+1	; 0x01
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <main+0x12d4>
    1e58:	fe 01       	movw	r30, r28
    1e5a:	eb 59       	subi	r30, 0x9B	; 155
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e62:	de 01       	movw	r26, r28
    1e64:	a9 59       	subi	r26, 0x99	; 153
    1e66:	bf 4f       	sbci	r27, 0xFF	; 255
    1e68:	fe 01       	movw	r30, r28
    1e6a:	e9 59       	subi	r30, 0x99	; 153
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	80 81       	ld	r24, Z
    1e70:	91 81       	ldd	r25, Z+1	; 0x01
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	11 96       	adiw	r26, 0x01	; 1
    1e76:	9c 93       	st	X, r25
    1e78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e9 59       	subi	r30, 0x99	; 153
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	80 81       	ld	r24, Z
    1e82:	91 81       	ldd	r25, Z+1	; 0x01
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	d1 f6       	brne	.-76     	; 0x1e3c <main+0x12bc>
    1e88:	27 c0       	rjmp	.+78     	; 0x1ed8 <main+0x1358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8a:	8e 01       	movw	r16, r28
    1e8c:	09 59       	subi	r16, 0x99	; 153
    1e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e90:	fe 01       	movw	r30, r28
    1e92:	e7 59       	subi	r30, 0x97	; 151
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	60 81       	ld	r22, Z
    1e98:	71 81       	ldd	r23, Z+1	; 0x01
    1e9a:	82 81       	ldd	r24, Z+2	; 0x02
    1e9c:	93 81       	ldd	r25, Z+3	; 0x03
    1e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	f8 01       	movw	r30, r16
    1ea8:	91 83       	std	Z+1, r25	; 0x01
    1eaa:	80 83       	st	Z, r24
    1eac:	de 01       	movw	r26, r28
    1eae:	ad 59       	subi	r26, 0x9D	; 157
    1eb0:	bf 4f       	sbci	r27, 0xFF	; 255
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	e9 59       	subi	r30, 0x99	; 153
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	80 81       	ld	r24, Z
    1eba:	91 81       	ldd	r25, Z+1	; 0x01
    1ebc:	8d 93       	st	X+, r24
    1ebe:	9c 93       	st	X, r25
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	ed 59       	subi	r30, 0x9D	; 157
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	80 81       	ld	r24, Z
    1ec8:	91 81       	ldd	r25, Z+1	; 0x01
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	f1 f7       	brne	.-4      	; 0x1eca <main+0x134a>
    1ece:	fe 01       	movw	r30, r28
    1ed0:	ed 59       	subi	r30, 0x9D	; 157
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	91 83       	std	Z+1, r25	; 0x01
    1ed6:	80 83       	st	Z, r24
				_delay_ms(500);//to make sure there is no re-bouncing
				LCD_clearScreen();
    1ed8:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
				UART_sendString(send_Pass); //send user's inputed password to MC2
    1edc:	ce 01       	movw	r24, r28
    1ede:	8e 5f       	subi	r24, 0xFE	; 254
    1ee0:	9e 4f       	sbci	r25, 0xFE	; 254
    1ee2:	0e 94 29 20 	call	0x4052	; 0x4052 <UART_sendString>
				i=0;
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	e1 51       	subi	r30, 0x11	; 17
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
    1eec:	10 82       	st	Z, r1
				temp=0;
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e0 51       	subi	r30, 0x10	; 16
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	10 82       	st	Z, r1
    1ef6:	e5 c1       	rjmp	.+970    	; 0x22c2 <main+0x1742>
				while(temp==0){
					while(UART_recieveByte()!=Confirm_Msg);
    1ef8:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_recieveByte>
    1efc:	85 36       	cpi	r24, 0x65	; 101
    1efe:	e1 f7       	brne	.-8      	; 0x1ef8 <main+0x1378>
					key=UART_recieveByte();
    1f00:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_recieveByte>
    1f04:	fe 01       	movw	r30, r28
    1f06:	ef 50       	subi	r30, 0x0F	; 15
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	80 83       	st	Z, r24
					if(key==Open_Door_Protocol){ //affirmation that passwords are matched
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	ef 50       	subi	r30, 0x0F	; 15
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	80 81       	ld	r24, Z
    1f14:	89 36       	cpi	r24, 0x69	; 105
    1f16:	21 f5       	brne	.+72     	; 0x1f60 <main+0x13e0>
						LCD_clearScreen();
    1f18:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
						LCD_displayString(" Unlocking Door");//display current status as door is opening
    1f1c:	8d e1       	ldi	r24, 0x1D	; 29
    1f1e:	91 e0       	ldi	r25, 0x01	; 1
    1f20:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
						Timer_Count(15); //time until next instruction is executed
    1f24:	8f e0       	ldi	r24, 0x0F	; 15
    1f26:	0e 94 af 05 	call	0xb5e	; 0xb5e <Timer_Count>
						LCD_clearScreen();
    1f2a:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
						LCD_displayString("  Door is Open");//display current status as door is open
    1f2e:	8d e2       	ldi	r24, 0x2D	; 45
    1f30:	91 e0       	ldi	r25, 0x01	; 1
    1f32:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
						Timer_Count(3);//time until next instruction is executed
    1f36:	83 e0       	ldi	r24, 0x03	; 3
    1f38:	0e 94 af 05 	call	0xb5e	; 0xb5e <Timer_Count>
						LCD_clearScreen();
    1f3c:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
						LCD_displayString("  Locking Door");//display current status as door is closing
    1f40:	8c e3       	ldi	r24, 0x3C	; 60
    1f42:	91 e0       	ldi	r25, 0x01	; 1
    1f44:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
						Timer_Count(15);//time until next instruction is executed
    1f48:	8f e0       	ldi	r24, 0x0F	; 15
    1f4a:	0e 94 af 05 	call	0xb5e	; 0xb5e <Timer_Count>
						LCD_clearScreen();
    1f4e:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
						safety_Count=0; //reset count as user entered right password
    1f52:	10 92 95 01 	sts	0x0195, r1
						temp=1; //to get out of loop
    1f56:	fe 01       	movw	r30, r28
    1f58:	e0 51       	subi	r30, 0x10	; 16
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	80 83       	st	Z, r24
					}
					if(key==Invalid_Pass){ //notification that password entered is invalid
    1f60:	fe 01       	movw	r30, r28
    1f62:	ef 50       	subi	r30, 0x0F	; 15
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	80 81       	ld	r24, Z
    1f68:	86 36       	cpi	r24, 0x66	; 102
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <main+0x13ee>
    1f6c:	aa c1       	rjmp	.+852    	; 0x22c2 <main+0x1742>
						LCD_clearScreen();
    1f6e:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
						LCD_displayString("password entered");
    1f72:	8a eb       	ldi	r24, 0xBA	; 186
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
						LCD_moveCursor(1,0); //inform user that password is invalid
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	60 e0       	ldi	r22, 0x00	; 0
    1f7e:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <LCD_moveCursor>
						LCD_displayString(" is incorrect ");
    1f82:	8b ec       	ldi	r24, 0xCB	; 203
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	e1 5a       	subi	r30, 0xA1	; 161
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	aa e7       	ldi	r26, 0x7A	; 122
    1f96:	b4 e4       	ldi	r27, 0x44	; 68
    1f98:	80 83       	st	Z, r24
    1f9a:	91 83       	std	Z+1, r25	; 0x01
    1f9c:	a2 83       	std	Z+2, r26	; 0x02
    1f9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa0:	8e 01       	movw	r16, r28
    1fa2:	05 5a       	subi	r16, 0xA5	; 165
    1fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	e1 5a       	subi	r30, 0xA1	; 161
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	60 81       	ld	r22, Z
    1fae:	71 81       	ldd	r23, Z+1	; 0x01
    1fb0:	82 81       	ldd	r24, Z+2	; 0x02
    1fb2:	93 81       	ldd	r25, Z+3	; 0x03
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	4a ef       	ldi	r20, 0xFA	; 250
    1fba:	54 e4       	ldi	r21, 0x44	; 68
    1fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	f8 01       	movw	r30, r16
    1fc6:	80 83       	st	Z, r24
    1fc8:	91 83       	std	Z+1, r25	; 0x01
    1fca:	a2 83       	std	Z+2, r26	; 0x02
    1fcc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fce:	fe 01       	movw	r30, r28
    1fd0:	e5 5a       	subi	r30, 0xA5	; 165
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	60 81       	ld	r22, Z
    1fd6:	71 81       	ldd	r23, Z+1	; 0x01
    1fd8:	82 81       	ldd	r24, Z+2	; 0x02
    1fda:	93 81       	ldd	r25, Z+3	; 0x03
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e8       	ldi	r20, 0x80	; 128
    1fe2:	5f e3       	ldi	r21, 0x3F	; 63
    1fe4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe8:	88 23       	and	r24, r24
    1fea:	44 f4       	brge	.+16     	; 0x1ffc <main+0x147c>
		__ticks = 1;
    1fec:	fe 01       	movw	r30, r28
    1fee:	e7 5a       	subi	r30, 0xA7	; 167
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	91 83       	std	Z+1, r25	; 0x01
    1ff8:	80 83       	st	Z, r24
    1ffa:	64 c0       	rjmp	.+200    	; 0x20c4 <main+0x1544>
	else if (__tmp > 65535)
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	e5 5a       	subi	r30, 0xA5	; 165
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	60 81       	ld	r22, Z
    2004:	71 81       	ldd	r23, Z+1	; 0x01
    2006:	82 81       	ldd	r24, Z+2	; 0x02
    2008:	93 81       	ldd	r25, Z+3	; 0x03
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	3f ef       	ldi	r19, 0xFF	; 255
    200e:	4f e7       	ldi	r20, 0x7F	; 127
    2010:	57 e4       	ldi	r21, 0x47	; 71
    2012:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2016:	18 16       	cp	r1, r24
    2018:	0c f0       	brlt	.+2      	; 0x201c <main+0x149c>
    201a:	43 c0       	rjmp	.+134    	; 0x20a2 <main+0x1522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201c:	fe 01       	movw	r30, r28
    201e:	e1 5a       	subi	r30, 0xA1	; 161
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	60 81       	ld	r22, Z
    2024:	71 81       	ldd	r23, Z+1	; 0x01
    2026:	82 81       	ldd	r24, Z+2	; 0x02
    2028:	93 81       	ldd	r25, Z+3	; 0x03
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e2       	ldi	r20, 0x20	; 32
    2030:	51 e4       	ldi	r21, 0x41	; 65
    2032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	8e 01       	movw	r16, r28
    203c:	07 5a       	subi	r16, 0xA7	; 167
    203e:	1f 4f       	sbci	r17, 0xFF	; 255
    2040:	bc 01       	movw	r22, r24
    2042:	cd 01       	movw	r24, r26
    2044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	f8 01       	movw	r30, r16
    204e:	91 83       	std	Z+1, r25	; 0x01
    2050:	80 83       	st	Z, r24
    2052:	1f c0       	rjmp	.+62     	; 0x2092 <main+0x1512>
    2054:	fe 01       	movw	r30, r28
    2056:	e9 5a       	subi	r30, 0xA9	; 169
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	88 ec       	ldi	r24, 0xC8	; 200
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	91 83       	std	Z+1, r25	; 0x01
    2060:	80 83       	st	Z, r24
    2062:	fe 01       	movw	r30, r28
    2064:	e9 5a       	subi	r30, 0xA9	; 169
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	80 81       	ld	r24, Z
    206a:	91 81       	ldd	r25, Z+1	; 0x01
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <main+0x14ec>
    2070:	fe 01       	movw	r30, r28
    2072:	e9 5a       	subi	r30, 0xA9	; 169
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207a:	de 01       	movw	r26, r28
    207c:	a7 5a       	subi	r26, 0xA7	; 167
    207e:	bf 4f       	sbci	r27, 0xFF	; 255
    2080:	fe 01       	movw	r30, r28
    2082:	e7 5a       	subi	r30, 0xA7	; 167
    2084:	ff 4f       	sbci	r31, 0xFF	; 255
    2086:	80 81       	ld	r24, Z
    2088:	91 81       	ldd	r25, Z+1	; 0x01
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	11 96       	adiw	r26, 0x01	; 1
    208e:	9c 93       	st	X, r25
    2090:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2092:	fe 01       	movw	r30, r28
    2094:	e7 5a       	subi	r30, 0xA7	; 167
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	80 81       	ld	r24, Z
    209a:	91 81       	ldd	r25, Z+1	; 0x01
    209c:	00 97       	sbiw	r24, 0x00	; 0
    209e:	d1 f6       	brne	.-76     	; 0x2054 <main+0x14d4>
    20a0:	27 c0       	rjmp	.+78     	; 0x20f0 <main+0x1570>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a2:	8e 01       	movw	r16, r28
    20a4:	07 5a       	subi	r16, 0xA7	; 167
    20a6:	1f 4f       	sbci	r17, 0xFF	; 255
    20a8:	fe 01       	movw	r30, r28
    20aa:	e5 5a       	subi	r30, 0xA5	; 165
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	60 81       	ld	r22, Z
    20b0:	71 81       	ldd	r23, Z+1	; 0x01
    20b2:	82 81       	ldd	r24, Z+2	; 0x02
    20b4:	93 81       	ldd	r25, Z+3	; 0x03
    20b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	f8 01       	movw	r30, r16
    20c0:	91 83       	std	Z+1, r25	; 0x01
    20c2:	80 83       	st	Z, r24
    20c4:	de 01       	movw	r26, r28
    20c6:	ab 5a       	subi	r26, 0xAB	; 171
    20c8:	bf 4f       	sbci	r27, 0xFF	; 255
    20ca:	fe 01       	movw	r30, r28
    20cc:	e7 5a       	subi	r30, 0xA7	; 167
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	80 81       	ld	r24, Z
    20d2:	91 81       	ldd	r25, Z+1	; 0x01
    20d4:	8d 93       	st	X+, r24
    20d6:	9c 93       	st	X, r25
    20d8:	fe 01       	movw	r30, r28
    20da:	eb 5a       	subi	r30, 0xAB	; 171
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	80 81       	ld	r24, Z
    20e0:	91 81       	ldd	r25, Z+1	; 0x01
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <main+0x1562>
    20e6:	fe 01       	movw	r30, r28
    20e8:	eb 5a       	subi	r30, 0xAB	; 171
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	91 83       	std	Z+1, r25	; 0x01
    20ee:	80 83       	st	Z, r24
						_delay_ms(1000); //to give time user to see status
						LCD_clearScreen();
    20f0:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
						safety_Count++;
    20f4:	80 91 95 01 	lds	r24, 0x0195
    20f8:	8f 5f       	subi	r24, 0xFF	; 255
    20fa:	80 93 95 01 	sts	0x0195, r24
						if(safety_Count==3){ //if user entered wrong password 3 consecutive times
    20fe:	80 91 95 01 	lds	r24, 0x0195
    2102:	83 30       	cpi	r24, 0x03	; 3
    2104:	b1 f4       	brne	.+44     	; 0x2132 <main+0x15b2>
							LCD_clearScreen();
    2106:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
							LCD_displayString(" ERROR NOINPUTS ");
    210a:	8b e4       	ldi	r24, 0x4B	; 75
    210c:	91 e0       	ldi	r25, 0x01	; 1
    210e:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
							LCD_moveCursor(1,0);
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	60 e0       	ldi	r22, 0x00	; 0
    2116:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <LCD_moveCursor>
							LCD_displayString("INVALID PASSWORD ");
    211a:	8c e5       	ldi	r24, 0x5C	; 92
    211c:	91 e0       	ldi	r25, 0x01	; 1
    211e:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
							Timer_Count(60); //system is out of service for 1 minute
    2122:	8c e3       	ldi	r24, 0x3C	; 60
    2124:	0e 94 af 05 	call	0xb5e	; 0xb5e <Timer_Count>
							LCD_clearScreen();
    2128:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
							safety_Count=0; //reset timer
    212c:	10 92 95 01 	sts	0x0195, r1
    2130:	c1 c0       	rjmp	.+386    	; 0x22b4 <main+0x1734>
						}
						else{
							LCD_clearScreen();
    2132:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
							LCD_displayString("please enter the");
    2136:	8a ed       	ldi	r24, 0xDA	; 218
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
							LCD_moveCursor(1,0); //inform user of wrong password
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	60 e0       	ldi	r22, 0x00	; 0
    2142:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <LCD_moveCursor>
							LCD_displayString("password again ");
    2146:	8e e6       	ldi	r24, 0x6E	; 110
    2148:	91 e0       	ldi	r25, 0x01	; 1
    214a:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
    214e:	fe 01       	movw	r30, r28
    2150:	ef 5a       	subi	r30, 0xAF	; 175
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	aa e7       	ldi	r26, 0x7A	; 122
    215a:	b4 e4       	ldi	r27, 0x44	; 68
    215c:	80 83       	st	Z, r24
    215e:	91 83       	std	Z+1, r25	; 0x01
    2160:	a2 83       	std	Z+2, r26	; 0x02
    2162:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2164:	8e 01       	movw	r16, r28
    2166:	03 5b       	subi	r16, 0xB3	; 179
    2168:	1f 4f       	sbci	r17, 0xFF	; 255
    216a:	fe 01       	movw	r30, r28
    216c:	ef 5a       	subi	r30, 0xAF	; 175
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	60 81       	ld	r22, Z
    2172:	71 81       	ldd	r23, Z+1	; 0x01
    2174:	82 81       	ldd	r24, Z+2	; 0x02
    2176:	93 81       	ldd	r25, Z+3	; 0x03
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	4a ef       	ldi	r20, 0xFA	; 250
    217e:	54 e4       	ldi	r21, 0x44	; 68
    2180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	f8 01       	movw	r30, r16
    218a:	80 83       	st	Z, r24
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	a2 83       	std	Z+2, r26	; 0x02
    2190:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2192:	fe 01       	movw	r30, r28
    2194:	e3 5b       	subi	r30, 0xB3	; 179
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	60 81       	ld	r22, Z
    219a:	71 81       	ldd	r23, Z+1	; 0x01
    219c:	82 81       	ldd	r24, Z+2	; 0x02
    219e:	93 81       	ldd	r25, Z+3	; 0x03
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e8       	ldi	r20, 0x80	; 128
    21a6:	5f e3       	ldi	r21, 0x3F	; 63
    21a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ac:	88 23       	and	r24, r24
    21ae:	44 f4       	brge	.+16     	; 0x21c0 <main+0x1640>
		__ticks = 1;
    21b0:	fe 01       	movw	r30, r28
    21b2:	e5 5b       	subi	r30, 0xB5	; 181
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	80 83       	st	Z, r24
    21be:	64 c0       	rjmp	.+200    	; 0x2288 <main+0x1708>
	else if (__tmp > 65535)
    21c0:	fe 01       	movw	r30, r28
    21c2:	e3 5b       	subi	r30, 0xB3	; 179
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	60 81       	ld	r22, Z
    21c8:	71 81       	ldd	r23, Z+1	; 0x01
    21ca:	82 81       	ldd	r24, Z+2	; 0x02
    21cc:	93 81       	ldd	r25, Z+3	; 0x03
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	3f ef       	ldi	r19, 0xFF	; 255
    21d2:	4f e7       	ldi	r20, 0x7F	; 127
    21d4:	57 e4       	ldi	r21, 0x47	; 71
    21d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21da:	18 16       	cp	r1, r24
    21dc:	0c f0       	brlt	.+2      	; 0x21e0 <main+0x1660>
    21de:	43 c0       	rjmp	.+134    	; 0x2266 <main+0x16e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e0:	fe 01       	movw	r30, r28
    21e2:	ef 5a       	subi	r30, 0xAF	; 175
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	60 81       	ld	r22, Z
    21e8:	71 81       	ldd	r23, Z+1	; 0x01
    21ea:	82 81       	ldd	r24, Z+2	; 0x02
    21ec:	93 81       	ldd	r25, Z+3	; 0x03
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e2       	ldi	r20, 0x20	; 32
    21f4:	51 e4       	ldi	r21, 0x41	; 65
    21f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	8e 01       	movw	r16, r28
    2200:	05 5b       	subi	r16, 0xB5	; 181
    2202:	1f 4f       	sbci	r17, 0xFF	; 255
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	f8 01       	movw	r30, r16
    2212:	91 83       	std	Z+1, r25	; 0x01
    2214:	80 83       	st	Z, r24
    2216:	1f c0       	rjmp	.+62     	; 0x2256 <main+0x16d6>
    2218:	fe 01       	movw	r30, r28
    221a:	e7 5b       	subi	r30, 0xB7	; 183
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	88 ec       	ldi	r24, 0xC8	; 200
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	80 83       	st	Z, r24
    2226:	fe 01       	movw	r30, r28
    2228:	e7 5b       	subi	r30, 0xB7	; 183
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	80 81       	ld	r24, Z
    222e:	91 81       	ldd	r25, Z+1	; 0x01
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	f1 f7       	brne	.-4      	; 0x2230 <main+0x16b0>
    2234:	fe 01       	movw	r30, r28
    2236:	e7 5b       	subi	r30, 0xB7	; 183
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	91 83       	std	Z+1, r25	; 0x01
    223c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223e:	de 01       	movw	r26, r28
    2240:	a5 5b       	subi	r26, 0xB5	; 181
    2242:	bf 4f       	sbci	r27, 0xFF	; 255
    2244:	fe 01       	movw	r30, r28
    2246:	e5 5b       	subi	r30, 0xB5	; 181
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	80 81       	ld	r24, Z
    224c:	91 81       	ldd	r25, Z+1	; 0x01
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	11 96       	adiw	r26, 0x01	; 1
    2252:	9c 93       	st	X, r25
    2254:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2256:	fe 01       	movw	r30, r28
    2258:	e5 5b       	subi	r30, 0xB5	; 181
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	80 81       	ld	r24, Z
    225e:	91 81       	ldd	r25, Z+1	; 0x01
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	d1 f6       	brne	.-76     	; 0x2218 <main+0x1698>
    2264:	27 c0       	rjmp	.+78     	; 0x22b4 <main+0x1734>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2266:	8e 01       	movw	r16, r28
    2268:	05 5b       	subi	r16, 0xB5	; 181
    226a:	1f 4f       	sbci	r17, 0xFF	; 255
    226c:	fe 01       	movw	r30, r28
    226e:	e3 5b       	subi	r30, 0xB3	; 179
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	60 81       	ld	r22, Z
    2274:	71 81       	ldd	r23, Z+1	; 0x01
    2276:	82 81       	ldd	r24, Z+2	; 0x02
    2278:	93 81       	ldd	r25, Z+3	; 0x03
    227a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	f8 01       	movw	r30, r16
    2284:	91 83       	std	Z+1, r25	; 0x01
    2286:	80 83       	st	Z, r24
    2288:	de 01       	movw	r26, r28
    228a:	a9 5b       	subi	r26, 0xB9	; 185
    228c:	bf 4f       	sbci	r27, 0xFF	; 255
    228e:	fe 01       	movw	r30, r28
    2290:	e5 5b       	subi	r30, 0xB5	; 181
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	80 81       	ld	r24, Z
    2296:	91 81       	ldd	r25, Z+1	; 0x01
    2298:	8d 93       	st	X+, r24
    229a:	9c 93       	st	X, r25
    229c:	fe 01       	movw	r30, r28
    229e:	e9 5b       	subi	r30, 0xB9	; 185
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	80 81       	ld	r24, Z
    22a4:	91 81       	ldd	r25, Z+1	; 0x01
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	f1 f7       	brne	.-4      	; 0x22a6 <main+0x1726>
    22aa:	fe 01       	movw	r30, r28
    22ac:	e9 5b       	subi	r30, 0xB9	; 185
    22ae:	ff 4f       	sbci	r31, 0xFF	; 255
    22b0:	91 83       	std	Z+1, r25	; 0x01
    22b2:	80 83       	st	Z, r24
							_delay_ms(1000);
						}
						LCD_clearScreen();
    22b4:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
						temp=1; //to exit loop
    22b8:	fe 01       	movw	r30, r28
    22ba:	e0 51       	subi	r30, 0x10	; 16
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	80 83       	st	Z, r24
				_delay_ms(500);//to make sure there is no re-bouncing
				LCD_clearScreen();
				UART_sendString(send_Pass); //send user's inputed password to MC2
				i=0;
				temp=0;
				while(temp==0){
    22c2:	fe 01       	movw	r30, r28
    22c4:	e0 51       	subi	r30, 0x10	; 16
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 81       	ld	r24, Z
    22ca:	88 23       	and	r24, r24
    22cc:	09 f4       	brne	.+2      	; 0x22d0 <main+0x1750>
    22ce:	14 ce       	rjmp	.-984    	; 0x1ef8 <main+0x1378>
						LCD_clearScreen();
						temp=1; //to exit loop

					}
				}
				key=0;
    22d0:	fe 01       	movw	r30, r28
    22d2:	ef 50       	subi	r30, 0x0F	; 15
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	10 82       	st	Z, r1
				temp=0;
    22d8:	fe 01       	movw	r30, r28
    22da:	e0 51       	subi	r30, 0x10	; 16
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	10 82       	st	Z, r1
    22e0:	40 c3       	rjmp	.+1664   	; 0x2962 <main+0x1de2>
				break;
			case '-':
				UART_sendByte(Change_Pass_Protocol); //to inform MC2 of upcoming process
    22e2:	8a e6       	ldi	r24, 0x6A	; 106
    22e4:	0e 94 03 20 	call	0x4006	; 0x4006 <UART_sendByte>
				LCD_displayString("plz enter pass:");
    22e8:	80 e6       	ldi	r24, 0x60	; 96
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
				LCD_moveCursor(1,0);
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	60 e0       	ldi	r22, 0x00	; 0
    22f4:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <LCD_moveCursor>
				i=0;
    22f8:	fe 01       	movw	r30, r28
    22fa:	e1 51       	subi	r30, 0x11	; 17
    22fc:	ff 4f       	sbci	r31, 0xFF	; 255
    22fe:	10 82       	st	Z, r1
				for(i=0;i<5;i++){
    2300:	fe 01       	movw	r30, r28
    2302:	e1 51       	subi	r30, 0x11	; 17
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	10 82       	st	Z, r1
    2308:	b3 c0       	rjmp	.+358    	; 0x2470 <main+0x18f0>
					if((KEYPAD_getPressedKey()>=0)&&(KEYPAD_getPressedKey()<=9)){// to make sure user pushes a number
    230a:	0e 94 f7 17 	call	0x2fee	; 0x2fee <KEYPAD_getPressedKey>
    230e:	0e 94 f7 17 	call	0x2fee	; 0x2fee <KEYPAD_getPressedKey>
    2312:	8a 30       	cpi	r24, 0x0A	; 10
    2314:	08 f0       	brcs	.+2      	; 0x2318 <main+0x1798>
    2316:	9a c0       	rjmp	.+308    	; 0x244c <main+0x18cc>
						send_Pass[i]=KEYPAD_getPressedKey();// send user inputed password
    2318:	fe 01       	movw	r30, r28
    231a:	e1 51       	subi	r30, 0x11	; 17
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	80 81       	ld	r24, Z
    2320:	08 2f       	mov	r16, r24
    2322:	10 e0       	ldi	r17, 0x00	; 0
    2324:	0e 94 f7 17 	call	0x2fee	; 0x2fee <KEYPAD_getPressedKey>
    2328:	28 2f       	mov	r18, r24
    232a:	ce 01       	movw	r24, r28
    232c:	8e 5f       	subi	r24, 0xFE	; 254
    232e:	9e 4f       	sbci	r25, 0xFE	; 254
    2330:	fc 01       	movw	r30, r24
    2332:	e0 0f       	add	r30, r16
    2334:	f1 1f       	adc	r31, r17
    2336:	20 83       	st	Z, r18
    2338:	fe 01       	movw	r30, r28
    233a:	ed 5b       	subi	r30, 0xBD	; 189
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	aa ef       	ldi	r26, 0xFA	; 250
    2344:	b3 e4       	ldi	r27, 0x43	; 67
    2346:	80 83       	st	Z, r24
    2348:	91 83       	std	Z+1, r25	; 0x01
    234a:	a2 83       	std	Z+2, r26	; 0x02
    234c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    234e:	8e 01       	movw	r16, r28
    2350:	01 5c       	subi	r16, 0xC1	; 193
    2352:	1f 4f       	sbci	r17, 0xFF	; 255
    2354:	fe 01       	movw	r30, r28
    2356:	ed 5b       	subi	r30, 0xBD	; 189
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	60 81       	ld	r22, Z
    235c:	71 81       	ldd	r23, Z+1	; 0x01
    235e:	82 81       	ldd	r24, Z+2	; 0x02
    2360:	93 81       	ldd	r25, Z+3	; 0x03
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	4a ef       	ldi	r20, 0xFA	; 250
    2368:	54 e4       	ldi	r21, 0x44	; 68
    236a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	f8 01       	movw	r30, r16
    2374:	80 83       	st	Z, r24
    2376:	91 83       	std	Z+1, r25	; 0x01
    2378:	a2 83       	std	Z+2, r26	; 0x02
    237a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    237c:	fe 01       	movw	r30, r28
    237e:	ff 96       	adiw	r30, 0x3f	; 63
    2380:	60 81       	ld	r22, Z
    2382:	71 81       	ldd	r23, Z+1	; 0x01
    2384:	82 81       	ldd	r24, Z+2	; 0x02
    2386:	93 81       	ldd	r25, Z+3	; 0x03
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e8       	ldi	r20, 0x80	; 128
    238e:	5f e3       	ldi	r21, 0x3F	; 63
    2390:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2394:	88 23       	and	r24, r24
    2396:	2c f4       	brge	.+10     	; 0x23a2 <main+0x1822>
		__ticks = 1;
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	9e af       	std	Y+62, r25	; 0x3e
    239e:	8d af       	std	Y+61, r24	; 0x3d
    23a0:	46 c0       	rjmp	.+140    	; 0x242e <main+0x18ae>
	else if (__tmp > 65535)
    23a2:	fe 01       	movw	r30, r28
    23a4:	ff 96       	adiw	r30, 0x3f	; 63
    23a6:	60 81       	ld	r22, Z
    23a8:	71 81       	ldd	r23, Z+1	; 0x01
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	3f ef       	ldi	r19, 0xFF	; 255
    23b2:	4f e7       	ldi	r20, 0x7F	; 127
    23b4:	57 e4       	ldi	r21, 0x47	; 71
    23b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ba:	18 16       	cp	r1, r24
    23bc:	64 f5       	brge	.+88     	; 0x2416 <main+0x1896>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23be:	fe 01       	movw	r30, r28
    23c0:	ed 5b       	subi	r30, 0xBD	; 189
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	60 81       	ld	r22, Z
    23c6:	71 81       	ldd	r23, Z+1	; 0x01
    23c8:	82 81       	ldd	r24, Z+2	; 0x02
    23ca:	93 81       	ldd	r25, Z+3	; 0x03
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e2       	ldi	r20, 0x20	; 32
    23d2:	51 e4       	ldi	r21, 0x41	; 65
    23d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	bc 01       	movw	r22, r24
    23de:	cd 01       	movw	r24, r26
    23e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	9e af       	std	Y+62, r25	; 0x3e
    23ea:	8d af       	std	Y+61, r24	; 0x3d
    23ec:	0f c0       	rjmp	.+30     	; 0x240c <main+0x188c>
    23ee:	88 ec       	ldi	r24, 0xC8	; 200
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9c af       	std	Y+60, r25	; 0x3c
    23f4:	8b af       	std	Y+59, r24	; 0x3b
    23f6:	8b ad       	ldd	r24, Y+59	; 0x3b
    23f8:	9c ad       	ldd	r25, Y+60	; 0x3c
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <main+0x187a>
    23fe:	9c af       	std	Y+60, r25	; 0x3c
    2400:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2402:	8d ad       	ldd	r24, Y+61	; 0x3d
    2404:	9e ad       	ldd	r25, Y+62	; 0x3e
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	9e af       	std	Y+62, r25	; 0x3e
    240a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240c:	8d ad       	ldd	r24, Y+61	; 0x3d
    240e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	69 f7       	brne	.-38     	; 0x23ee <main+0x186e>
    2414:	16 c0       	rjmp	.+44     	; 0x2442 <main+0x18c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2416:	fe 01       	movw	r30, r28
    2418:	ff 96       	adiw	r30, 0x3f	; 63
    241a:	60 81       	ld	r22, Z
    241c:	71 81       	ldd	r23, Z+1	; 0x01
    241e:	82 81       	ldd	r24, Z+2	; 0x02
    2420:	93 81       	ldd	r25, Z+3	; 0x03
    2422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	9e af       	std	Y+62, r25	; 0x3e
    242c:	8d af       	std	Y+61, r24	; 0x3d
    242e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2430:	9e ad       	ldd	r25, Y+62	; 0x3e
    2432:	9a af       	std	Y+58, r25	; 0x3a
    2434:	89 af       	std	Y+57, r24	; 0x39
    2436:	89 ad       	ldd	r24, Y+57	; 0x39
    2438:	9a ad       	ldd	r25, Y+58	; 0x3a
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	f1 f7       	brne	.-4      	; 0x243a <main+0x18ba>
    243e:	9a af       	std	Y+58, r25	; 0x3a
    2440:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(500);
						LCD_displayString("*");
    2442:	80 e7       	ldi	r24, 0x70	; 112
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
    244a:	09 c0       	rjmp	.+18     	; 0x245e <main+0x18de>
					}
					else{
						i--;
    244c:	de 01       	movw	r26, r28
    244e:	a1 51       	subi	r26, 0x11	; 17
    2450:	bf 4f       	sbci	r27, 0xFF	; 255
    2452:	fe 01       	movw	r30, r28
    2454:	e1 51       	subi	r30, 0x11	; 17
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	80 81       	ld	r24, Z
    245a:	81 50       	subi	r24, 0x01	; 1
    245c:	8c 93       	st	X, r24
			case '-':
				UART_sendByte(Change_Pass_Protocol); //to inform MC2 of upcoming process
				LCD_displayString("plz enter pass:");
				LCD_moveCursor(1,0);
				i=0;
				for(i=0;i<5;i++){
    245e:	de 01       	movw	r26, r28
    2460:	a1 51       	subi	r26, 0x11	; 17
    2462:	bf 4f       	sbci	r27, 0xFF	; 255
    2464:	fe 01       	movw	r30, r28
    2466:	e1 51       	subi	r30, 0x11	; 17
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 81       	ld	r24, Z
    246c:	8f 5f       	subi	r24, 0xFF	; 255
    246e:	8c 93       	st	X, r24
    2470:	fe 01       	movw	r30, r28
    2472:	e1 51       	subi	r30, 0x11	; 17
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	80 81       	ld	r24, Z
    2478:	85 30       	cpi	r24, 0x05	; 5
    247a:	08 f4       	brcc	.+2      	; 0x247e <main+0x18fe>
    247c:	46 cf       	rjmp	.-372    	; 0x230a <main+0x178a>
					}
					else{
						i--;
					}
				}
				while(KEYPAD_getPressedKey()!='='); //to submit password user entered
    247e:	0e 94 f7 17 	call	0x2fee	; 0x2fee <KEYPAD_getPressedKey>
    2482:	8d 33       	cpi	r24, 0x3D	; 61
    2484:	e1 f7       	brne	.-8      	; 0x247e <main+0x18fe>
				send_Pass[i]='#';// character chosen to be the last in any Uart send string
    2486:	fe 01       	movw	r30, r28
    2488:	e1 51       	subi	r30, 0x11	; 17
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	80 81       	ld	r24, Z
    248e:	28 2f       	mov	r18, r24
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	ce 01       	movw	r24, r28
    2494:	8e 5f       	subi	r24, 0xFE	; 254
    2496:	9e 4f       	sbci	r25, 0xFE	; 254
    2498:	fc 01       	movw	r30, r24
    249a:	e2 0f       	add	r30, r18
    249c:	f3 1f       	adc	r31, r19
    249e:	83 e2       	ldi	r24, 0x23	; 35
    24a0:	80 83       	st	Z, r24
				LCD_clearScreen();
    24a2:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
				LCD_displayString("    loading"); //load system status
    24a6:	82 e7       	ldi	r24, 0x72	; 114
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	aa ef       	ldi	r26, 0xFA	; 250
    24b4:	b3 e4       	ldi	r27, 0x43	; 67
    24b6:	8d ab       	std	Y+53, r24	; 0x35
    24b8:	9e ab       	std	Y+54, r25	; 0x36
    24ba:	af ab       	std	Y+55, r26	; 0x37
    24bc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24be:	6d a9       	ldd	r22, Y+53	; 0x35
    24c0:	7e a9       	ldd	r23, Y+54	; 0x36
    24c2:	8f a9       	ldd	r24, Y+55	; 0x37
    24c4:	98 ad       	ldd	r25, Y+56	; 0x38
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	4a ef       	ldi	r20, 0xFA	; 250
    24cc:	54 e4       	ldi	r21, 0x44	; 68
    24ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	89 ab       	std	Y+49, r24	; 0x31
    24d8:	9a ab       	std	Y+50, r25	; 0x32
    24da:	ab ab       	std	Y+51, r26	; 0x33
    24dc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24de:	69 a9       	ldd	r22, Y+49	; 0x31
    24e0:	7a a9       	ldd	r23, Y+50	; 0x32
    24e2:	8b a9       	ldd	r24, Y+51	; 0x33
    24e4:	9c a9       	ldd	r25, Y+52	; 0x34
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e8       	ldi	r20, 0x80	; 128
    24ec:	5f e3       	ldi	r21, 0x3F	; 63
    24ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24f2:	88 23       	and	r24, r24
    24f4:	2c f4       	brge	.+10     	; 0x2500 <main+0x1980>
		__ticks = 1;
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	98 ab       	std	Y+48, r25	; 0x30
    24fc:	8f a7       	std	Y+47, r24	; 0x2f
    24fe:	3f c0       	rjmp	.+126    	; 0x257e <main+0x19fe>
	else if (__tmp > 65535)
    2500:	69 a9       	ldd	r22, Y+49	; 0x31
    2502:	7a a9       	ldd	r23, Y+50	; 0x32
    2504:	8b a9       	ldd	r24, Y+51	; 0x33
    2506:	9c a9       	ldd	r25, Y+52	; 0x34
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	3f ef       	ldi	r19, 0xFF	; 255
    250c:	4f e7       	ldi	r20, 0x7F	; 127
    250e:	57 e4       	ldi	r21, 0x47	; 71
    2510:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2514:	18 16       	cp	r1, r24
    2516:	4c f5       	brge	.+82     	; 0x256a <main+0x19ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2518:	6d a9       	ldd	r22, Y+53	; 0x35
    251a:	7e a9       	ldd	r23, Y+54	; 0x36
    251c:	8f a9       	ldd	r24, Y+55	; 0x37
    251e:	98 ad       	ldd	r25, Y+56	; 0x38
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	40 e2       	ldi	r20, 0x20	; 32
    2526:	51 e4       	ldi	r21, 0x41	; 65
    2528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	bc 01       	movw	r22, r24
    2532:	cd 01       	movw	r24, r26
    2534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	98 ab       	std	Y+48, r25	; 0x30
    253e:	8f a7       	std	Y+47, r24	; 0x2f
    2540:	0f c0       	rjmp	.+30     	; 0x2560 <main+0x19e0>
    2542:	88 ec       	ldi	r24, 0xC8	; 200
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	9e a7       	std	Y+46, r25	; 0x2e
    2548:	8d a7       	std	Y+45, r24	; 0x2d
    254a:	8d a5       	ldd	r24, Y+45	; 0x2d
    254c:	9e a5       	ldd	r25, Y+46	; 0x2e
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	f1 f7       	brne	.-4      	; 0x254e <main+0x19ce>
    2552:	9e a7       	std	Y+46, r25	; 0x2e
    2554:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2556:	8f a5       	ldd	r24, Y+47	; 0x2f
    2558:	98 a9       	ldd	r25, Y+48	; 0x30
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	98 ab       	std	Y+48, r25	; 0x30
    255e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2560:	8f a5       	ldd	r24, Y+47	; 0x2f
    2562:	98 a9       	ldd	r25, Y+48	; 0x30
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	69 f7       	brne	.-38     	; 0x2542 <main+0x19c2>
    2568:	14 c0       	rjmp	.+40     	; 0x2592 <main+0x1a12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256a:	69 a9       	ldd	r22, Y+49	; 0x31
    256c:	7a a9       	ldd	r23, Y+50	; 0x32
    256e:	8b a9       	ldd	r24, Y+51	; 0x33
    2570:	9c a9       	ldd	r25, Y+52	; 0x34
    2572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	98 ab       	std	Y+48, r25	; 0x30
    257c:	8f a7       	std	Y+47, r24	; 0x2f
    257e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2580:	98 a9       	ldd	r25, Y+48	; 0x30
    2582:	9c a7       	std	Y+44, r25	; 0x2c
    2584:	8b a7       	std	Y+43, r24	; 0x2b
    2586:	8b a5       	ldd	r24, Y+43	; 0x2b
    2588:	9c a5       	ldd	r25, Y+44	; 0x2c
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	f1 f7       	brne	.-4      	; 0x258a <main+0x1a0a>
    258e:	9c a7       	std	Y+44, r25	; 0x2c
    2590:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(500);
				LCD_clearScreen();
    2592:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
				UART_sendString(send_Pass); //send string to MC2
    2596:	ce 01       	movw	r24, r28
    2598:	8e 5f       	subi	r24, 0xFE	; 254
    259a:	9e 4f       	sbci	r25, 0xFE	; 254
    259c:	0e 94 29 20 	call	0x4052	; 0x4052 <UART_sendString>
				i=0;
    25a0:	fe 01       	movw	r30, r28
    25a2:	e1 51       	subi	r30, 0x11	; 17
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	10 82       	st	Z, r1
				temp=0;
    25a8:	fe 01       	movw	r30, r28
    25aa:	e0 51       	subi	r30, 0x10	; 16
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	10 82       	st	Z, r1
    25b0:	c9 c1       	rjmp	.+914    	; 0x2944 <main+0x1dc4>
				while(temp==0){
					while(UART_recieveByte()!=Confirm_Msg);
    25b2:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_recieveByte>
    25b6:	85 36       	cpi	r24, 0x65	; 101
    25b8:	e1 f7       	brne	.-8      	; 0x25b2 <main+0x1a32>
					key=UART_recieveByte();
    25ba:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_recieveByte>
    25be:	fe 01       	movw	r30, r28
    25c0:	ef 50       	subi	r30, 0x0F	; 15
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	80 83       	st	Z, r24
					if(key==Password_Match){ //password matches password in eeprom notification
    25c6:	fe 01       	movw	r30, r28
    25c8:	ef 50       	subi	r30, 0x0F	; 15
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	80 81       	ld	r24, Z
    25ce:	8d 36       	cpi	r24, 0x6D	; 109
    25d0:	09 f0       	breq	.+2      	; 0x25d4 <main+0x1a54>
    25d2:	89 c0       	rjmp	.+274    	; 0x26e6 <main+0x1b66>
						LCD_clearScreen();
    25d4:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
						LCD_displayString("password entered");
    25d8:	8a eb       	ldi	r24, 0xBA	; 186
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
						LCD_moveCursor(1,0); //user display on system status
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <LCD_moveCursor>
						LCD_displayString("  successfully ");
    25e8:	8a ea       	ldi	r24, 0xAA	; 170
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	aa e7       	ldi	r26, 0x7A	; 122
    25f6:	b4 e4       	ldi	r27, 0x44	; 68
    25f8:	8f a3       	std	Y+39, r24	; 0x27
    25fa:	98 a7       	std	Y+40, r25	; 0x28
    25fc:	a9 a7       	std	Y+41, r26	; 0x29
    25fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2600:	6f a1       	ldd	r22, Y+39	; 0x27
    2602:	78 a5       	ldd	r23, Y+40	; 0x28
    2604:	89 a5       	ldd	r24, Y+41	; 0x29
    2606:	9a a5       	ldd	r25, Y+42	; 0x2a
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	4a ef       	ldi	r20, 0xFA	; 250
    260e:	54 e4       	ldi	r21, 0x44	; 68
    2610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	8b a3       	std	Y+35, r24	; 0x23
    261a:	9c a3       	std	Y+36, r25	; 0x24
    261c:	ad a3       	std	Y+37, r26	; 0x25
    261e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2620:	6b a1       	ldd	r22, Y+35	; 0x23
    2622:	7c a1       	ldd	r23, Y+36	; 0x24
    2624:	8d a1       	ldd	r24, Y+37	; 0x25
    2626:	9e a1       	ldd	r25, Y+38	; 0x26
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e8       	ldi	r20, 0x80	; 128
    262e:	5f e3       	ldi	r21, 0x3F	; 63
    2630:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2634:	88 23       	and	r24, r24
    2636:	2c f4       	brge	.+10     	; 0x2642 <main+0x1ac2>
		__ticks = 1;
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	9a a3       	std	Y+34, r25	; 0x22
    263e:	89 a3       	std	Y+33, r24	; 0x21
    2640:	3f c0       	rjmp	.+126    	; 0x26c0 <main+0x1b40>
	else if (__tmp > 65535)
    2642:	6b a1       	ldd	r22, Y+35	; 0x23
    2644:	7c a1       	ldd	r23, Y+36	; 0x24
    2646:	8d a1       	ldd	r24, Y+37	; 0x25
    2648:	9e a1       	ldd	r25, Y+38	; 0x26
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	3f ef       	ldi	r19, 0xFF	; 255
    264e:	4f e7       	ldi	r20, 0x7F	; 127
    2650:	57 e4       	ldi	r21, 0x47	; 71
    2652:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2656:	18 16       	cp	r1, r24
    2658:	4c f5       	brge	.+82     	; 0x26ac <main+0x1b2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265a:	6f a1       	ldd	r22, Y+39	; 0x27
    265c:	78 a5       	ldd	r23, Y+40	; 0x28
    265e:	89 a5       	ldd	r24, Y+41	; 0x29
    2660:	9a a5       	ldd	r25, Y+42	; 0x2a
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e2       	ldi	r20, 0x20	; 32
    2668:	51 e4       	ldi	r21, 0x41	; 65
    266a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	bc 01       	movw	r22, r24
    2674:	cd 01       	movw	r24, r26
    2676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	9a a3       	std	Y+34, r25	; 0x22
    2680:	89 a3       	std	Y+33, r24	; 0x21
    2682:	0f c0       	rjmp	.+30     	; 0x26a2 <main+0x1b22>
    2684:	88 ec       	ldi	r24, 0xC8	; 200
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	98 a3       	std	Y+32, r25	; 0x20
    268a:	8f 8f       	std	Y+31, r24	; 0x1f
    268c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    268e:	98 a1       	ldd	r25, Y+32	; 0x20
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <main+0x1b10>
    2694:	98 a3       	std	Y+32, r25	; 0x20
    2696:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2698:	89 a1       	ldd	r24, Y+33	; 0x21
    269a:	9a a1       	ldd	r25, Y+34	; 0x22
    269c:	01 97       	sbiw	r24, 0x01	; 1
    269e:	9a a3       	std	Y+34, r25	; 0x22
    26a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a2:	89 a1       	ldd	r24, Y+33	; 0x21
    26a4:	9a a1       	ldd	r25, Y+34	; 0x22
    26a6:	00 97       	sbiw	r24, 0x00	; 0
    26a8:	69 f7       	brne	.-38     	; 0x2684 <main+0x1b04>
    26aa:	14 c0       	rjmp	.+40     	; 0x26d4 <main+0x1b54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ac:	6b a1       	ldd	r22, Y+35	; 0x23
    26ae:	7c a1       	ldd	r23, Y+36	; 0x24
    26b0:	8d a1       	ldd	r24, Y+37	; 0x25
    26b2:	9e a1       	ldd	r25, Y+38	; 0x26
    26b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	9a a3       	std	Y+34, r25	; 0x22
    26be:	89 a3       	std	Y+33, r24	; 0x21
    26c0:	89 a1       	ldd	r24, Y+33	; 0x21
    26c2:	9a a1       	ldd	r25, Y+34	; 0x22
    26c4:	9e 8f       	std	Y+30, r25	; 0x1e
    26c6:	8d 8f       	std	Y+29, r24	; 0x1d
    26c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	f1 f7       	brne	.-4      	; 0x26cc <main+0x1b4c>
    26d0:	9e 8f       	std	Y+30, r25	; 0x1e
    26d2:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(1000);
						LCD_clearScreen();
    26d4:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
						access_Times=0;//return to change password protocol
    26d8:	10 92 96 01 	sts	0x0196, r1
						temp=1;
    26dc:	fe 01       	movw	r30, r28
    26de:	e0 51       	subi	r30, 0x10	; 16
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	80 83       	st	Z, r24
					}
					if(key==Invalid_Pass){ //password doesn't matches password in eeprom notification
    26e6:	fe 01       	movw	r30, r28
    26e8:	ef 50       	subi	r30, 0x0F	; 15
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	80 81       	ld	r24, Z
    26ee:	86 36       	cpi	r24, 0x66	; 102
    26f0:	09 f0       	breq	.+2      	; 0x26f4 <main+0x1b74>
    26f2:	28 c1       	rjmp	.+592    	; 0x2944 <main+0x1dc4>
						LCD_clearScreen();
    26f4:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
						LCD_displayString("password entered");
    26f8:	8a eb       	ldi	r24, 0xBA	; 186
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
						LCD_moveCursor(1,0);
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	60 e0       	ldi	r22, 0x00	; 0
    2704:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <LCD_moveCursor>
						LCD_displayString(" is incorrect ");
    2708:	8b ec       	ldi	r24, 0xCB	; 203
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	aa e7       	ldi	r26, 0x7A	; 122
    2716:	b4 e4       	ldi	r27, 0x44	; 68
    2718:	89 8f       	std	Y+25, r24	; 0x19
    271a:	9a 8f       	std	Y+26, r25	; 0x1a
    271c:	ab 8f       	std	Y+27, r26	; 0x1b
    271e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2720:	69 8d       	ldd	r22, Y+25	; 0x19
    2722:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2724:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2726:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	4a ef       	ldi	r20, 0xFA	; 250
    272e:	54 e4       	ldi	r21, 0x44	; 68
    2730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	8d 8b       	std	Y+21, r24	; 0x15
    273a:	9e 8b       	std	Y+22, r25	; 0x16
    273c:	af 8b       	std	Y+23, r26	; 0x17
    273e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2740:	6d 89       	ldd	r22, Y+21	; 0x15
    2742:	7e 89       	ldd	r23, Y+22	; 0x16
    2744:	8f 89       	ldd	r24, Y+23	; 0x17
    2746:	98 8d       	ldd	r25, Y+24	; 0x18
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e8       	ldi	r20, 0x80	; 128
    274e:	5f e3       	ldi	r21, 0x3F	; 63
    2750:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2754:	88 23       	and	r24, r24
    2756:	2c f4       	brge	.+10     	; 0x2762 <main+0x1be2>
		__ticks = 1;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	9c 8b       	std	Y+20, r25	; 0x14
    275e:	8b 8b       	std	Y+19, r24	; 0x13
    2760:	3f c0       	rjmp	.+126    	; 0x27e0 <main+0x1c60>
	else if (__tmp > 65535)
    2762:	6d 89       	ldd	r22, Y+21	; 0x15
    2764:	7e 89       	ldd	r23, Y+22	; 0x16
    2766:	8f 89       	ldd	r24, Y+23	; 0x17
    2768:	98 8d       	ldd	r25, Y+24	; 0x18
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	3f ef       	ldi	r19, 0xFF	; 255
    276e:	4f e7       	ldi	r20, 0x7F	; 127
    2770:	57 e4       	ldi	r21, 0x47	; 71
    2772:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2776:	18 16       	cp	r1, r24
    2778:	4c f5       	brge	.+82     	; 0x27cc <main+0x1c4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277a:	69 8d       	ldd	r22, Y+25	; 0x19
    277c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    277e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2780:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e2       	ldi	r20, 0x20	; 32
    2788:	51 e4       	ldi	r21, 0x41	; 65
    278a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	bc 01       	movw	r22, r24
    2794:	cd 01       	movw	r24, r26
    2796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	9c 8b       	std	Y+20, r25	; 0x14
    27a0:	8b 8b       	std	Y+19, r24	; 0x13
    27a2:	0f c0       	rjmp	.+30     	; 0x27c2 <main+0x1c42>
    27a4:	88 ec       	ldi	r24, 0xC8	; 200
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	9a 8b       	std	Y+18, r25	; 0x12
    27aa:	89 8b       	std	Y+17, r24	; 0x11
    27ac:	89 89       	ldd	r24, Y+17	; 0x11
    27ae:	9a 89       	ldd	r25, Y+18	; 0x12
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <main+0x1c30>
    27b4:	9a 8b       	std	Y+18, r25	; 0x12
    27b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b8:	8b 89       	ldd	r24, Y+19	; 0x13
    27ba:	9c 89       	ldd	r25, Y+20	; 0x14
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	9c 8b       	std	Y+20, r25	; 0x14
    27c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c2:	8b 89       	ldd	r24, Y+19	; 0x13
    27c4:	9c 89       	ldd	r25, Y+20	; 0x14
    27c6:	00 97       	sbiw	r24, 0x00	; 0
    27c8:	69 f7       	brne	.-38     	; 0x27a4 <main+0x1c24>
    27ca:	14 c0       	rjmp	.+40     	; 0x27f4 <main+0x1c74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27cc:	6d 89       	ldd	r22, Y+21	; 0x15
    27ce:	7e 89       	ldd	r23, Y+22	; 0x16
    27d0:	8f 89       	ldd	r24, Y+23	; 0x17
    27d2:	98 8d       	ldd	r25, Y+24	; 0x18
    27d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	9c 8b       	std	Y+20, r25	; 0x14
    27de:	8b 8b       	std	Y+19, r24	; 0x13
    27e0:	8b 89       	ldd	r24, Y+19	; 0x13
    27e2:	9c 89       	ldd	r25, Y+20	; 0x14
    27e4:	98 8b       	std	Y+16, r25	; 0x10
    27e6:	8f 87       	std	Y+15, r24	; 0x0f
    27e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ea:	98 89       	ldd	r25, Y+16	; 0x10
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <main+0x1c6c>
    27f0:	98 8b       	std	Y+16, r25	; 0x10
    27f2:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(1000);
						LCD_clearScreen();
    27f4:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
						safety_Count++;//everytime user enters wrong password safety count increments
    27f8:	80 91 95 01 	lds	r24, 0x0195
    27fc:	8f 5f       	subi	r24, 0xFF	; 255
    27fe:	80 93 95 01 	sts	0x0195, r24
						if(safety_Count==3){//this case for 1 min system is out of service as inruder alert
    2802:	80 91 95 01 	lds	r24, 0x0195
    2806:	83 30       	cpi	r24, 0x03	; 3
    2808:	b1 f4       	brne	.+44     	; 0x2836 <main+0x1cb6>
							LCD_clearScreen();
    280a:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
							LCD_displayString(" ERROR NOINPUTS ");
    280e:	8b e4       	ldi	r24, 0x4B	; 75
    2810:	91 e0       	ldi	r25, 0x01	; 1
    2812:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
							LCD_moveCursor(1,0);
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	60 e0       	ldi	r22, 0x00	; 0
    281a:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <LCD_moveCursor>
							LCD_displayString("INVALID PASSWORD ");
    281e:	8c e5       	ldi	r24, 0x5C	; 92
    2820:	91 e0       	ldi	r25, 0x01	; 1
    2822:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
							Timer_Count(60);
    2826:	8c e3       	ldi	r24, 0x3C	; 60
    2828:	0e 94 af 05 	call	0xb5e	; 0xb5e <Timer_Count>
							LCD_clearScreen();
    282c:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
							safety_Count=0;//reset counter from 0
    2830:	10 92 95 01 	sts	0x0195, r1
    2834:	80 c0       	rjmp	.+256    	; 0x2936 <main+0x1db6>
						}
						else{
							LCD_clearScreen();
    2836:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
							LCD_displayString("please enter the");
    283a:	8a ed       	ldi	r24, 0xDA	; 218
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
							LCD_moveCursor(1,0);
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	60 e0       	ldi	r22, 0x00	; 0
    2846:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <LCD_moveCursor>
							LCD_displayString("password again ");
    284a:	8e e6       	ldi	r24, 0x6E	; 110
    284c:	91 e0       	ldi	r25, 0x01	; 1
    284e:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	aa e7       	ldi	r26, 0x7A	; 122
    2858:	b4 e4       	ldi	r27, 0x44	; 68
    285a:	8b 87       	std	Y+11, r24	; 0x0b
    285c:	9c 87       	std	Y+12, r25	; 0x0c
    285e:	ad 87       	std	Y+13, r26	; 0x0d
    2860:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2862:	6b 85       	ldd	r22, Y+11	; 0x0b
    2864:	7c 85       	ldd	r23, Y+12	; 0x0c
    2866:	8d 85       	ldd	r24, Y+13	; 0x0d
    2868:	9e 85       	ldd	r25, Y+14	; 0x0e
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	4a ef       	ldi	r20, 0xFA	; 250
    2870:	54 e4       	ldi	r21, 0x44	; 68
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	8f 83       	std	Y+7, r24	; 0x07
    287c:	98 87       	std	Y+8, r25	; 0x08
    287e:	a9 87       	std	Y+9, r26	; 0x09
    2880:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2882:	6f 81       	ldd	r22, Y+7	; 0x07
    2884:	78 85       	ldd	r23, Y+8	; 0x08
    2886:	89 85       	ldd	r24, Y+9	; 0x09
    2888:	9a 85       	ldd	r25, Y+10	; 0x0a
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e8       	ldi	r20, 0x80	; 128
    2890:	5f e3       	ldi	r21, 0x3F	; 63
    2892:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2896:	88 23       	and	r24, r24
    2898:	2c f4       	brge	.+10     	; 0x28a4 <main+0x1d24>
		__ticks = 1;
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	9e 83       	std	Y+6, r25	; 0x06
    28a0:	8d 83       	std	Y+5, r24	; 0x05
    28a2:	3f c0       	rjmp	.+126    	; 0x2922 <main+0x1da2>
	else if (__tmp > 65535)
    28a4:	6f 81       	ldd	r22, Y+7	; 0x07
    28a6:	78 85       	ldd	r23, Y+8	; 0x08
    28a8:	89 85       	ldd	r24, Y+9	; 0x09
    28aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	3f ef       	ldi	r19, 0xFF	; 255
    28b0:	4f e7       	ldi	r20, 0x7F	; 127
    28b2:	57 e4       	ldi	r21, 0x47	; 71
    28b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28b8:	18 16       	cp	r1, r24
    28ba:	4c f5       	brge	.+82     	; 0x290e <main+0x1d8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    28be:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e2       	ldi	r20, 0x20	; 32
    28ca:	51 e4       	ldi	r21, 0x41	; 65
    28cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9e 83       	std	Y+6, r25	; 0x06
    28e2:	8d 83       	std	Y+5, r24	; 0x05
    28e4:	0f c0       	rjmp	.+30     	; 0x2904 <main+0x1d84>
    28e6:	88 ec       	ldi	r24, 0xC8	; 200
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	9c 83       	std	Y+4, r25	; 0x04
    28ec:	8b 83       	std	Y+3, r24	; 0x03
    28ee:	8b 81       	ldd	r24, Y+3	; 0x03
    28f0:	9c 81       	ldd	r25, Y+4	; 0x04
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <main+0x1d72>
    28f6:	9c 83       	std	Y+4, r25	; 0x04
    28f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fa:	8d 81       	ldd	r24, Y+5	; 0x05
    28fc:	9e 81       	ldd	r25, Y+6	; 0x06
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	9e 83       	std	Y+6, r25	; 0x06
    2902:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2904:	8d 81       	ldd	r24, Y+5	; 0x05
    2906:	9e 81       	ldd	r25, Y+6	; 0x06
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	69 f7       	brne	.-38     	; 0x28e6 <main+0x1d66>
    290c:	14 c0       	rjmp	.+40     	; 0x2936 <main+0x1db6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290e:	6f 81       	ldd	r22, Y+7	; 0x07
    2910:	78 85       	ldd	r23, Y+8	; 0x08
    2912:	89 85       	ldd	r24, Y+9	; 0x09
    2914:	9a 85       	ldd	r25, Y+10	; 0x0a
    2916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	9e 83       	std	Y+6, r25	; 0x06
    2920:	8d 83       	std	Y+5, r24	; 0x05
    2922:	8d 81       	ldd	r24, Y+5	; 0x05
    2924:	9e 81       	ldd	r25, Y+6	; 0x06
    2926:	9a 83       	std	Y+2, r25	; 0x02
    2928:	89 83       	std	Y+1, r24	; 0x01
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	9a 81       	ldd	r25, Y+2	; 0x02
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <main+0x1dae>
    2932:	9a 83       	std	Y+2, r25	; 0x02
    2934:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(1000);
						}
						LCD_clearScreen();
    2936:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_clearScreen>
						temp=1;
    293a:	fe 01       	movw	r30, r28
    293c:	e0 51       	subi	r30, 0x10	; 16
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	80 83       	st	Z, r24
				_delay_ms(500);
				LCD_clearScreen();
				UART_sendString(send_Pass); //send string to MC2
				i=0;
				temp=0;
				while(temp==0){
    2944:	fe 01       	movw	r30, r28
    2946:	e0 51       	subi	r30, 0x10	; 16
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	80 81       	ld	r24, Z
    294c:	88 23       	and	r24, r24
    294e:	09 f4       	brne	.+2      	; 0x2952 <main+0x1dd2>
    2950:	30 ce       	rjmp	.-928    	; 0x25b2 <main+0x1a32>
						LCD_clearScreen();
						temp=1;

					}
				}
				key=0;
    2952:	fe 01       	movw	r30, r28
    2954:	ef 50       	subi	r30, 0x0F	; 15
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	10 82       	st	Z, r1
				temp=0;
    295a:	fe 01       	movw	r30, r28
    295c:	e0 51       	subi	r30, 0x10	; 16
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	10 82       	st	Z, r1
					temp=1; // to exit loop
				}
			}

		}
		while(access_Times==1){ //as system has a saved password we exit first loop
    2962:	80 91 96 01 	lds	r24, 0x0196
    2966:	81 30       	cpi	r24, 0x01	; 1
    2968:	11 f4       	brne	.+4      	; 0x296e <main+0x1dee>
    296a:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <main+0xdd4>
    296e:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <main+0xdc6>

00002972 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	00 d0       	rcall	.+0      	; 0x2978 <GPIO_setupPinDirection+0x6>
    2978:	00 d0       	rcall	.+0      	; 0x297a <GPIO_setupPinDirection+0x8>
    297a:	0f 92       	push	r0
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
    2980:	89 83       	std	Y+1, r24	; 0x01
    2982:	6a 83       	std	Y+2, r22	; 0x02
    2984:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2986:	8a 81       	ldd	r24, Y+2	; 0x02
    2988:	88 30       	cpi	r24, 0x08	; 8
    298a:	08 f0       	brcs	.+2      	; 0x298e <GPIO_setupPinDirection+0x1c>
    298c:	d5 c0       	rjmp	.+426    	; 0x2b38 <GPIO_setupPinDirection+0x1c6>
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	84 30       	cpi	r24, 0x04	; 4
    2992:	08 f0       	brcs	.+2      	; 0x2996 <GPIO_setupPinDirection+0x24>
    2994:	d1 c0       	rjmp	.+418    	; 0x2b38 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	28 2f       	mov	r18, r24
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	3d 83       	std	Y+5, r19	; 0x05
    299e:	2c 83       	std	Y+4, r18	; 0x04
    29a0:	8c 81       	ldd	r24, Y+4	; 0x04
    29a2:	9d 81       	ldd	r25, Y+5	; 0x05
    29a4:	81 30       	cpi	r24, 0x01	; 1
    29a6:	91 05       	cpc	r25, r1
    29a8:	09 f4       	brne	.+2      	; 0x29ac <GPIO_setupPinDirection+0x3a>
    29aa:	43 c0       	rjmp	.+134    	; 0x2a32 <GPIO_setupPinDirection+0xc0>
    29ac:	2c 81       	ldd	r18, Y+4	; 0x04
    29ae:	3d 81       	ldd	r19, Y+5	; 0x05
    29b0:	22 30       	cpi	r18, 0x02	; 2
    29b2:	31 05       	cpc	r19, r1
    29b4:	2c f4       	brge	.+10     	; 0x29c0 <GPIO_setupPinDirection+0x4e>
    29b6:	8c 81       	ldd	r24, Y+4	; 0x04
    29b8:	9d 81       	ldd	r25, Y+5	; 0x05
    29ba:	00 97       	sbiw	r24, 0x00	; 0
    29bc:	71 f0       	breq	.+28     	; 0x29da <GPIO_setupPinDirection+0x68>
    29be:	bc c0       	rjmp	.+376    	; 0x2b38 <GPIO_setupPinDirection+0x1c6>
    29c0:	2c 81       	ldd	r18, Y+4	; 0x04
    29c2:	3d 81       	ldd	r19, Y+5	; 0x05
    29c4:	22 30       	cpi	r18, 0x02	; 2
    29c6:	31 05       	cpc	r19, r1
    29c8:	09 f4       	brne	.+2      	; 0x29cc <GPIO_setupPinDirection+0x5a>
    29ca:	5f c0       	rjmp	.+190    	; 0x2a8a <GPIO_setupPinDirection+0x118>
    29cc:	8c 81       	ldd	r24, Y+4	; 0x04
    29ce:	9d 81       	ldd	r25, Y+5	; 0x05
    29d0:	83 30       	cpi	r24, 0x03	; 3
    29d2:	91 05       	cpc	r25, r1
    29d4:	09 f4       	brne	.+2      	; 0x29d8 <GPIO_setupPinDirection+0x66>
    29d6:	85 c0       	rjmp	.+266    	; 0x2ae2 <GPIO_setupPinDirection+0x170>
    29d8:	af c0       	rjmp	.+350    	; 0x2b38 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	81 30       	cpi	r24, 0x01	; 1
    29de:	a1 f4       	brne	.+40     	; 0x2a08 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    29e0:	aa e3       	ldi	r26, 0x3A	; 58
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	ea e3       	ldi	r30, 0x3A	; 58
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
    29ea:	48 2f       	mov	r20, r24
    29ec:	8a 81       	ldd	r24, Y+2	; 0x02
    29ee:	28 2f       	mov	r18, r24
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	02 2e       	mov	r0, r18
    29f8:	02 c0       	rjmp	.+4      	; 0x29fe <GPIO_setupPinDirection+0x8c>
    29fa:	88 0f       	add	r24, r24
    29fc:	99 1f       	adc	r25, r25
    29fe:	0a 94       	dec	r0
    2a00:	e2 f7       	brpl	.-8      	; 0x29fa <GPIO_setupPinDirection+0x88>
    2a02:	84 2b       	or	r24, r20
    2a04:	8c 93       	st	X, r24
    2a06:	98 c0       	rjmp	.+304    	; 0x2b38 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2a08:	aa e3       	ldi	r26, 0x3A	; 58
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	ea e3       	ldi	r30, 0x3A	; 58
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	48 2f       	mov	r20, r24
    2a14:	8a 81       	ldd	r24, Y+2	; 0x02
    2a16:	28 2f       	mov	r18, r24
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	02 2e       	mov	r0, r18
    2a20:	02 c0       	rjmp	.+4      	; 0x2a26 <GPIO_setupPinDirection+0xb4>
    2a22:	88 0f       	add	r24, r24
    2a24:	99 1f       	adc	r25, r25
    2a26:	0a 94       	dec	r0
    2a28:	e2 f7       	brpl	.-8      	; 0x2a22 <GPIO_setupPinDirection+0xb0>
    2a2a:	80 95       	com	r24
    2a2c:	84 23       	and	r24, r20
    2a2e:	8c 93       	st	X, r24
    2a30:	83 c0       	rjmp	.+262    	; 0x2b38 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2a32:	8b 81       	ldd	r24, Y+3	; 0x03
    2a34:	81 30       	cpi	r24, 0x01	; 1
    2a36:	a1 f4       	brne	.+40     	; 0x2a60 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2a38:	a7 e3       	ldi	r26, 0x37	; 55
    2a3a:	b0 e0       	ldi	r27, 0x00	; 0
    2a3c:	e7 e3       	ldi	r30, 0x37	; 55
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	80 81       	ld	r24, Z
    2a42:	48 2f       	mov	r20, r24
    2a44:	8a 81       	ldd	r24, Y+2	; 0x02
    2a46:	28 2f       	mov	r18, r24
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	02 2e       	mov	r0, r18
    2a50:	02 c0       	rjmp	.+4      	; 0x2a56 <GPIO_setupPinDirection+0xe4>
    2a52:	88 0f       	add	r24, r24
    2a54:	99 1f       	adc	r25, r25
    2a56:	0a 94       	dec	r0
    2a58:	e2 f7       	brpl	.-8      	; 0x2a52 <GPIO_setupPinDirection+0xe0>
    2a5a:	84 2b       	or	r24, r20
    2a5c:	8c 93       	st	X, r24
    2a5e:	6c c0       	rjmp	.+216    	; 0x2b38 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2a60:	a7 e3       	ldi	r26, 0x37	; 55
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	e7 e3       	ldi	r30, 0x37	; 55
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	48 2f       	mov	r20, r24
    2a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6e:	28 2f       	mov	r18, r24
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	02 2e       	mov	r0, r18
    2a78:	02 c0       	rjmp	.+4      	; 0x2a7e <GPIO_setupPinDirection+0x10c>
    2a7a:	88 0f       	add	r24, r24
    2a7c:	99 1f       	adc	r25, r25
    2a7e:	0a 94       	dec	r0
    2a80:	e2 f7       	brpl	.-8      	; 0x2a7a <GPIO_setupPinDirection+0x108>
    2a82:	80 95       	com	r24
    2a84:	84 23       	and	r24, r20
    2a86:	8c 93       	st	X, r24
    2a88:	57 c0       	rjmp	.+174    	; 0x2b38 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8c:	81 30       	cpi	r24, 0x01	; 1
    2a8e:	a1 f4       	brne	.+40     	; 0x2ab8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2a90:	a4 e3       	ldi	r26, 0x34	; 52
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	e4 e3       	ldi	r30, 0x34	; 52
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	48 2f       	mov	r20, r24
    2a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9e:	28 2f       	mov	r18, r24
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	02 2e       	mov	r0, r18
    2aa8:	02 c0       	rjmp	.+4      	; 0x2aae <GPIO_setupPinDirection+0x13c>
    2aaa:	88 0f       	add	r24, r24
    2aac:	99 1f       	adc	r25, r25
    2aae:	0a 94       	dec	r0
    2ab0:	e2 f7       	brpl	.-8      	; 0x2aaa <GPIO_setupPinDirection+0x138>
    2ab2:	84 2b       	or	r24, r20
    2ab4:	8c 93       	st	X, r24
    2ab6:	40 c0       	rjmp	.+128    	; 0x2b38 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2ab8:	a4 e3       	ldi	r26, 0x34	; 52
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	e4 e3       	ldi	r30, 0x34	; 52
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	48 2f       	mov	r20, r24
    2ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac6:	28 2f       	mov	r18, r24
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	02 2e       	mov	r0, r18
    2ad0:	02 c0       	rjmp	.+4      	; 0x2ad6 <GPIO_setupPinDirection+0x164>
    2ad2:	88 0f       	add	r24, r24
    2ad4:	99 1f       	adc	r25, r25
    2ad6:	0a 94       	dec	r0
    2ad8:	e2 f7       	brpl	.-8      	; 0x2ad2 <GPIO_setupPinDirection+0x160>
    2ada:	80 95       	com	r24
    2adc:	84 23       	and	r24, r20
    2ade:	8c 93       	st	X, r24
    2ae0:	2b c0       	rjmp	.+86     	; 0x2b38 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae4:	81 30       	cpi	r24, 0x01	; 1
    2ae6:	a1 f4       	brne	.+40     	; 0x2b10 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2ae8:	a1 e3       	ldi	r26, 0x31	; 49
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	e1 e3       	ldi	r30, 0x31	; 49
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
    2af2:	48 2f       	mov	r20, r24
    2af4:	8a 81       	ldd	r24, Y+2	; 0x02
    2af6:	28 2f       	mov	r18, r24
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	02 2e       	mov	r0, r18
    2b00:	02 c0       	rjmp	.+4      	; 0x2b06 <GPIO_setupPinDirection+0x194>
    2b02:	88 0f       	add	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	0a 94       	dec	r0
    2b08:	e2 f7       	brpl	.-8      	; 0x2b02 <GPIO_setupPinDirection+0x190>
    2b0a:	84 2b       	or	r24, r20
    2b0c:	8c 93       	st	X, r24
    2b0e:	14 c0       	rjmp	.+40     	; 0x2b38 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2b10:	a1 e3       	ldi	r26, 0x31	; 49
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	e1 e3       	ldi	r30, 0x31	; 49
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	48 2f       	mov	r20, r24
    2b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1e:	28 2f       	mov	r18, r24
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	02 2e       	mov	r0, r18
    2b28:	02 c0       	rjmp	.+4      	; 0x2b2e <GPIO_setupPinDirection+0x1bc>
    2b2a:	88 0f       	add	r24, r24
    2b2c:	99 1f       	adc	r25, r25
    2b2e:	0a 94       	dec	r0
    2b30:	e2 f7       	brpl	.-8      	; 0x2b2a <GPIO_setupPinDirection+0x1b8>
    2b32:	80 95       	com	r24
    2b34:	84 23       	and	r24, r20
    2b36:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2b38:	0f 90       	pop	r0
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	0f 90       	pop	r0
    2b40:	0f 90       	pop	r0
    2b42:	cf 91       	pop	r28
    2b44:	df 91       	pop	r29
    2b46:	08 95       	ret

00002b48 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2b48:	df 93       	push	r29
    2b4a:	cf 93       	push	r28
    2b4c:	00 d0       	rcall	.+0      	; 0x2b4e <GPIO_writePin+0x6>
    2b4e:	00 d0       	rcall	.+0      	; 0x2b50 <GPIO_writePin+0x8>
    2b50:	0f 92       	push	r0
    2b52:	cd b7       	in	r28, 0x3d	; 61
    2b54:	de b7       	in	r29, 0x3e	; 62
    2b56:	89 83       	std	Y+1, r24	; 0x01
    2b58:	6a 83       	std	Y+2, r22	; 0x02
    2b5a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5e:	88 30       	cpi	r24, 0x08	; 8
    2b60:	08 f0       	brcs	.+2      	; 0x2b64 <GPIO_writePin+0x1c>
    2b62:	d5 c0       	rjmp	.+426    	; 0x2d0e <GPIO_writePin+0x1c6>
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	84 30       	cpi	r24, 0x04	; 4
    2b68:	08 f0       	brcs	.+2      	; 0x2b6c <GPIO_writePin+0x24>
    2b6a:	d1 c0       	rjmp	.+418    	; 0x2d0e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2b6c:	89 81       	ldd	r24, Y+1	; 0x01
    2b6e:	28 2f       	mov	r18, r24
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	3d 83       	std	Y+5, r19	; 0x05
    2b74:	2c 83       	std	Y+4, r18	; 0x04
    2b76:	8c 81       	ldd	r24, Y+4	; 0x04
    2b78:	9d 81       	ldd	r25, Y+5	; 0x05
    2b7a:	81 30       	cpi	r24, 0x01	; 1
    2b7c:	91 05       	cpc	r25, r1
    2b7e:	09 f4       	brne	.+2      	; 0x2b82 <GPIO_writePin+0x3a>
    2b80:	43 c0       	rjmp	.+134    	; 0x2c08 <GPIO_writePin+0xc0>
    2b82:	2c 81       	ldd	r18, Y+4	; 0x04
    2b84:	3d 81       	ldd	r19, Y+5	; 0x05
    2b86:	22 30       	cpi	r18, 0x02	; 2
    2b88:	31 05       	cpc	r19, r1
    2b8a:	2c f4       	brge	.+10     	; 0x2b96 <GPIO_writePin+0x4e>
    2b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b90:	00 97       	sbiw	r24, 0x00	; 0
    2b92:	71 f0       	breq	.+28     	; 0x2bb0 <GPIO_writePin+0x68>
    2b94:	bc c0       	rjmp	.+376    	; 0x2d0e <GPIO_writePin+0x1c6>
    2b96:	2c 81       	ldd	r18, Y+4	; 0x04
    2b98:	3d 81       	ldd	r19, Y+5	; 0x05
    2b9a:	22 30       	cpi	r18, 0x02	; 2
    2b9c:	31 05       	cpc	r19, r1
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <GPIO_writePin+0x5a>
    2ba0:	5f c0       	rjmp	.+190    	; 0x2c60 <GPIO_writePin+0x118>
    2ba2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ba6:	83 30       	cpi	r24, 0x03	; 3
    2ba8:	91 05       	cpc	r25, r1
    2baa:	09 f4       	brne	.+2      	; 0x2bae <GPIO_writePin+0x66>
    2bac:	85 c0       	rjmp	.+266    	; 0x2cb8 <GPIO_writePin+0x170>
    2bae:	af c0       	rjmp	.+350    	; 0x2d0e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb2:	81 30       	cpi	r24, 0x01	; 1
    2bb4:	a1 f4       	brne	.+40     	; 0x2bde <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2bb6:	ab e3       	ldi	r26, 0x3B	; 59
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	eb e3       	ldi	r30, 0x3B	; 59
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
    2bc0:	48 2f       	mov	r20, r24
    2bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc4:	28 2f       	mov	r18, r24
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	02 2e       	mov	r0, r18
    2bce:	02 c0       	rjmp	.+4      	; 0x2bd4 <GPIO_writePin+0x8c>
    2bd0:	88 0f       	add	r24, r24
    2bd2:	99 1f       	adc	r25, r25
    2bd4:	0a 94       	dec	r0
    2bd6:	e2 f7       	brpl	.-8      	; 0x2bd0 <GPIO_writePin+0x88>
    2bd8:	84 2b       	or	r24, r20
    2bda:	8c 93       	st	X, r24
    2bdc:	98 c0       	rjmp	.+304    	; 0x2d0e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2bde:	ab e3       	ldi	r26, 0x3B	; 59
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	eb e3       	ldi	r30, 0x3B	; 59
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	48 2f       	mov	r20, r24
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	28 2f       	mov	r18, r24
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	02 2e       	mov	r0, r18
    2bf6:	02 c0       	rjmp	.+4      	; 0x2bfc <GPIO_writePin+0xb4>
    2bf8:	88 0f       	add	r24, r24
    2bfa:	99 1f       	adc	r25, r25
    2bfc:	0a 94       	dec	r0
    2bfe:	e2 f7       	brpl	.-8      	; 0x2bf8 <GPIO_writePin+0xb0>
    2c00:	80 95       	com	r24
    2c02:	84 23       	and	r24, r20
    2c04:	8c 93       	st	X, r24
    2c06:	83 c0       	rjmp	.+262    	; 0x2d0e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2c08:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0a:	81 30       	cpi	r24, 0x01	; 1
    2c0c:	a1 f4       	brne	.+40     	; 0x2c36 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2c0e:	a8 e3       	ldi	r26, 0x38	; 56
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	e8 e3       	ldi	r30, 0x38	; 56
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	48 2f       	mov	r20, r24
    2c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1c:	28 2f       	mov	r18, r24
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	02 2e       	mov	r0, r18
    2c26:	02 c0       	rjmp	.+4      	; 0x2c2c <GPIO_writePin+0xe4>
    2c28:	88 0f       	add	r24, r24
    2c2a:	99 1f       	adc	r25, r25
    2c2c:	0a 94       	dec	r0
    2c2e:	e2 f7       	brpl	.-8      	; 0x2c28 <GPIO_writePin+0xe0>
    2c30:	84 2b       	or	r24, r20
    2c32:	8c 93       	st	X, r24
    2c34:	6c c0       	rjmp	.+216    	; 0x2d0e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2c36:	a8 e3       	ldi	r26, 0x38	; 56
    2c38:	b0 e0       	ldi	r27, 0x00	; 0
    2c3a:	e8 e3       	ldi	r30, 0x38	; 56
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	80 81       	ld	r24, Z
    2c40:	48 2f       	mov	r20, r24
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	28 2f       	mov	r18, r24
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	02 2e       	mov	r0, r18
    2c4e:	02 c0       	rjmp	.+4      	; 0x2c54 <GPIO_writePin+0x10c>
    2c50:	88 0f       	add	r24, r24
    2c52:	99 1f       	adc	r25, r25
    2c54:	0a 94       	dec	r0
    2c56:	e2 f7       	brpl	.-8      	; 0x2c50 <GPIO_writePin+0x108>
    2c58:	80 95       	com	r24
    2c5a:	84 23       	and	r24, r20
    2c5c:	8c 93       	st	X, r24
    2c5e:	57 c0       	rjmp	.+174    	; 0x2d0e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2c60:	8b 81       	ldd	r24, Y+3	; 0x03
    2c62:	81 30       	cpi	r24, 0x01	; 1
    2c64:	a1 f4       	brne	.+40     	; 0x2c8e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2c66:	a5 e3       	ldi	r26, 0x35	; 53
    2c68:	b0 e0       	ldi	r27, 0x00	; 0
    2c6a:	e5 e3       	ldi	r30, 0x35	; 53
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	80 81       	ld	r24, Z
    2c70:	48 2f       	mov	r20, r24
    2c72:	8a 81       	ldd	r24, Y+2	; 0x02
    2c74:	28 2f       	mov	r18, r24
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	02 2e       	mov	r0, r18
    2c7e:	02 c0       	rjmp	.+4      	; 0x2c84 <GPIO_writePin+0x13c>
    2c80:	88 0f       	add	r24, r24
    2c82:	99 1f       	adc	r25, r25
    2c84:	0a 94       	dec	r0
    2c86:	e2 f7       	brpl	.-8      	; 0x2c80 <GPIO_writePin+0x138>
    2c88:	84 2b       	or	r24, r20
    2c8a:	8c 93       	st	X, r24
    2c8c:	40 c0       	rjmp	.+128    	; 0x2d0e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2c8e:	a5 e3       	ldi	r26, 0x35	; 53
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	e5 e3       	ldi	r30, 0x35	; 53
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
    2c98:	48 2f       	mov	r20, r24
    2c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9c:	28 2f       	mov	r18, r24
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	02 2e       	mov	r0, r18
    2ca6:	02 c0       	rjmp	.+4      	; 0x2cac <GPIO_writePin+0x164>
    2ca8:	88 0f       	add	r24, r24
    2caa:	99 1f       	adc	r25, r25
    2cac:	0a 94       	dec	r0
    2cae:	e2 f7       	brpl	.-8      	; 0x2ca8 <GPIO_writePin+0x160>
    2cb0:	80 95       	com	r24
    2cb2:	84 23       	and	r24, r20
    2cb4:	8c 93       	st	X, r24
    2cb6:	2b c0       	rjmp	.+86     	; 0x2d0e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cba:	81 30       	cpi	r24, 0x01	; 1
    2cbc:	a1 f4       	brne	.+40     	; 0x2ce6 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2cbe:	a2 e3       	ldi	r26, 0x32	; 50
    2cc0:	b0 e0       	ldi	r27, 0x00	; 0
    2cc2:	e2 e3       	ldi	r30, 0x32	; 50
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	80 81       	ld	r24, Z
    2cc8:	48 2f       	mov	r20, r24
    2cca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ccc:	28 2f       	mov	r18, r24
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	02 2e       	mov	r0, r18
    2cd6:	02 c0       	rjmp	.+4      	; 0x2cdc <GPIO_writePin+0x194>
    2cd8:	88 0f       	add	r24, r24
    2cda:	99 1f       	adc	r25, r25
    2cdc:	0a 94       	dec	r0
    2cde:	e2 f7       	brpl	.-8      	; 0x2cd8 <GPIO_writePin+0x190>
    2ce0:	84 2b       	or	r24, r20
    2ce2:	8c 93       	st	X, r24
    2ce4:	14 c0       	rjmp	.+40     	; 0x2d0e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2ce6:	a2 e3       	ldi	r26, 0x32	; 50
    2ce8:	b0 e0       	ldi	r27, 0x00	; 0
    2cea:	e2 e3       	ldi	r30, 0x32	; 50
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	80 81       	ld	r24, Z
    2cf0:	48 2f       	mov	r20, r24
    2cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf4:	28 2f       	mov	r18, r24
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	02 2e       	mov	r0, r18
    2cfe:	02 c0       	rjmp	.+4      	; 0x2d04 <GPIO_writePin+0x1bc>
    2d00:	88 0f       	add	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	0a 94       	dec	r0
    2d06:	e2 f7       	brpl	.-8      	; 0x2d00 <GPIO_writePin+0x1b8>
    2d08:	80 95       	com	r24
    2d0a:	84 23       	and	r24, r20
    2d0c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	08 95       	ret

00002d1e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	00 d0       	rcall	.+0      	; 0x2d24 <GPIO_readPin+0x6>
    2d24:	00 d0       	rcall	.+0      	; 0x2d26 <GPIO_readPin+0x8>
    2d26:	0f 92       	push	r0
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
    2d2c:	8a 83       	std	Y+2, r24	; 0x02
    2d2e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2d30:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2d32:	8b 81       	ldd	r24, Y+3	; 0x03
    2d34:	88 30       	cpi	r24, 0x08	; 8
    2d36:	08 f0       	brcs	.+2      	; 0x2d3a <GPIO_readPin+0x1c>
    2d38:	84 c0       	rjmp	.+264    	; 0x2e42 <GPIO_readPin+0x124>
    2d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3c:	84 30       	cpi	r24, 0x04	; 4
    2d3e:	08 f0       	brcs	.+2      	; 0x2d42 <GPIO_readPin+0x24>
    2d40:	80 c0       	rjmp	.+256    	; 0x2e42 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2d42:	8a 81       	ldd	r24, Y+2	; 0x02
    2d44:	28 2f       	mov	r18, r24
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	3d 83       	std	Y+5, r19	; 0x05
    2d4a:	2c 83       	std	Y+4, r18	; 0x04
    2d4c:	4c 81       	ldd	r20, Y+4	; 0x04
    2d4e:	5d 81       	ldd	r21, Y+5	; 0x05
    2d50:	41 30       	cpi	r20, 0x01	; 1
    2d52:	51 05       	cpc	r21, r1
    2d54:	79 f1       	breq	.+94     	; 0x2db4 <GPIO_readPin+0x96>
    2d56:	8c 81       	ldd	r24, Y+4	; 0x04
    2d58:	9d 81       	ldd	r25, Y+5	; 0x05
    2d5a:	82 30       	cpi	r24, 0x02	; 2
    2d5c:	91 05       	cpc	r25, r1
    2d5e:	34 f4       	brge	.+12     	; 0x2d6c <GPIO_readPin+0x4e>
    2d60:	2c 81       	ldd	r18, Y+4	; 0x04
    2d62:	3d 81       	ldd	r19, Y+5	; 0x05
    2d64:	21 15       	cp	r18, r1
    2d66:	31 05       	cpc	r19, r1
    2d68:	69 f0       	breq	.+26     	; 0x2d84 <GPIO_readPin+0x66>
    2d6a:	6b c0       	rjmp	.+214    	; 0x2e42 <GPIO_readPin+0x124>
    2d6c:	4c 81       	ldd	r20, Y+4	; 0x04
    2d6e:	5d 81       	ldd	r21, Y+5	; 0x05
    2d70:	42 30       	cpi	r20, 0x02	; 2
    2d72:	51 05       	cpc	r21, r1
    2d74:	b9 f1       	breq	.+110    	; 0x2de4 <GPIO_readPin+0xc6>
    2d76:	8c 81       	ldd	r24, Y+4	; 0x04
    2d78:	9d 81       	ldd	r25, Y+5	; 0x05
    2d7a:	83 30       	cpi	r24, 0x03	; 3
    2d7c:	91 05       	cpc	r25, r1
    2d7e:	09 f4       	brne	.+2      	; 0x2d82 <GPIO_readPin+0x64>
    2d80:	49 c0       	rjmp	.+146    	; 0x2e14 <GPIO_readPin+0xf6>
    2d82:	5f c0       	rjmp	.+190    	; 0x2e42 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2d84:	e9 e3       	ldi	r30, 0x39	; 57
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	80 81       	ld	r24, Z
    2d8a:	28 2f       	mov	r18, r24
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d90:	88 2f       	mov	r24, r24
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	a9 01       	movw	r20, r18
    2d96:	02 c0       	rjmp	.+4      	; 0x2d9c <GPIO_readPin+0x7e>
    2d98:	55 95       	asr	r21
    2d9a:	47 95       	ror	r20
    2d9c:	8a 95       	dec	r24
    2d9e:	e2 f7       	brpl	.-8      	; 0x2d98 <GPIO_readPin+0x7a>
    2da0:	ca 01       	movw	r24, r20
    2da2:	81 70       	andi	r24, 0x01	; 1
    2da4:	90 70       	andi	r25, 0x00	; 0
    2da6:	88 23       	and	r24, r24
    2da8:	19 f0       	breq	.+6      	; 0x2db0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	89 83       	std	Y+1, r24	; 0x01
    2dae:	49 c0       	rjmp	.+146    	; 0x2e42 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2db0:	19 82       	std	Y+1, r1	; 0x01
    2db2:	47 c0       	rjmp	.+142    	; 0x2e42 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2db4:	e6 e3       	ldi	r30, 0x36	; 54
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	80 81       	ld	r24, Z
    2dba:	28 2f       	mov	r18, r24
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	88 2f       	mov	r24, r24
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	a9 01       	movw	r20, r18
    2dc6:	02 c0       	rjmp	.+4      	; 0x2dcc <GPIO_readPin+0xae>
    2dc8:	55 95       	asr	r21
    2dca:	47 95       	ror	r20
    2dcc:	8a 95       	dec	r24
    2dce:	e2 f7       	brpl	.-8      	; 0x2dc8 <GPIO_readPin+0xaa>
    2dd0:	ca 01       	movw	r24, r20
    2dd2:	81 70       	andi	r24, 0x01	; 1
    2dd4:	90 70       	andi	r25, 0x00	; 0
    2dd6:	88 23       	and	r24, r24
    2dd8:	19 f0       	breq	.+6      	; 0x2de0 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	89 83       	std	Y+1, r24	; 0x01
    2dde:	31 c0       	rjmp	.+98     	; 0x2e42 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2de0:	19 82       	std	Y+1, r1	; 0x01
    2de2:	2f c0       	rjmp	.+94     	; 0x2e42 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2de4:	e3 e3       	ldi	r30, 0x33	; 51
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	80 81       	ld	r24, Z
    2dea:	28 2f       	mov	r18, r24
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	8b 81       	ldd	r24, Y+3	; 0x03
    2df0:	88 2f       	mov	r24, r24
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	a9 01       	movw	r20, r18
    2df6:	02 c0       	rjmp	.+4      	; 0x2dfc <GPIO_readPin+0xde>
    2df8:	55 95       	asr	r21
    2dfa:	47 95       	ror	r20
    2dfc:	8a 95       	dec	r24
    2dfe:	e2 f7       	brpl	.-8      	; 0x2df8 <GPIO_readPin+0xda>
    2e00:	ca 01       	movw	r24, r20
    2e02:	81 70       	andi	r24, 0x01	; 1
    2e04:	90 70       	andi	r25, 0x00	; 0
    2e06:	88 23       	and	r24, r24
    2e08:	19 f0       	breq	.+6      	; 0x2e10 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	89 83       	std	Y+1, r24	; 0x01
    2e0e:	19 c0       	rjmp	.+50     	; 0x2e42 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2e10:	19 82       	std	Y+1, r1	; 0x01
    2e12:	17 c0       	rjmp	.+46     	; 0x2e42 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2e14:	e0 e3       	ldi	r30, 0x30	; 48
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	28 2f       	mov	r18, r24
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e20:	88 2f       	mov	r24, r24
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	a9 01       	movw	r20, r18
    2e26:	02 c0       	rjmp	.+4      	; 0x2e2c <GPIO_readPin+0x10e>
    2e28:	55 95       	asr	r21
    2e2a:	47 95       	ror	r20
    2e2c:	8a 95       	dec	r24
    2e2e:	e2 f7       	brpl	.-8      	; 0x2e28 <GPIO_readPin+0x10a>
    2e30:	ca 01       	movw	r24, r20
    2e32:	81 70       	andi	r24, 0x01	; 1
    2e34:	90 70       	andi	r25, 0x00	; 0
    2e36:	88 23       	and	r24, r24
    2e38:	19 f0       	breq	.+6      	; 0x2e40 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	89 83       	std	Y+1, r24	; 0x01
    2e3e:	01 c0       	rjmp	.+2      	; 0x2e42 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2e40:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2e42:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	0f 90       	pop	r0
    2e4c:	0f 90       	pop	r0
    2e4e:	cf 91       	pop	r28
    2e50:	df 91       	pop	r29
    2e52:	08 95       	ret

00002e54 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2e54:	df 93       	push	r29
    2e56:	cf 93       	push	r28
    2e58:	00 d0       	rcall	.+0      	; 0x2e5a <GPIO_setupPortDirection+0x6>
    2e5a:	00 d0       	rcall	.+0      	; 0x2e5c <GPIO_setupPortDirection+0x8>
    2e5c:	cd b7       	in	r28, 0x3d	; 61
    2e5e:	de b7       	in	r29, 0x3e	; 62
    2e60:	89 83       	std	Y+1, r24	; 0x01
    2e62:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2e64:	89 81       	ldd	r24, Y+1	; 0x01
    2e66:	84 30       	cpi	r24, 0x04	; 4
    2e68:	90 f5       	brcc	.+100    	; 0x2ece <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	28 2f       	mov	r18, r24
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	3c 83       	std	Y+4, r19	; 0x04
    2e72:	2b 83       	std	Y+3, r18	; 0x03
    2e74:	8b 81       	ldd	r24, Y+3	; 0x03
    2e76:	9c 81       	ldd	r25, Y+4	; 0x04
    2e78:	81 30       	cpi	r24, 0x01	; 1
    2e7a:	91 05       	cpc	r25, r1
    2e7c:	d1 f0       	breq	.+52     	; 0x2eb2 <GPIO_setupPortDirection+0x5e>
    2e7e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e80:	3c 81       	ldd	r19, Y+4	; 0x04
    2e82:	22 30       	cpi	r18, 0x02	; 2
    2e84:	31 05       	cpc	r19, r1
    2e86:	2c f4       	brge	.+10     	; 0x2e92 <GPIO_setupPortDirection+0x3e>
    2e88:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8c:	00 97       	sbiw	r24, 0x00	; 0
    2e8e:	61 f0       	breq	.+24     	; 0x2ea8 <GPIO_setupPortDirection+0x54>
    2e90:	1e c0       	rjmp	.+60     	; 0x2ece <GPIO_setupPortDirection+0x7a>
    2e92:	2b 81       	ldd	r18, Y+3	; 0x03
    2e94:	3c 81       	ldd	r19, Y+4	; 0x04
    2e96:	22 30       	cpi	r18, 0x02	; 2
    2e98:	31 05       	cpc	r19, r1
    2e9a:	81 f0       	breq	.+32     	; 0x2ebc <GPIO_setupPortDirection+0x68>
    2e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea0:	83 30       	cpi	r24, 0x03	; 3
    2ea2:	91 05       	cpc	r25, r1
    2ea4:	81 f0       	breq	.+32     	; 0x2ec6 <GPIO_setupPortDirection+0x72>
    2ea6:	13 c0       	rjmp	.+38     	; 0x2ece <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2ea8:	ea e3       	ldi	r30, 0x3A	; 58
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	8a 81       	ldd	r24, Y+2	; 0x02
    2eae:	80 83       	st	Z, r24
    2eb0:	0e c0       	rjmp	.+28     	; 0x2ece <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2eb2:	e7 e3       	ldi	r30, 0x37	; 55
    2eb4:	f0 e0       	ldi	r31, 0x00	; 0
    2eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb8:	80 83       	st	Z, r24
    2eba:	09 c0       	rjmp	.+18     	; 0x2ece <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2ebc:	e4 e3       	ldi	r30, 0x34	; 52
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec2:	80 83       	st	Z, r24
    2ec4:	04 c0       	rjmp	.+8      	; 0x2ece <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2ec6:	e1 e3       	ldi	r30, 0x31	; 49
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ecc:	80 83       	st	Z, r24
			break;
		}
	}
}
    2ece:	0f 90       	pop	r0
    2ed0:	0f 90       	pop	r0
    2ed2:	0f 90       	pop	r0
    2ed4:	0f 90       	pop	r0
    2ed6:	cf 91       	pop	r28
    2ed8:	df 91       	pop	r29
    2eda:	08 95       	ret

00002edc <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2edc:	df 93       	push	r29
    2ede:	cf 93       	push	r28
    2ee0:	00 d0       	rcall	.+0      	; 0x2ee2 <GPIO_writePort+0x6>
    2ee2:	00 d0       	rcall	.+0      	; 0x2ee4 <GPIO_writePort+0x8>
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
    2ee8:	89 83       	std	Y+1, r24	; 0x01
    2eea:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	84 30       	cpi	r24, 0x04	; 4
    2ef0:	90 f5       	brcc	.+100    	; 0x2f56 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2ef2:	89 81       	ldd	r24, Y+1	; 0x01
    2ef4:	28 2f       	mov	r18, r24
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	3c 83       	std	Y+4, r19	; 0x04
    2efa:	2b 83       	std	Y+3, r18	; 0x03
    2efc:	8b 81       	ldd	r24, Y+3	; 0x03
    2efe:	9c 81       	ldd	r25, Y+4	; 0x04
    2f00:	81 30       	cpi	r24, 0x01	; 1
    2f02:	91 05       	cpc	r25, r1
    2f04:	d1 f0       	breq	.+52     	; 0x2f3a <GPIO_writePort+0x5e>
    2f06:	2b 81       	ldd	r18, Y+3	; 0x03
    2f08:	3c 81       	ldd	r19, Y+4	; 0x04
    2f0a:	22 30       	cpi	r18, 0x02	; 2
    2f0c:	31 05       	cpc	r19, r1
    2f0e:	2c f4       	brge	.+10     	; 0x2f1a <GPIO_writePort+0x3e>
    2f10:	8b 81       	ldd	r24, Y+3	; 0x03
    2f12:	9c 81       	ldd	r25, Y+4	; 0x04
    2f14:	00 97       	sbiw	r24, 0x00	; 0
    2f16:	61 f0       	breq	.+24     	; 0x2f30 <GPIO_writePort+0x54>
    2f18:	1e c0       	rjmp	.+60     	; 0x2f56 <GPIO_writePort+0x7a>
    2f1a:	2b 81       	ldd	r18, Y+3	; 0x03
    2f1c:	3c 81       	ldd	r19, Y+4	; 0x04
    2f1e:	22 30       	cpi	r18, 0x02	; 2
    2f20:	31 05       	cpc	r19, r1
    2f22:	81 f0       	breq	.+32     	; 0x2f44 <GPIO_writePort+0x68>
    2f24:	8b 81       	ldd	r24, Y+3	; 0x03
    2f26:	9c 81       	ldd	r25, Y+4	; 0x04
    2f28:	83 30       	cpi	r24, 0x03	; 3
    2f2a:	91 05       	cpc	r25, r1
    2f2c:	81 f0       	breq	.+32     	; 0x2f4e <GPIO_writePort+0x72>
    2f2e:	13 c0       	rjmp	.+38     	; 0x2f56 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2f30:	eb e3       	ldi	r30, 0x3B	; 59
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	8a 81       	ldd	r24, Y+2	; 0x02
    2f36:	80 83       	st	Z, r24
    2f38:	0e c0       	rjmp	.+28     	; 0x2f56 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2f3a:	e8 e3       	ldi	r30, 0x38	; 56
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f40:	80 83       	st	Z, r24
    2f42:	09 c0       	rjmp	.+18     	; 0x2f56 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2f44:	e5 e3       	ldi	r30, 0x35	; 53
    2f46:	f0 e0       	ldi	r31, 0x00	; 0
    2f48:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4a:	80 83       	st	Z, r24
    2f4c:	04 c0       	rjmp	.+8      	; 0x2f56 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2f4e:	e2 e3       	ldi	r30, 0x32	; 50
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	8a 81       	ldd	r24, Y+2	; 0x02
    2f54:	80 83       	st	Z, r24
			break;
		}
	}
}
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	0f 90       	pop	r0
    2f5e:	cf 91       	pop	r28
    2f60:	df 91       	pop	r29
    2f62:	08 95       	ret

00002f64 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2f64:	df 93       	push	r29
    2f66:	cf 93       	push	r28
    2f68:	00 d0       	rcall	.+0      	; 0x2f6a <GPIO_readPort+0x6>
    2f6a:	00 d0       	rcall	.+0      	; 0x2f6c <GPIO_readPort+0x8>
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2f72:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2f74:	8a 81       	ldd	r24, Y+2	; 0x02
    2f76:	84 30       	cpi	r24, 0x04	; 4
    2f78:	90 f5       	brcc	.+100    	; 0x2fde <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7c:	28 2f       	mov	r18, r24
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	3c 83       	std	Y+4, r19	; 0x04
    2f82:	2b 83       	std	Y+3, r18	; 0x03
    2f84:	8b 81       	ldd	r24, Y+3	; 0x03
    2f86:	9c 81       	ldd	r25, Y+4	; 0x04
    2f88:	81 30       	cpi	r24, 0x01	; 1
    2f8a:	91 05       	cpc	r25, r1
    2f8c:	d1 f0       	breq	.+52     	; 0x2fc2 <GPIO_readPort+0x5e>
    2f8e:	2b 81       	ldd	r18, Y+3	; 0x03
    2f90:	3c 81       	ldd	r19, Y+4	; 0x04
    2f92:	22 30       	cpi	r18, 0x02	; 2
    2f94:	31 05       	cpc	r19, r1
    2f96:	2c f4       	brge	.+10     	; 0x2fa2 <GPIO_readPort+0x3e>
    2f98:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9c:	00 97       	sbiw	r24, 0x00	; 0
    2f9e:	61 f0       	breq	.+24     	; 0x2fb8 <GPIO_readPort+0x54>
    2fa0:	1e c0       	rjmp	.+60     	; 0x2fde <GPIO_readPort+0x7a>
    2fa2:	2b 81       	ldd	r18, Y+3	; 0x03
    2fa4:	3c 81       	ldd	r19, Y+4	; 0x04
    2fa6:	22 30       	cpi	r18, 0x02	; 2
    2fa8:	31 05       	cpc	r19, r1
    2faa:	81 f0       	breq	.+32     	; 0x2fcc <GPIO_readPort+0x68>
    2fac:	8b 81       	ldd	r24, Y+3	; 0x03
    2fae:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb0:	83 30       	cpi	r24, 0x03	; 3
    2fb2:	91 05       	cpc	r25, r1
    2fb4:	81 f0       	breq	.+32     	; 0x2fd6 <GPIO_readPort+0x72>
    2fb6:	13 c0       	rjmp	.+38     	; 0x2fde <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2fb8:	e9 e3       	ldi	r30, 0x39	; 57
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	80 81       	ld	r24, Z
    2fbe:	89 83       	std	Y+1, r24	; 0x01
    2fc0:	0e c0       	rjmp	.+28     	; 0x2fde <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2fc2:	e6 e3       	ldi	r30, 0x36	; 54
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	80 81       	ld	r24, Z
    2fc8:	89 83       	std	Y+1, r24	; 0x01
    2fca:	09 c0       	rjmp	.+18     	; 0x2fde <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2fcc:	e3 e3       	ldi	r30, 0x33	; 51
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	80 81       	ld	r24, Z
    2fd2:	89 83       	std	Y+1, r24	; 0x01
    2fd4:	04 c0       	rjmp	.+8      	; 0x2fde <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2fd6:	e0 e3       	ldi	r30, 0x30	; 48
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
    2fdc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fe0:	0f 90       	pop	r0
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	0f 90       	pop	r0
    2fe8:	cf 91       	pop	r28
    2fea:	df 91       	pop	r29
    2fec:	08 95       	ret

00002fee <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2fee:	df 93       	push	r29
    2ff0:	cf 93       	push	r28
    2ff2:	00 d0       	rcall	.+0      	; 0x2ff4 <KEYPAD_getPressedKey+0x6>
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	60 e0       	ldi	r22, 0x00	; 0
    2ffc:	40 e0       	ldi	r20, 0x00	; 0
    2ffe:	0e 94 b9 14 	call	0x2972	; 0x2972 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	61 e0       	ldi	r22, 0x01	; 1
    3006:	40 e0       	ldi	r20, 0x00	; 0
    3008:	0e 94 b9 14 	call	0x2972	; 0x2972 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    300c:	80 e0       	ldi	r24, 0x00	; 0
    300e:	62 e0       	ldi	r22, 0x02	; 2
    3010:	40 e0       	ldi	r20, 0x00	; 0
    3012:	0e 94 b9 14 	call	0x2972	; 0x2972 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	63 e0       	ldi	r22, 0x03	; 3
    301a:	40 e0       	ldi	r20, 0x00	; 0
    301c:	0e 94 b9 14 	call	0x2972	; 0x2972 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	60 e0       	ldi	r22, 0x00	; 0
    3024:	40 e0       	ldi	r20, 0x00	; 0
    3026:	0e 94 b9 14 	call	0x2972	; 0x2972 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	61 e0       	ldi	r22, 0x01	; 1
    302e:	40 e0       	ldi	r20, 0x00	; 0
    3030:	0e 94 b9 14 	call	0x2972	; 0x2972 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	62 e0       	ldi	r22, 0x02	; 2
    3038:	40 e0       	ldi	r20, 0x00	; 0
    303a:	0e 94 b9 14 	call	0x2972	; 0x2972 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	63 e0       	ldi	r22, 0x03	; 3
    3042:	40 e0       	ldi	r20, 0x00	; 0
    3044:	0e 94 b9 14 	call	0x2972	; 0x2972 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    3048:	19 82       	std	Y+1, r1	; 0x01
    304a:	32 c0       	rjmp	.+100    	; 0x30b0 <KEYPAD_getPressedKey+0xc2>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	69 81       	ldd	r22, Y+1	; 0x01
    3050:	41 e0       	ldi	r20, 0x01	; 1
    3052:	0e 94 b9 14 	call	0x2972	; 0x2972 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    3056:	80 e0       	ldi	r24, 0x00	; 0
    3058:	69 81       	ldd	r22, Y+1	; 0x01
    305a:	40 e0       	ldi	r20, 0x00	; 0
    305c:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    3060:	1a 82       	std	Y+2, r1	; 0x02
    3062:	1b c0       	rjmp	.+54     	; 0x309a <KEYPAD_getPressedKey+0xac>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	6a 81       	ldd	r22, Y+2	; 0x02
    3068:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <GPIO_readPin>
    306c:	88 23       	and	r24, r24
    306e:	91 f4       	brne	.+36     	; 0x3094 <KEYPAD_getPressedKey+0xa6>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	88 2f       	mov	r24, r24
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	88 0f       	add	r24, r24
    3078:	99 1f       	adc	r25, r25
    307a:	88 0f       	add	r24, r24
    307c:	99 1f       	adc	r25, r25
    307e:	98 2f       	mov	r25, r24
    3080:	8a 81       	ldd	r24, Y+2	; 0x02
    3082:	89 0f       	add	r24, r25
    3084:	8f 5f       	subi	r24, 0xFF	; 255
    3086:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    308a:	0f 90       	pop	r0
    308c:	0f 90       	pop	r0
    308e:	cf 91       	pop	r28
    3090:	df 91       	pop	r29
    3092:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    3094:	8a 81       	ldd	r24, Y+2	; 0x02
    3096:	8f 5f       	subi	r24, 0xFF	; 255
    3098:	8a 83       	std	Y+2, r24	; 0x02
    309a:	8a 81       	ldd	r24, Y+2	; 0x02
    309c:	84 30       	cpi	r24, 0x04	; 4
    309e:	10 f3       	brcs	.-60     	; 0x3064 <KEYPAD_getPressedKey+0x76>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	69 81       	ldd	r22, Y+1	; 0x01
    30a4:	40 e0       	ldi	r20, 0x00	; 0
    30a6:	0e 94 b9 14 	call	0x2972	; 0x2972 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	8f 5f       	subi	r24, 0xFF	; 255
    30ae:	89 83       	std	Y+1, r24	; 0x01
    30b0:	89 81       	ldd	r24, Y+1	; 0x01
    30b2:	84 30       	cpi	r24, 0x04	; 4
    30b4:	58 f2       	brcs	.-106    	; 0x304c <KEYPAD_getPressedKey+0x5e>
    30b6:	c8 cf       	rjmp	.-112    	; 0x3048 <KEYPAD_getPressedKey+0x5a>

000030b8 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    30b8:	df 93       	push	r29
    30ba:	cf 93       	push	r28
    30bc:	00 d0       	rcall	.+0      	; 0x30be <KEYPAD_4x4_adjustKeyNumber+0x6>
    30be:	00 d0       	rcall	.+0      	; 0x30c0 <KEYPAD_4x4_adjustKeyNumber+0x8>
    30c0:	cd b7       	in	r28, 0x3d	; 61
    30c2:	de b7       	in	r29, 0x3e	; 62
    30c4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    30c6:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    30c8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ca:	28 2f       	mov	r18, r24
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	3c 83       	std	Y+4, r19	; 0x04
    30d0:	2b 83       	std	Y+3, r18	; 0x03
    30d2:	8b 81       	ldd	r24, Y+3	; 0x03
    30d4:	9c 81       	ldd	r25, Y+4	; 0x04
    30d6:	88 30       	cpi	r24, 0x08	; 8
    30d8:	91 05       	cpc	r25, r1
    30da:	09 f4       	brne	.+2      	; 0x30de <KEYPAD_4x4_adjustKeyNumber+0x26>
    30dc:	70 c0       	rjmp	.+224    	; 0x31be <KEYPAD_4x4_adjustKeyNumber+0x106>
    30de:	2b 81       	ldd	r18, Y+3	; 0x03
    30e0:	3c 81       	ldd	r19, Y+4	; 0x04
    30e2:	29 30       	cpi	r18, 0x09	; 9
    30e4:	31 05       	cpc	r19, r1
    30e6:	5c f5       	brge	.+86     	; 0x313e <KEYPAD_4x4_adjustKeyNumber+0x86>
    30e8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ea:	9c 81       	ldd	r25, Y+4	; 0x04
    30ec:	84 30       	cpi	r24, 0x04	; 4
    30ee:	91 05       	cpc	r25, r1
    30f0:	09 f4       	brne	.+2      	; 0x30f4 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    30f2:	59 c0       	rjmp	.+178    	; 0x31a6 <KEYPAD_4x4_adjustKeyNumber+0xee>
    30f4:	2b 81       	ldd	r18, Y+3	; 0x03
    30f6:	3c 81       	ldd	r19, Y+4	; 0x04
    30f8:	25 30       	cpi	r18, 0x05	; 5
    30fa:	31 05       	cpc	r19, r1
    30fc:	9c f4       	brge	.+38     	; 0x3124 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    30fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3100:	9c 81       	ldd	r25, Y+4	; 0x04
    3102:	82 30       	cpi	r24, 0x02	; 2
    3104:	91 05       	cpc	r25, r1
    3106:	09 f4       	brne	.+2      	; 0x310a <KEYPAD_4x4_adjustKeyNumber+0x52>
    3108:	48 c0       	rjmp	.+144    	; 0x319a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    310a:	2b 81       	ldd	r18, Y+3	; 0x03
    310c:	3c 81       	ldd	r19, Y+4	; 0x04
    310e:	23 30       	cpi	r18, 0x03	; 3
    3110:	31 05       	cpc	r19, r1
    3112:	0c f0       	brlt	.+2      	; 0x3116 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    3114:	45 c0       	rjmp	.+138    	; 0x31a0 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    3116:	8b 81       	ldd	r24, Y+3	; 0x03
    3118:	9c 81       	ldd	r25, Y+4	; 0x04
    311a:	81 30       	cpi	r24, 0x01	; 1
    311c:	91 05       	cpc	r25, r1
    311e:	09 f4       	brne	.+2      	; 0x3122 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    3120:	39 c0       	rjmp	.+114    	; 0x3194 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    3122:	67 c0       	rjmp	.+206    	; 0x31f2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    3124:	2b 81       	ldd	r18, Y+3	; 0x03
    3126:	3c 81       	ldd	r19, Y+4	; 0x04
    3128:	26 30       	cpi	r18, 0x06	; 6
    312a:	31 05       	cpc	r19, r1
    312c:	09 f4       	brne	.+2      	; 0x3130 <KEYPAD_4x4_adjustKeyNumber+0x78>
    312e:	41 c0       	rjmp	.+130    	; 0x31b2 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    3130:	8b 81       	ldd	r24, Y+3	; 0x03
    3132:	9c 81       	ldd	r25, Y+4	; 0x04
    3134:	87 30       	cpi	r24, 0x07	; 7
    3136:	91 05       	cpc	r25, r1
    3138:	0c f0       	brlt	.+2      	; 0x313c <KEYPAD_4x4_adjustKeyNumber+0x84>
    313a:	3e c0       	rjmp	.+124    	; 0x31b8 <KEYPAD_4x4_adjustKeyNumber+0x100>
    313c:	37 c0       	rjmp	.+110    	; 0x31ac <KEYPAD_4x4_adjustKeyNumber+0xf4>
    313e:	2b 81       	ldd	r18, Y+3	; 0x03
    3140:	3c 81       	ldd	r19, Y+4	; 0x04
    3142:	2c 30       	cpi	r18, 0x0C	; 12
    3144:	31 05       	cpc	r19, r1
    3146:	09 f4       	brne	.+2      	; 0x314a <KEYPAD_4x4_adjustKeyNumber+0x92>
    3148:	46 c0       	rjmp	.+140    	; 0x31d6 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    314a:	8b 81       	ldd	r24, Y+3	; 0x03
    314c:	9c 81       	ldd	r25, Y+4	; 0x04
    314e:	8d 30       	cpi	r24, 0x0D	; 13
    3150:	91 05       	cpc	r25, r1
    3152:	5c f4       	brge	.+22     	; 0x316a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    3154:	2b 81       	ldd	r18, Y+3	; 0x03
    3156:	3c 81       	ldd	r19, Y+4	; 0x04
    3158:	2a 30       	cpi	r18, 0x0A	; 10
    315a:	31 05       	cpc	r19, r1
    315c:	b1 f1       	breq	.+108    	; 0x31ca <KEYPAD_4x4_adjustKeyNumber+0x112>
    315e:	8b 81       	ldd	r24, Y+3	; 0x03
    3160:	9c 81       	ldd	r25, Y+4	; 0x04
    3162:	8b 30       	cpi	r24, 0x0B	; 11
    3164:	91 05       	cpc	r25, r1
    3166:	a4 f5       	brge	.+104    	; 0x31d0 <KEYPAD_4x4_adjustKeyNumber+0x118>
    3168:	2d c0       	rjmp	.+90     	; 0x31c4 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    316a:	2b 81       	ldd	r18, Y+3	; 0x03
    316c:	3c 81       	ldd	r19, Y+4	; 0x04
    316e:	2e 30       	cpi	r18, 0x0E	; 14
    3170:	31 05       	cpc	r19, r1
    3172:	b9 f1       	breq	.+110    	; 0x31e2 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    3174:	8b 81       	ldd	r24, Y+3	; 0x03
    3176:	9c 81       	ldd	r25, Y+4	; 0x04
    3178:	8e 30       	cpi	r24, 0x0E	; 14
    317a:	91 05       	cpc	r25, r1
    317c:	7c f1       	brlt	.+94     	; 0x31dc <KEYPAD_4x4_adjustKeyNumber+0x124>
    317e:	2b 81       	ldd	r18, Y+3	; 0x03
    3180:	3c 81       	ldd	r19, Y+4	; 0x04
    3182:	2f 30       	cpi	r18, 0x0F	; 15
    3184:	31 05       	cpc	r19, r1
    3186:	79 f1       	breq	.+94     	; 0x31e6 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    3188:	8b 81       	ldd	r24, Y+3	; 0x03
    318a:	9c 81       	ldd	r25, Y+4	; 0x04
    318c:	80 31       	cpi	r24, 0x10	; 16
    318e:	91 05       	cpc	r25, r1
    3190:	69 f1       	breq	.+90     	; 0x31ec <KEYPAD_4x4_adjustKeyNumber+0x134>
    3192:	2f c0       	rjmp	.+94     	; 0x31f2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    3194:	87 e0       	ldi	r24, 0x07	; 7
    3196:	89 83       	std	Y+1, r24	; 0x01
    3198:	2e c0       	rjmp	.+92     	; 0x31f6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    319a:	88 e0       	ldi	r24, 0x08	; 8
    319c:	89 83       	std	Y+1, r24	; 0x01
    319e:	2b c0       	rjmp	.+86     	; 0x31f6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    31a0:	89 e0       	ldi	r24, 0x09	; 9
    31a2:	89 83       	std	Y+1, r24	; 0x01
    31a4:	28 c0       	rjmp	.+80     	; 0x31f6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    31a6:	85 e2       	ldi	r24, 0x25	; 37
    31a8:	89 83       	std	Y+1, r24	; 0x01
    31aa:	25 c0       	rjmp	.+74     	; 0x31f6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    31ac:	84 e0       	ldi	r24, 0x04	; 4
    31ae:	89 83       	std	Y+1, r24	; 0x01
    31b0:	22 c0       	rjmp	.+68     	; 0x31f6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    31b2:	85 e0       	ldi	r24, 0x05	; 5
    31b4:	89 83       	std	Y+1, r24	; 0x01
    31b6:	1f c0       	rjmp	.+62     	; 0x31f6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    31b8:	86 e0       	ldi	r24, 0x06	; 6
    31ba:	89 83       	std	Y+1, r24	; 0x01
    31bc:	1c c0       	rjmp	.+56     	; 0x31f6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    31be:	8a e2       	ldi	r24, 0x2A	; 42
    31c0:	89 83       	std	Y+1, r24	; 0x01
    31c2:	19 c0       	rjmp	.+50     	; 0x31f6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	89 83       	std	Y+1, r24	; 0x01
    31c8:	16 c0       	rjmp	.+44     	; 0x31f6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    31ca:	82 e0       	ldi	r24, 0x02	; 2
    31cc:	89 83       	std	Y+1, r24	; 0x01
    31ce:	13 c0       	rjmp	.+38     	; 0x31f6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    31d0:	83 e0       	ldi	r24, 0x03	; 3
    31d2:	89 83       	std	Y+1, r24	; 0x01
    31d4:	10 c0       	rjmp	.+32     	; 0x31f6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    31d6:	8d e2       	ldi	r24, 0x2D	; 45
    31d8:	89 83       	std	Y+1, r24	; 0x01
    31da:	0d c0       	rjmp	.+26     	; 0x31f6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    31dc:	8d e0       	ldi	r24, 0x0D	; 13
    31de:	89 83       	std	Y+1, r24	; 0x01
    31e0:	0a c0       	rjmp	.+20     	; 0x31f6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    31e2:	19 82       	std	Y+1, r1	; 0x01
    31e4:	08 c0       	rjmp	.+16     	; 0x31f6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    31e6:	8d e3       	ldi	r24, 0x3D	; 61
    31e8:	89 83       	std	Y+1, r24	; 0x01
    31ea:	05 c0       	rjmp	.+10     	; 0x31f6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    31ec:	8b e2       	ldi	r24, 0x2B	; 43
    31ee:	89 83       	std	Y+1, r24	; 0x01
    31f0:	02 c0       	rjmp	.+4      	; 0x31f6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    31f2:	8a 81       	ldd	r24, Y+2	; 0x02
    31f4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
} 
    31f8:	0f 90       	pop	r0
    31fa:	0f 90       	pop	r0
    31fc:	0f 90       	pop	r0
    31fe:	0f 90       	pop	r0
    3200:	cf 91       	pop	r28
    3202:	df 91       	pop	r29
    3204:	08 95       	ret

00003206 <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void){
    3206:	df 93       	push	r29
    3208:	cf 93       	push	r28
    320a:	cd b7       	in	r28, 0x3d	; 61
    320c:	de b7       	in	r29, 0x3e	; 62
    320e:	2e 97       	sbiw	r28, 0x0e	; 14
    3210:	0f b6       	in	r0, 0x3f	; 63
    3212:	f8 94       	cli
    3214:	de bf       	out	0x3e, r29	; 62
    3216:	0f be       	out	0x3f, r0	; 63
    3218:	cd bf       	out	0x3d, r28	; 61

	/* making the LCD pins output pins and making data port for LCD output pins*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    321a:	83 e0       	ldi	r24, 0x03	; 3
    321c:	66 e0       	ldi	r22, 0x06	; 6
    321e:	41 e0       	ldi	r20, 0x01	; 1
    3220:	0e 94 b9 14 	call	0x2972	; 0x2972 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    3224:	83 e0       	ldi	r24, 0x03	; 3
    3226:	67 e0       	ldi	r22, 0x07	; 7
    3228:	41 e0       	ldi	r20, 0x01	; 1
    322a:	0e 94 b9 14 	call	0x2972	; 0x2972 <GPIO_setupPinDirection>
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PIN_OUTPUT);
    322e:	82 e0       	ldi	r24, 0x02	; 2
    3230:	61 e0       	ldi	r22, 0x01	; 1
    3232:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <GPIO_setupPortDirection>
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	a0 ea       	ldi	r26, 0xA0	; 160
    323c:	b1 e4       	ldi	r27, 0x41	; 65
    323e:	8b 87       	std	Y+11, r24	; 0x0b
    3240:	9c 87       	std	Y+12, r25	; 0x0c
    3242:	ad 87       	std	Y+13, r26	; 0x0d
    3244:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3246:	6b 85       	ldd	r22, Y+11	; 0x0b
    3248:	7c 85       	ldd	r23, Y+12	; 0x0c
    324a:	8d 85       	ldd	r24, Y+13	; 0x0d
    324c:	9e 85       	ldd	r25, Y+14	; 0x0e
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	4a ef       	ldi	r20, 0xFA	; 250
    3254:	54 e4       	ldi	r21, 0x44	; 68
    3256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	8f 83       	std	Y+7, r24	; 0x07
    3260:	98 87       	std	Y+8, r25	; 0x08
    3262:	a9 87       	std	Y+9, r26	; 0x09
    3264:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3266:	6f 81       	ldd	r22, Y+7	; 0x07
    3268:	78 85       	ldd	r23, Y+8	; 0x08
    326a:	89 85       	ldd	r24, Y+9	; 0x09
    326c:	9a 85       	ldd	r25, Y+10	; 0x0a
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e8       	ldi	r20, 0x80	; 128
    3274:	5f e3       	ldi	r21, 0x3F	; 63
    3276:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    327a:	88 23       	and	r24, r24
    327c:	2c f4       	brge	.+10     	; 0x3288 <LCD_init+0x82>
		__ticks = 1;
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	9e 83       	std	Y+6, r25	; 0x06
    3284:	8d 83       	std	Y+5, r24	; 0x05
    3286:	3f c0       	rjmp	.+126    	; 0x3306 <LCD_init+0x100>
	else if (__tmp > 65535)
    3288:	6f 81       	ldd	r22, Y+7	; 0x07
    328a:	78 85       	ldd	r23, Y+8	; 0x08
    328c:	89 85       	ldd	r24, Y+9	; 0x09
    328e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	3f ef       	ldi	r19, 0xFF	; 255
    3294:	4f e7       	ldi	r20, 0x7F	; 127
    3296:	57 e4       	ldi	r21, 0x47	; 71
    3298:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    329c:	18 16       	cp	r1, r24
    329e:	4c f5       	brge	.+82     	; 0x32f2 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	40 e2       	ldi	r20, 0x20	; 32
    32ae:	51 e4       	ldi	r21, 0x41	; 65
    32b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	bc 01       	movw	r22, r24
    32ba:	cd 01       	movw	r24, r26
    32bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	9e 83       	std	Y+6, r25	; 0x06
    32c6:	8d 83       	std	Y+5, r24	; 0x05
    32c8:	0f c0       	rjmp	.+30     	; 0x32e8 <LCD_init+0xe2>
    32ca:	88 ec       	ldi	r24, 0xC8	; 200
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	9c 83       	std	Y+4, r25	; 0x04
    32d0:	8b 83       	std	Y+3, r24	; 0x03
    32d2:	8b 81       	ldd	r24, Y+3	; 0x03
    32d4:	9c 81       	ldd	r25, Y+4	; 0x04
    32d6:	01 97       	sbiw	r24, 0x01	; 1
    32d8:	f1 f7       	brne	.-4      	; 0x32d6 <LCD_init+0xd0>
    32da:	9c 83       	std	Y+4, r25	; 0x04
    32dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32de:	8d 81       	ldd	r24, Y+5	; 0x05
    32e0:	9e 81       	ldd	r25, Y+6	; 0x06
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	9e 83       	std	Y+6, r25	; 0x06
    32e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ea:	9e 81       	ldd	r25, Y+6	; 0x06
    32ec:	00 97       	sbiw	r24, 0x00	; 0
    32ee:	69 f7       	brne	.-38     	; 0x32ca <LCD_init+0xc4>
    32f0:	14 c0       	rjmp	.+40     	; 0x331a <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f2:	6f 81       	ldd	r22, Y+7	; 0x07
    32f4:	78 85       	ldd	r23, Y+8	; 0x08
    32f6:	89 85       	ldd	r24, Y+9	; 0x09
    32f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	9e 83       	std	Y+6, r25	; 0x06
    3304:	8d 83       	std	Y+5, r24	; 0x05
    3306:	8d 81       	ldd	r24, Y+5	; 0x05
    3308:	9e 81       	ldd	r25, Y+6	; 0x06
    330a:	9a 83       	std	Y+2, r25	; 0x02
    330c:	89 83       	std	Y+1, r24	; 0x01
    330e:	89 81       	ldd	r24, Y+1	; 0x01
    3310:	9a 81       	ldd	r25, Y+2	; 0x02
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	f1 f7       	brne	.-4      	; 0x3312 <LCD_init+0x10c>
    3316:	9a 83       	std	Y+2, r25	; 0x02
    3318:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    331a:	82 e0       	ldi	r24, 0x02	; 2
    331c:	6f ef       	ldi	r22, 0xFF	; 255
    331e:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    3322:	88 e3       	ldi	r24, 0x38	; 56
    3324:	0e 94 a3 19 	call	0x3346	; 0x3346 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    3328:	8c e0       	ldi	r24, 0x0C	; 12
    332a:	0e 94 a3 19 	call	0x3346	; 0x3346 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	0e 94 a3 19 	call	0x3346	; 0x3346 <LCD_sendCommand>
}
    3334:	2e 96       	adiw	r28, 0x0e	; 14
    3336:	0f b6       	in	r0, 0x3f	; 63
    3338:	f8 94       	cli
    333a:	de bf       	out	0x3e, r29	; 62
    333c:	0f be       	out	0x3f, r0	; 63
    333e:	cd bf       	out	0x3d, r28	; 61
    3340:	cf 91       	pop	r28
    3342:	df 91       	pop	r29
    3344:	08 95       	ret

00003346 <LCD_sendCommand>:

/* description: send screen your command*/
void LCD_sendCommand(uint8 command){
    3346:	df 93       	push	r29
    3348:	cf 93       	push	r28
    334a:	cd b7       	in	r28, 0x3d	; 61
    334c:	de b7       	in	r29, 0x3e	; 62
    334e:	e9 97       	sbiw	r28, 0x39	; 57
    3350:	0f b6       	in	r0, 0x3f	; 63
    3352:	f8 94       	cli
    3354:	de bf       	out	0x3e, r29	; 62
    3356:	0f be       	out	0x3f, r0	; 63
    3358:	cd bf       	out	0x3d, r28	; 61
    335a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); // Instruction Mode RS=0
    335c:	83 e0       	ldi	r24, 0x03	; 3
    335e:	66 e0       	ldi	r22, 0x06	; 6
    3360:	40 e0       	ldi	r20, 0x00	; 0
    3362:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <GPIO_writePin>
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	a0 e8       	ldi	r26, 0x80	; 128
    336c:	bf e3       	ldi	r27, 0x3F	; 63
    336e:	8d ab       	std	Y+53, r24	; 0x35
    3370:	9e ab       	std	Y+54, r25	; 0x36
    3372:	af ab       	std	Y+55, r26	; 0x37
    3374:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3376:	6d a9       	ldd	r22, Y+53	; 0x35
    3378:	7e a9       	ldd	r23, Y+54	; 0x36
    337a:	8f a9       	ldd	r24, Y+55	; 0x37
    337c:	98 ad       	ldd	r25, Y+56	; 0x38
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	4a ef       	ldi	r20, 0xFA	; 250
    3384:	54 e4       	ldi	r21, 0x44	; 68
    3386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	89 ab       	std	Y+49, r24	; 0x31
    3390:	9a ab       	std	Y+50, r25	; 0x32
    3392:	ab ab       	std	Y+51, r26	; 0x33
    3394:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3396:	69 a9       	ldd	r22, Y+49	; 0x31
    3398:	7a a9       	ldd	r23, Y+50	; 0x32
    339a:	8b a9       	ldd	r24, Y+51	; 0x33
    339c:	9c a9       	ldd	r25, Y+52	; 0x34
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	40 e8       	ldi	r20, 0x80	; 128
    33a4:	5f e3       	ldi	r21, 0x3F	; 63
    33a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33aa:	88 23       	and	r24, r24
    33ac:	2c f4       	brge	.+10     	; 0x33b8 <LCD_sendCommand+0x72>
		__ticks = 1;
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	98 ab       	std	Y+48, r25	; 0x30
    33b4:	8f a7       	std	Y+47, r24	; 0x2f
    33b6:	3f c0       	rjmp	.+126    	; 0x3436 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    33b8:	69 a9       	ldd	r22, Y+49	; 0x31
    33ba:	7a a9       	ldd	r23, Y+50	; 0x32
    33bc:	8b a9       	ldd	r24, Y+51	; 0x33
    33be:	9c a9       	ldd	r25, Y+52	; 0x34
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	3f ef       	ldi	r19, 0xFF	; 255
    33c4:	4f e7       	ldi	r20, 0x7F	; 127
    33c6:	57 e4       	ldi	r21, 0x47	; 71
    33c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33cc:	18 16       	cp	r1, r24
    33ce:	4c f5       	brge	.+82     	; 0x3422 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d0:	6d a9       	ldd	r22, Y+53	; 0x35
    33d2:	7e a9       	ldd	r23, Y+54	; 0x36
    33d4:	8f a9       	ldd	r24, Y+55	; 0x37
    33d6:	98 ad       	ldd	r25, Y+56	; 0x38
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	40 e2       	ldi	r20, 0x20	; 32
    33de:	51 e4       	ldi	r21, 0x41	; 65
    33e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	bc 01       	movw	r22, r24
    33ea:	cd 01       	movw	r24, r26
    33ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	98 ab       	std	Y+48, r25	; 0x30
    33f6:	8f a7       	std	Y+47, r24	; 0x2f
    33f8:	0f c0       	rjmp	.+30     	; 0x3418 <LCD_sendCommand+0xd2>
    33fa:	88 ec       	ldi	r24, 0xC8	; 200
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	9e a7       	std	Y+46, r25	; 0x2e
    3400:	8d a7       	std	Y+45, r24	; 0x2d
    3402:	8d a5       	ldd	r24, Y+45	; 0x2d
    3404:	9e a5       	ldd	r25, Y+46	; 0x2e
    3406:	01 97       	sbiw	r24, 0x01	; 1
    3408:	f1 f7       	brne	.-4      	; 0x3406 <LCD_sendCommand+0xc0>
    340a:	9e a7       	std	Y+46, r25	; 0x2e
    340c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    340e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3410:	98 a9       	ldd	r25, Y+48	; 0x30
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	98 ab       	std	Y+48, r25	; 0x30
    3416:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3418:	8f a5       	ldd	r24, Y+47	; 0x2f
    341a:	98 a9       	ldd	r25, Y+48	; 0x30
    341c:	00 97       	sbiw	r24, 0x00	; 0
    341e:	69 f7       	brne	.-38     	; 0x33fa <LCD_sendCommand+0xb4>
    3420:	14 c0       	rjmp	.+40     	; 0x344a <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3422:	69 a9       	ldd	r22, Y+49	; 0x31
    3424:	7a a9       	ldd	r23, Y+50	; 0x32
    3426:	8b a9       	ldd	r24, Y+51	; 0x33
    3428:	9c a9       	ldd	r25, Y+52	; 0x34
    342a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	98 ab       	std	Y+48, r25	; 0x30
    3434:	8f a7       	std	Y+47, r24	; 0x2f
    3436:	8f a5       	ldd	r24, Y+47	; 0x2f
    3438:	98 a9       	ldd	r25, Y+48	; 0x30
    343a:	9c a7       	std	Y+44, r25	; 0x2c
    343c:	8b a7       	std	Y+43, r24	; 0x2b
    343e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3440:	9c a5       	ldd	r25, Y+44	; 0x2c
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	f1 f7       	brne	.-4      	; 0x3442 <LCD_sendCommand+0xfc>
    3446:	9c a7       	std	Y+44, r25	; 0x2c
    3448:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); // delay for processing
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    344a:	83 e0       	ldi	r24, 0x03	; 3
    344c:	67 e0       	ldi	r22, 0x07	; 7
    344e:	41 e0       	ldi	r20, 0x01	; 1
    3450:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <GPIO_writePin>
    3454:	80 e0       	ldi	r24, 0x00	; 0
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	a0 e8       	ldi	r26, 0x80	; 128
    345a:	bf e3       	ldi	r27, 0x3F	; 63
    345c:	8f a3       	std	Y+39, r24	; 0x27
    345e:	98 a7       	std	Y+40, r25	; 0x28
    3460:	a9 a7       	std	Y+41, r26	; 0x29
    3462:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3464:	6f a1       	ldd	r22, Y+39	; 0x27
    3466:	78 a5       	ldd	r23, Y+40	; 0x28
    3468:	89 a5       	ldd	r24, Y+41	; 0x29
    346a:	9a a5       	ldd	r25, Y+42	; 0x2a
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	4a ef       	ldi	r20, 0xFA	; 250
    3472:	54 e4       	ldi	r21, 0x44	; 68
    3474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	8b a3       	std	Y+35, r24	; 0x23
    347e:	9c a3       	std	Y+36, r25	; 0x24
    3480:	ad a3       	std	Y+37, r26	; 0x25
    3482:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3484:	6b a1       	ldd	r22, Y+35	; 0x23
    3486:	7c a1       	ldd	r23, Y+36	; 0x24
    3488:	8d a1       	ldd	r24, Y+37	; 0x25
    348a:	9e a1       	ldd	r25, Y+38	; 0x26
    348c:	20 e0       	ldi	r18, 0x00	; 0
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	40 e8       	ldi	r20, 0x80	; 128
    3492:	5f e3       	ldi	r21, 0x3F	; 63
    3494:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3498:	88 23       	and	r24, r24
    349a:	2c f4       	brge	.+10     	; 0x34a6 <LCD_sendCommand+0x160>
		__ticks = 1;
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	9a a3       	std	Y+34, r25	; 0x22
    34a2:	89 a3       	std	Y+33, r24	; 0x21
    34a4:	3f c0       	rjmp	.+126    	; 0x3524 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    34a6:	6b a1       	ldd	r22, Y+35	; 0x23
    34a8:	7c a1       	ldd	r23, Y+36	; 0x24
    34aa:	8d a1       	ldd	r24, Y+37	; 0x25
    34ac:	9e a1       	ldd	r25, Y+38	; 0x26
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	3f ef       	ldi	r19, 0xFF	; 255
    34b2:	4f e7       	ldi	r20, 0x7F	; 127
    34b4:	57 e4       	ldi	r21, 0x47	; 71
    34b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34ba:	18 16       	cp	r1, r24
    34bc:	4c f5       	brge	.+82     	; 0x3510 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34be:	6f a1       	ldd	r22, Y+39	; 0x27
    34c0:	78 a5       	ldd	r23, Y+40	; 0x28
    34c2:	89 a5       	ldd	r24, Y+41	; 0x29
    34c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	40 e2       	ldi	r20, 0x20	; 32
    34cc:	51 e4       	ldi	r21, 0x41	; 65
    34ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d2:	dc 01       	movw	r26, r24
    34d4:	cb 01       	movw	r24, r22
    34d6:	bc 01       	movw	r22, r24
    34d8:	cd 01       	movw	r24, r26
    34da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	9a a3       	std	Y+34, r25	; 0x22
    34e4:	89 a3       	std	Y+33, r24	; 0x21
    34e6:	0f c0       	rjmp	.+30     	; 0x3506 <LCD_sendCommand+0x1c0>
    34e8:	88 ec       	ldi	r24, 0xC8	; 200
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	98 a3       	std	Y+32, r25	; 0x20
    34ee:	8f 8f       	std	Y+31, r24	; 0x1f
    34f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34f2:	98 a1       	ldd	r25, Y+32	; 0x20
    34f4:	01 97       	sbiw	r24, 0x01	; 1
    34f6:	f1 f7       	brne	.-4      	; 0x34f4 <LCD_sendCommand+0x1ae>
    34f8:	98 a3       	std	Y+32, r25	; 0x20
    34fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34fc:	89 a1       	ldd	r24, Y+33	; 0x21
    34fe:	9a a1       	ldd	r25, Y+34	; 0x22
    3500:	01 97       	sbiw	r24, 0x01	; 1
    3502:	9a a3       	std	Y+34, r25	; 0x22
    3504:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3506:	89 a1       	ldd	r24, Y+33	; 0x21
    3508:	9a a1       	ldd	r25, Y+34	; 0x22
    350a:	00 97       	sbiw	r24, 0x00	; 0
    350c:	69 f7       	brne	.-38     	; 0x34e8 <LCD_sendCommand+0x1a2>
    350e:	14 c0       	rjmp	.+40     	; 0x3538 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3510:	6b a1       	ldd	r22, Y+35	; 0x23
    3512:	7c a1       	ldd	r23, Y+36	; 0x24
    3514:	8d a1       	ldd	r24, Y+37	; 0x25
    3516:	9e a1       	ldd	r25, Y+38	; 0x26
    3518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    351c:	dc 01       	movw	r26, r24
    351e:	cb 01       	movw	r24, r22
    3520:	9a a3       	std	Y+34, r25	; 0x22
    3522:	89 a3       	std	Y+33, r24	; 0x21
    3524:	89 a1       	ldd	r24, Y+33	; 0x21
    3526:	9a a1       	ldd	r25, Y+34	; 0x22
    3528:	9e 8f       	std	Y+30, r25	; 0x1e
    352a:	8d 8f       	std	Y+29, r24	; 0x1d
    352c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    352e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3530:	01 97       	sbiw	r24, 0x01	; 1
    3532:	f1 f7       	brne	.-4      	; 0x3530 <LCD_sendCommand+0x1ea>
    3534:	9e 8f       	std	Y+30, r25	; 0x1e
    3536:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    3538:	82 e0       	ldi	r24, 0x02	; 2
    353a:	69 ad       	ldd	r22, Y+57	; 0x39
    353c:	0e 94 6e 17 	call	0x2edc	; 0x2edc <GPIO_writePort>
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	a0 e8       	ldi	r26, 0x80	; 128
    3546:	bf e3       	ldi	r27, 0x3F	; 63
    3548:	89 8f       	std	Y+25, r24	; 0x19
    354a:	9a 8f       	std	Y+26, r25	; 0x1a
    354c:	ab 8f       	std	Y+27, r26	; 0x1b
    354e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3550:	69 8d       	ldd	r22, Y+25	; 0x19
    3552:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3554:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3556:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	4a ef       	ldi	r20, 0xFA	; 250
    355e:	54 e4       	ldi	r21, 0x44	; 68
    3560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	8d 8b       	std	Y+21, r24	; 0x15
    356a:	9e 8b       	std	Y+22, r25	; 0x16
    356c:	af 8b       	std	Y+23, r26	; 0x17
    356e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3570:	6d 89       	ldd	r22, Y+21	; 0x15
    3572:	7e 89       	ldd	r23, Y+22	; 0x16
    3574:	8f 89       	ldd	r24, Y+23	; 0x17
    3576:	98 8d       	ldd	r25, Y+24	; 0x18
    3578:	20 e0       	ldi	r18, 0x00	; 0
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	40 e8       	ldi	r20, 0x80	; 128
    357e:	5f e3       	ldi	r21, 0x3F	; 63
    3580:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3584:	88 23       	and	r24, r24
    3586:	2c f4       	brge	.+10     	; 0x3592 <LCD_sendCommand+0x24c>
		__ticks = 1;
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	9c 8b       	std	Y+20, r25	; 0x14
    358e:	8b 8b       	std	Y+19, r24	; 0x13
    3590:	3f c0       	rjmp	.+126    	; 0x3610 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    3592:	6d 89       	ldd	r22, Y+21	; 0x15
    3594:	7e 89       	ldd	r23, Y+22	; 0x16
    3596:	8f 89       	ldd	r24, Y+23	; 0x17
    3598:	98 8d       	ldd	r25, Y+24	; 0x18
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	3f ef       	ldi	r19, 0xFF	; 255
    359e:	4f e7       	ldi	r20, 0x7F	; 127
    35a0:	57 e4       	ldi	r21, 0x47	; 71
    35a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35a6:	18 16       	cp	r1, r24
    35a8:	4c f5       	brge	.+82     	; 0x35fc <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35aa:	69 8d       	ldd	r22, Y+25	; 0x19
    35ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	40 e2       	ldi	r20, 0x20	; 32
    35b8:	51 e4       	ldi	r21, 0x41	; 65
    35ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	bc 01       	movw	r22, r24
    35c4:	cd 01       	movw	r24, r26
    35c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	9c 8b       	std	Y+20, r25	; 0x14
    35d0:	8b 8b       	std	Y+19, r24	; 0x13
    35d2:	0f c0       	rjmp	.+30     	; 0x35f2 <LCD_sendCommand+0x2ac>
    35d4:	88 ec       	ldi	r24, 0xC8	; 200
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	9a 8b       	std	Y+18, r25	; 0x12
    35da:	89 8b       	std	Y+17, r24	; 0x11
    35dc:	89 89       	ldd	r24, Y+17	; 0x11
    35de:	9a 89       	ldd	r25, Y+18	; 0x12
    35e0:	01 97       	sbiw	r24, 0x01	; 1
    35e2:	f1 f7       	brne	.-4      	; 0x35e0 <LCD_sendCommand+0x29a>
    35e4:	9a 8b       	std	Y+18, r25	; 0x12
    35e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35e8:	8b 89       	ldd	r24, Y+19	; 0x13
    35ea:	9c 89       	ldd	r25, Y+20	; 0x14
    35ec:	01 97       	sbiw	r24, 0x01	; 1
    35ee:	9c 8b       	std	Y+20, r25	; 0x14
    35f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f2:	8b 89       	ldd	r24, Y+19	; 0x13
    35f4:	9c 89       	ldd	r25, Y+20	; 0x14
    35f6:	00 97       	sbiw	r24, 0x00	; 0
    35f8:	69 f7       	brne	.-38     	; 0x35d4 <LCD_sendCommand+0x28e>
    35fa:	14 c0       	rjmp	.+40     	; 0x3624 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35fc:	6d 89       	ldd	r22, Y+21	; 0x15
    35fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3600:	8f 89       	ldd	r24, Y+23	; 0x17
    3602:	98 8d       	ldd	r25, Y+24	; 0x18
    3604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	9c 8b       	std	Y+20, r25	; 0x14
    360e:	8b 8b       	std	Y+19, r24	; 0x13
    3610:	8b 89       	ldd	r24, Y+19	; 0x13
    3612:	9c 89       	ldd	r25, Y+20	; 0x14
    3614:	98 8b       	std	Y+16, r25	; 0x10
    3616:	8f 87       	std	Y+15, r24	; 0x0f
    3618:	8f 85       	ldd	r24, Y+15	; 0x0f
    361a:	98 89       	ldd	r25, Y+16	; 0x10
    361c:	01 97       	sbiw	r24, 0x01	; 1
    361e:	f1 f7       	brne	.-4      	; 0x361c <LCD_sendCommand+0x2d6>
    3620:	98 8b       	std	Y+16, r25	; 0x10
    3622:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3624:	83 e0       	ldi	r24, 0x03	; 3
    3626:	67 e0       	ldi	r22, 0x07	; 7
    3628:	40 e0       	ldi	r20, 0x00	; 0
    362a:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <GPIO_writePin>
    362e:	80 e0       	ldi	r24, 0x00	; 0
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	a0 e8       	ldi	r26, 0x80	; 128
    3634:	bf e3       	ldi	r27, 0x3F	; 63
    3636:	8b 87       	std	Y+11, r24	; 0x0b
    3638:	9c 87       	std	Y+12, r25	; 0x0c
    363a:	ad 87       	std	Y+13, r26	; 0x0d
    363c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    363e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3640:	7c 85       	ldd	r23, Y+12	; 0x0c
    3642:	8d 85       	ldd	r24, Y+13	; 0x0d
    3644:	9e 85       	ldd	r25, Y+14	; 0x0e
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	4a ef       	ldi	r20, 0xFA	; 250
    364c:	54 e4       	ldi	r21, 0x44	; 68
    364e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	8f 83       	std	Y+7, r24	; 0x07
    3658:	98 87       	std	Y+8, r25	; 0x08
    365a:	a9 87       	std	Y+9, r26	; 0x09
    365c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    365e:	6f 81       	ldd	r22, Y+7	; 0x07
    3660:	78 85       	ldd	r23, Y+8	; 0x08
    3662:	89 85       	ldd	r24, Y+9	; 0x09
    3664:	9a 85       	ldd	r25, Y+10	; 0x0a
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	40 e8       	ldi	r20, 0x80	; 128
    366c:	5f e3       	ldi	r21, 0x3F	; 63
    366e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3672:	88 23       	and	r24, r24
    3674:	2c f4       	brge	.+10     	; 0x3680 <LCD_sendCommand+0x33a>
		__ticks = 1;
    3676:	81 e0       	ldi	r24, 0x01	; 1
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	9e 83       	std	Y+6, r25	; 0x06
    367c:	8d 83       	std	Y+5, r24	; 0x05
    367e:	3f c0       	rjmp	.+126    	; 0x36fe <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    3680:	6f 81       	ldd	r22, Y+7	; 0x07
    3682:	78 85       	ldd	r23, Y+8	; 0x08
    3684:	89 85       	ldd	r24, Y+9	; 0x09
    3686:	9a 85       	ldd	r25, Y+10	; 0x0a
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	3f ef       	ldi	r19, 0xFF	; 255
    368c:	4f e7       	ldi	r20, 0x7F	; 127
    368e:	57 e4       	ldi	r21, 0x47	; 71
    3690:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3694:	18 16       	cp	r1, r24
    3696:	4c f5       	brge	.+82     	; 0x36ea <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3698:	6b 85       	ldd	r22, Y+11	; 0x0b
    369a:	7c 85       	ldd	r23, Y+12	; 0x0c
    369c:	8d 85       	ldd	r24, Y+13	; 0x0d
    369e:	9e 85       	ldd	r25, Y+14	; 0x0e
    36a0:	20 e0       	ldi	r18, 0x00	; 0
    36a2:	30 e0       	ldi	r19, 0x00	; 0
    36a4:	40 e2       	ldi	r20, 0x20	; 32
    36a6:	51 e4       	ldi	r21, 0x41	; 65
    36a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	bc 01       	movw	r22, r24
    36b2:	cd 01       	movw	r24, r26
    36b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	9e 83       	std	Y+6, r25	; 0x06
    36be:	8d 83       	std	Y+5, r24	; 0x05
    36c0:	0f c0       	rjmp	.+30     	; 0x36e0 <LCD_sendCommand+0x39a>
    36c2:	88 ec       	ldi	r24, 0xC8	; 200
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	9c 83       	std	Y+4, r25	; 0x04
    36c8:	8b 83       	std	Y+3, r24	; 0x03
    36ca:	8b 81       	ldd	r24, Y+3	; 0x03
    36cc:	9c 81       	ldd	r25, Y+4	; 0x04
    36ce:	01 97       	sbiw	r24, 0x01	; 1
    36d0:	f1 f7       	brne	.-4      	; 0x36ce <LCD_sendCommand+0x388>
    36d2:	9c 83       	std	Y+4, r25	; 0x04
    36d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d6:	8d 81       	ldd	r24, Y+5	; 0x05
    36d8:	9e 81       	ldd	r25, Y+6	; 0x06
    36da:	01 97       	sbiw	r24, 0x01	; 1
    36dc:	9e 83       	std	Y+6, r25	; 0x06
    36de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36e0:	8d 81       	ldd	r24, Y+5	; 0x05
    36e2:	9e 81       	ldd	r25, Y+6	; 0x06
    36e4:	00 97       	sbiw	r24, 0x00	; 0
    36e6:	69 f7       	brne	.-38     	; 0x36c2 <LCD_sendCommand+0x37c>
    36e8:	14 c0       	rjmp	.+40     	; 0x3712 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ea:	6f 81       	ldd	r22, Y+7	; 0x07
    36ec:	78 85       	ldd	r23, Y+8	; 0x08
    36ee:	89 85       	ldd	r24, Y+9	; 0x09
    36f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f6:	dc 01       	movw	r26, r24
    36f8:	cb 01       	movw	r24, r22
    36fa:	9e 83       	std	Y+6, r25	; 0x06
    36fc:	8d 83       	std	Y+5, r24	; 0x05
    36fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3700:	9e 81       	ldd	r25, Y+6	; 0x06
    3702:	9a 83       	std	Y+2, r25	; 0x02
    3704:	89 83       	std	Y+1, r24	; 0x01
    3706:	89 81       	ldd	r24, Y+1	; 0x01
    3708:	9a 81       	ldd	r25, Y+2	; 0x02
    370a:	01 97       	sbiw	r24, 0x01	; 1
    370c:	f1 f7       	brne	.-4      	; 0x370a <LCD_sendCommand+0x3c4>
    370e:	9a 83       	std	Y+2, r25	; 0x02
    3710:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3712:	e9 96       	adiw	r28, 0x39	; 57
    3714:	0f b6       	in	r0, 0x3f	; 63
    3716:	f8 94       	cli
    3718:	de bf       	out	0x3e, r29	; 62
    371a:	0f be       	out	0x3f, r0	; 63
    371c:	cd bf       	out	0x3d, r28	; 61
    371e:	cf 91       	pop	r28
    3720:	df 91       	pop	r29
    3722:	08 95       	ret

00003724 <LCD_display_Character>:
// description: display required character on screen
void LCD_display_Character(uint8 data){
    3724:	df 93       	push	r29
    3726:	cf 93       	push	r28
    3728:	cd b7       	in	r28, 0x3d	; 61
    372a:	de b7       	in	r29, 0x3e	; 62
    372c:	e9 97       	sbiw	r28, 0x39	; 57
    372e:	0f b6       	in	r0, 0x3f	; 63
    3730:	f8 94       	cli
    3732:	de bf       	out	0x3e, r29	; 62
    3734:	0f be       	out	0x3f, r0	; 63
    3736:	cd bf       	out	0x3d, r28	; 61
    3738:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    373a:	83 e0       	ldi	r24, 0x03	; 3
    373c:	66 e0       	ldi	r22, 0x06	; 6
    373e:	41 e0       	ldi	r20, 0x01	; 1
    3740:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <GPIO_writePin>
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	a0 e8       	ldi	r26, 0x80	; 128
    374a:	bf e3       	ldi	r27, 0x3F	; 63
    374c:	8d ab       	std	Y+53, r24	; 0x35
    374e:	9e ab       	std	Y+54, r25	; 0x36
    3750:	af ab       	std	Y+55, r26	; 0x37
    3752:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3754:	6d a9       	ldd	r22, Y+53	; 0x35
    3756:	7e a9       	ldd	r23, Y+54	; 0x36
    3758:	8f a9       	ldd	r24, Y+55	; 0x37
    375a:	98 ad       	ldd	r25, Y+56	; 0x38
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	4a ef       	ldi	r20, 0xFA	; 250
    3762:	54 e4       	ldi	r21, 0x44	; 68
    3764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	89 ab       	std	Y+49, r24	; 0x31
    376e:	9a ab       	std	Y+50, r25	; 0x32
    3770:	ab ab       	std	Y+51, r26	; 0x33
    3772:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3774:	69 a9       	ldd	r22, Y+49	; 0x31
    3776:	7a a9       	ldd	r23, Y+50	; 0x32
    3778:	8b a9       	ldd	r24, Y+51	; 0x33
    377a:	9c a9       	ldd	r25, Y+52	; 0x34
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	40 e8       	ldi	r20, 0x80	; 128
    3782:	5f e3       	ldi	r21, 0x3F	; 63
    3784:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3788:	88 23       	and	r24, r24
    378a:	2c f4       	brge	.+10     	; 0x3796 <LCD_display_Character+0x72>
		__ticks = 1;
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	98 ab       	std	Y+48, r25	; 0x30
    3792:	8f a7       	std	Y+47, r24	; 0x2f
    3794:	3f c0       	rjmp	.+126    	; 0x3814 <LCD_display_Character+0xf0>
	else if (__tmp > 65535)
    3796:	69 a9       	ldd	r22, Y+49	; 0x31
    3798:	7a a9       	ldd	r23, Y+50	; 0x32
    379a:	8b a9       	ldd	r24, Y+51	; 0x33
    379c:	9c a9       	ldd	r25, Y+52	; 0x34
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	3f ef       	ldi	r19, 0xFF	; 255
    37a2:	4f e7       	ldi	r20, 0x7F	; 127
    37a4:	57 e4       	ldi	r21, 0x47	; 71
    37a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37aa:	18 16       	cp	r1, r24
    37ac:	4c f5       	brge	.+82     	; 0x3800 <LCD_display_Character+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ae:	6d a9       	ldd	r22, Y+53	; 0x35
    37b0:	7e a9       	ldd	r23, Y+54	; 0x36
    37b2:	8f a9       	ldd	r24, Y+55	; 0x37
    37b4:	98 ad       	ldd	r25, Y+56	; 0x38
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	40 e2       	ldi	r20, 0x20	; 32
    37bc:	51 e4       	ldi	r21, 0x41	; 65
    37be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	bc 01       	movw	r22, r24
    37c8:	cd 01       	movw	r24, r26
    37ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	98 ab       	std	Y+48, r25	; 0x30
    37d4:	8f a7       	std	Y+47, r24	; 0x2f
    37d6:	0f c0       	rjmp	.+30     	; 0x37f6 <LCD_display_Character+0xd2>
    37d8:	88 ec       	ldi	r24, 0xC8	; 200
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	9e a7       	std	Y+46, r25	; 0x2e
    37de:	8d a7       	std	Y+45, r24	; 0x2d
    37e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    37e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    37e4:	01 97       	sbiw	r24, 0x01	; 1
    37e6:	f1 f7       	brne	.-4      	; 0x37e4 <LCD_display_Character+0xc0>
    37e8:	9e a7       	std	Y+46, r25	; 0x2e
    37ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    37ee:	98 a9       	ldd	r25, Y+48	; 0x30
    37f0:	01 97       	sbiw	r24, 0x01	; 1
    37f2:	98 ab       	std	Y+48, r25	; 0x30
    37f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    37f8:	98 a9       	ldd	r25, Y+48	; 0x30
    37fa:	00 97       	sbiw	r24, 0x00	; 0
    37fc:	69 f7       	brne	.-38     	; 0x37d8 <LCD_display_Character+0xb4>
    37fe:	14 c0       	rjmp	.+40     	; 0x3828 <LCD_display_Character+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3800:	69 a9       	ldd	r22, Y+49	; 0x31
    3802:	7a a9       	ldd	r23, Y+50	; 0x32
    3804:	8b a9       	ldd	r24, Y+51	; 0x33
    3806:	9c a9       	ldd	r25, Y+52	; 0x34
    3808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380c:	dc 01       	movw	r26, r24
    380e:	cb 01       	movw	r24, r22
    3810:	98 ab       	std	Y+48, r25	; 0x30
    3812:	8f a7       	std	Y+47, r24	; 0x2f
    3814:	8f a5       	ldd	r24, Y+47	; 0x2f
    3816:	98 a9       	ldd	r25, Y+48	; 0x30
    3818:	9c a7       	std	Y+44, r25	; 0x2c
    381a:	8b a7       	std	Y+43, r24	; 0x2b
    381c:	8b a5       	ldd	r24, Y+43	; 0x2b
    381e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3820:	01 97       	sbiw	r24, 0x01	; 1
    3822:	f1 f7       	brne	.-4      	; 0x3820 <LCD_display_Character+0xfc>
    3824:	9c a7       	std	Y+44, r25	; 0x2c
    3826:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); // delay for processing
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3828:	83 e0       	ldi	r24, 0x03	; 3
    382a:	67 e0       	ldi	r22, 0x07	; 7
    382c:	41 e0       	ldi	r20, 0x01	; 1
    382e:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <GPIO_writePin>
    3832:	80 e0       	ldi	r24, 0x00	; 0
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	a0 e8       	ldi	r26, 0x80	; 128
    3838:	bf e3       	ldi	r27, 0x3F	; 63
    383a:	8f a3       	std	Y+39, r24	; 0x27
    383c:	98 a7       	std	Y+40, r25	; 0x28
    383e:	a9 a7       	std	Y+41, r26	; 0x29
    3840:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3842:	6f a1       	ldd	r22, Y+39	; 0x27
    3844:	78 a5       	ldd	r23, Y+40	; 0x28
    3846:	89 a5       	ldd	r24, Y+41	; 0x29
    3848:	9a a5       	ldd	r25, Y+42	; 0x2a
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	4a ef       	ldi	r20, 0xFA	; 250
    3850:	54 e4       	ldi	r21, 0x44	; 68
    3852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	8b a3       	std	Y+35, r24	; 0x23
    385c:	9c a3       	std	Y+36, r25	; 0x24
    385e:	ad a3       	std	Y+37, r26	; 0x25
    3860:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3862:	6b a1       	ldd	r22, Y+35	; 0x23
    3864:	7c a1       	ldd	r23, Y+36	; 0x24
    3866:	8d a1       	ldd	r24, Y+37	; 0x25
    3868:	9e a1       	ldd	r25, Y+38	; 0x26
    386a:	20 e0       	ldi	r18, 0x00	; 0
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	40 e8       	ldi	r20, 0x80	; 128
    3870:	5f e3       	ldi	r21, 0x3F	; 63
    3872:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3876:	88 23       	and	r24, r24
    3878:	2c f4       	brge	.+10     	; 0x3884 <LCD_display_Character+0x160>
		__ticks = 1;
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	9a a3       	std	Y+34, r25	; 0x22
    3880:	89 a3       	std	Y+33, r24	; 0x21
    3882:	3f c0       	rjmp	.+126    	; 0x3902 <LCD_display_Character+0x1de>
	else if (__tmp > 65535)
    3884:	6b a1       	ldd	r22, Y+35	; 0x23
    3886:	7c a1       	ldd	r23, Y+36	; 0x24
    3888:	8d a1       	ldd	r24, Y+37	; 0x25
    388a:	9e a1       	ldd	r25, Y+38	; 0x26
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	3f ef       	ldi	r19, 0xFF	; 255
    3890:	4f e7       	ldi	r20, 0x7F	; 127
    3892:	57 e4       	ldi	r21, 0x47	; 71
    3894:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3898:	18 16       	cp	r1, r24
    389a:	4c f5       	brge	.+82     	; 0x38ee <LCD_display_Character+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    389c:	6f a1       	ldd	r22, Y+39	; 0x27
    389e:	78 a5       	ldd	r23, Y+40	; 0x28
    38a0:	89 a5       	ldd	r24, Y+41	; 0x29
    38a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    38a4:	20 e0       	ldi	r18, 0x00	; 0
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	40 e2       	ldi	r20, 0x20	; 32
    38aa:	51 e4       	ldi	r21, 0x41	; 65
    38ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	bc 01       	movw	r22, r24
    38b6:	cd 01       	movw	r24, r26
    38b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38bc:	dc 01       	movw	r26, r24
    38be:	cb 01       	movw	r24, r22
    38c0:	9a a3       	std	Y+34, r25	; 0x22
    38c2:	89 a3       	std	Y+33, r24	; 0x21
    38c4:	0f c0       	rjmp	.+30     	; 0x38e4 <LCD_display_Character+0x1c0>
    38c6:	88 ec       	ldi	r24, 0xC8	; 200
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	98 a3       	std	Y+32, r25	; 0x20
    38cc:	8f 8f       	std	Y+31, r24	; 0x1f
    38ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38d0:	98 a1       	ldd	r25, Y+32	; 0x20
    38d2:	01 97       	sbiw	r24, 0x01	; 1
    38d4:	f1 f7       	brne	.-4      	; 0x38d2 <LCD_display_Character+0x1ae>
    38d6:	98 a3       	std	Y+32, r25	; 0x20
    38d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38da:	89 a1       	ldd	r24, Y+33	; 0x21
    38dc:	9a a1       	ldd	r25, Y+34	; 0x22
    38de:	01 97       	sbiw	r24, 0x01	; 1
    38e0:	9a a3       	std	Y+34, r25	; 0x22
    38e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38e4:	89 a1       	ldd	r24, Y+33	; 0x21
    38e6:	9a a1       	ldd	r25, Y+34	; 0x22
    38e8:	00 97       	sbiw	r24, 0x00	; 0
    38ea:	69 f7       	brne	.-38     	; 0x38c6 <LCD_display_Character+0x1a2>
    38ec:	14 c0       	rjmp	.+40     	; 0x3916 <LCD_display_Character+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ee:	6b a1       	ldd	r22, Y+35	; 0x23
    38f0:	7c a1       	ldd	r23, Y+36	; 0x24
    38f2:	8d a1       	ldd	r24, Y+37	; 0x25
    38f4:	9e a1       	ldd	r25, Y+38	; 0x26
    38f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38fa:	dc 01       	movw	r26, r24
    38fc:	cb 01       	movw	r24, r22
    38fe:	9a a3       	std	Y+34, r25	; 0x22
    3900:	89 a3       	std	Y+33, r24	; 0x21
    3902:	89 a1       	ldd	r24, Y+33	; 0x21
    3904:	9a a1       	ldd	r25, Y+34	; 0x22
    3906:	9e 8f       	std	Y+30, r25	; 0x1e
    3908:	8d 8f       	std	Y+29, r24	; 0x1d
    390a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    390c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    390e:	01 97       	sbiw	r24, 0x01	; 1
    3910:	f1 f7       	brne	.-4      	; 0x390e <LCD_display_Character+0x1ea>
    3912:	9e 8f       	std	Y+30, r25	; 0x1e
    3914:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    3916:	82 e0       	ldi	r24, 0x02	; 2
    3918:	69 ad       	ldd	r22, Y+57	; 0x39
    391a:	0e 94 6e 17 	call	0x2edc	; 0x2edc <GPIO_writePort>
    391e:	80 e0       	ldi	r24, 0x00	; 0
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	a0 e8       	ldi	r26, 0x80	; 128
    3924:	bf e3       	ldi	r27, 0x3F	; 63
    3926:	89 8f       	std	Y+25, r24	; 0x19
    3928:	9a 8f       	std	Y+26, r25	; 0x1a
    392a:	ab 8f       	std	Y+27, r26	; 0x1b
    392c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    392e:	69 8d       	ldd	r22, Y+25	; 0x19
    3930:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3932:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3934:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3936:	20 e0       	ldi	r18, 0x00	; 0
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	4a ef       	ldi	r20, 0xFA	; 250
    393c:	54 e4       	ldi	r21, 0x44	; 68
    393e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3942:	dc 01       	movw	r26, r24
    3944:	cb 01       	movw	r24, r22
    3946:	8d 8b       	std	Y+21, r24	; 0x15
    3948:	9e 8b       	std	Y+22, r25	; 0x16
    394a:	af 8b       	std	Y+23, r26	; 0x17
    394c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    394e:	6d 89       	ldd	r22, Y+21	; 0x15
    3950:	7e 89       	ldd	r23, Y+22	; 0x16
    3952:	8f 89       	ldd	r24, Y+23	; 0x17
    3954:	98 8d       	ldd	r25, Y+24	; 0x18
    3956:	20 e0       	ldi	r18, 0x00	; 0
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	40 e8       	ldi	r20, 0x80	; 128
    395c:	5f e3       	ldi	r21, 0x3F	; 63
    395e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3962:	88 23       	and	r24, r24
    3964:	2c f4       	brge	.+10     	; 0x3970 <LCD_display_Character+0x24c>
		__ticks = 1;
    3966:	81 e0       	ldi	r24, 0x01	; 1
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	9c 8b       	std	Y+20, r25	; 0x14
    396c:	8b 8b       	std	Y+19, r24	; 0x13
    396e:	3f c0       	rjmp	.+126    	; 0x39ee <LCD_display_Character+0x2ca>
	else if (__tmp > 65535)
    3970:	6d 89       	ldd	r22, Y+21	; 0x15
    3972:	7e 89       	ldd	r23, Y+22	; 0x16
    3974:	8f 89       	ldd	r24, Y+23	; 0x17
    3976:	98 8d       	ldd	r25, Y+24	; 0x18
    3978:	20 e0       	ldi	r18, 0x00	; 0
    397a:	3f ef       	ldi	r19, 0xFF	; 255
    397c:	4f e7       	ldi	r20, 0x7F	; 127
    397e:	57 e4       	ldi	r21, 0x47	; 71
    3980:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3984:	18 16       	cp	r1, r24
    3986:	4c f5       	brge	.+82     	; 0x39da <LCD_display_Character+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3988:	69 8d       	ldd	r22, Y+25	; 0x19
    398a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    398c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    398e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3990:	20 e0       	ldi	r18, 0x00	; 0
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	40 e2       	ldi	r20, 0x20	; 32
    3996:	51 e4       	ldi	r21, 0x41	; 65
    3998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    399c:	dc 01       	movw	r26, r24
    399e:	cb 01       	movw	r24, r22
    39a0:	bc 01       	movw	r22, r24
    39a2:	cd 01       	movw	r24, r26
    39a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a8:	dc 01       	movw	r26, r24
    39aa:	cb 01       	movw	r24, r22
    39ac:	9c 8b       	std	Y+20, r25	; 0x14
    39ae:	8b 8b       	std	Y+19, r24	; 0x13
    39b0:	0f c0       	rjmp	.+30     	; 0x39d0 <LCD_display_Character+0x2ac>
    39b2:	88 ec       	ldi	r24, 0xC8	; 200
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	9a 8b       	std	Y+18, r25	; 0x12
    39b8:	89 8b       	std	Y+17, r24	; 0x11
    39ba:	89 89       	ldd	r24, Y+17	; 0x11
    39bc:	9a 89       	ldd	r25, Y+18	; 0x12
    39be:	01 97       	sbiw	r24, 0x01	; 1
    39c0:	f1 f7       	brne	.-4      	; 0x39be <LCD_display_Character+0x29a>
    39c2:	9a 8b       	std	Y+18, r25	; 0x12
    39c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39c6:	8b 89       	ldd	r24, Y+19	; 0x13
    39c8:	9c 89       	ldd	r25, Y+20	; 0x14
    39ca:	01 97       	sbiw	r24, 0x01	; 1
    39cc:	9c 8b       	std	Y+20, r25	; 0x14
    39ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39d0:	8b 89       	ldd	r24, Y+19	; 0x13
    39d2:	9c 89       	ldd	r25, Y+20	; 0x14
    39d4:	00 97       	sbiw	r24, 0x00	; 0
    39d6:	69 f7       	brne	.-38     	; 0x39b2 <LCD_display_Character+0x28e>
    39d8:	14 c0       	rjmp	.+40     	; 0x3a02 <LCD_display_Character+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39da:	6d 89       	ldd	r22, Y+21	; 0x15
    39dc:	7e 89       	ldd	r23, Y+22	; 0x16
    39de:	8f 89       	ldd	r24, Y+23	; 0x17
    39e0:	98 8d       	ldd	r25, Y+24	; 0x18
    39e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39e6:	dc 01       	movw	r26, r24
    39e8:	cb 01       	movw	r24, r22
    39ea:	9c 8b       	std	Y+20, r25	; 0x14
    39ec:	8b 8b       	std	Y+19, r24	; 0x13
    39ee:	8b 89       	ldd	r24, Y+19	; 0x13
    39f0:	9c 89       	ldd	r25, Y+20	; 0x14
    39f2:	98 8b       	std	Y+16, r25	; 0x10
    39f4:	8f 87       	std	Y+15, r24	; 0x0f
    39f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    39f8:	98 89       	ldd	r25, Y+16	; 0x10
    39fa:	01 97       	sbiw	r24, 0x01	; 1
    39fc:	f1 f7       	brne	.-4      	; 0x39fa <LCD_display_Character+0x2d6>
    39fe:	98 8b       	std	Y+16, r25	; 0x10
    3a00:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3a02:	83 e0       	ldi	r24, 0x03	; 3
    3a04:	67 e0       	ldi	r22, 0x07	; 7
    3a06:	40 e0       	ldi	r20, 0x00	; 0
    3a08:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <GPIO_writePin>
    3a0c:	80 e0       	ldi	r24, 0x00	; 0
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	a0 e8       	ldi	r26, 0x80	; 128
    3a12:	bf e3       	ldi	r27, 0x3F	; 63
    3a14:	8b 87       	std	Y+11, r24	; 0x0b
    3a16:	9c 87       	std	Y+12, r25	; 0x0c
    3a18:	ad 87       	std	Y+13, r26	; 0x0d
    3a1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a22:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	4a ef       	ldi	r20, 0xFA	; 250
    3a2a:	54 e4       	ldi	r21, 0x44	; 68
    3a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a30:	dc 01       	movw	r26, r24
    3a32:	cb 01       	movw	r24, r22
    3a34:	8f 83       	std	Y+7, r24	; 0x07
    3a36:	98 87       	std	Y+8, r25	; 0x08
    3a38:	a9 87       	std	Y+9, r26	; 0x09
    3a3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a3e:	78 85       	ldd	r23, Y+8	; 0x08
    3a40:	89 85       	ldd	r24, Y+9	; 0x09
    3a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a44:	20 e0       	ldi	r18, 0x00	; 0
    3a46:	30 e0       	ldi	r19, 0x00	; 0
    3a48:	40 e8       	ldi	r20, 0x80	; 128
    3a4a:	5f e3       	ldi	r21, 0x3F	; 63
    3a4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a50:	88 23       	and	r24, r24
    3a52:	2c f4       	brge	.+10     	; 0x3a5e <LCD_display_Character+0x33a>
		__ticks = 1;
    3a54:	81 e0       	ldi	r24, 0x01	; 1
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	9e 83       	std	Y+6, r25	; 0x06
    3a5a:	8d 83       	std	Y+5, r24	; 0x05
    3a5c:	3f c0       	rjmp	.+126    	; 0x3adc <LCD_display_Character+0x3b8>
	else if (__tmp > 65535)
    3a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a60:	78 85       	ldd	r23, Y+8	; 0x08
    3a62:	89 85       	ldd	r24, Y+9	; 0x09
    3a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a66:	20 e0       	ldi	r18, 0x00	; 0
    3a68:	3f ef       	ldi	r19, 0xFF	; 255
    3a6a:	4f e7       	ldi	r20, 0x7F	; 127
    3a6c:	57 e4       	ldi	r21, 0x47	; 71
    3a6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a72:	18 16       	cp	r1, r24
    3a74:	4c f5       	brge	.+82     	; 0x3ac8 <LCD_display_Character+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a76:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a78:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a7e:	20 e0       	ldi	r18, 0x00	; 0
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	40 e2       	ldi	r20, 0x20	; 32
    3a84:	51 e4       	ldi	r21, 0x41	; 65
    3a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a8a:	dc 01       	movw	r26, r24
    3a8c:	cb 01       	movw	r24, r22
    3a8e:	bc 01       	movw	r22, r24
    3a90:	cd 01       	movw	r24, r26
    3a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a96:	dc 01       	movw	r26, r24
    3a98:	cb 01       	movw	r24, r22
    3a9a:	9e 83       	std	Y+6, r25	; 0x06
    3a9c:	8d 83       	std	Y+5, r24	; 0x05
    3a9e:	0f c0       	rjmp	.+30     	; 0x3abe <LCD_display_Character+0x39a>
    3aa0:	88 ec       	ldi	r24, 0xC8	; 200
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	9c 83       	std	Y+4, r25	; 0x04
    3aa6:	8b 83       	std	Y+3, r24	; 0x03
    3aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    3aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    3aac:	01 97       	sbiw	r24, 0x01	; 1
    3aae:	f1 f7       	brne	.-4      	; 0x3aac <LCD_display_Character+0x388>
    3ab0:	9c 83       	std	Y+4, r25	; 0x04
    3ab2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab8:	01 97       	sbiw	r24, 0x01	; 1
    3aba:	9e 83       	std	Y+6, r25	; 0x06
    3abc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3abe:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac2:	00 97       	sbiw	r24, 0x00	; 0
    3ac4:	69 f7       	brne	.-38     	; 0x3aa0 <LCD_display_Character+0x37c>
    3ac6:	14 c0       	rjmp	.+40     	; 0x3af0 <LCD_display_Character+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    3aca:	78 85       	ldd	r23, Y+8	; 0x08
    3acc:	89 85       	ldd	r24, Y+9	; 0x09
    3ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	cb 01       	movw	r24, r22
    3ad8:	9e 83       	std	Y+6, r25	; 0x06
    3ada:	8d 83       	std	Y+5, r24	; 0x05
    3adc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ade:	9e 81       	ldd	r25, Y+6	; 0x06
    3ae0:	9a 83       	std	Y+2, r25	; 0x02
    3ae2:	89 83       	std	Y+1, r24	; 0x01
    3ae4:	89 81       	ldd	r24, Y+1	; 0x01
    3ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae8:	01 97       	sbiw	r24, 0x01	; 1
    3aea:	f1 f7       	brne	.-4      	; 0x3ae8 <LCD_display_Character+0x3c4>
    3aec:	9a 83       	std	Y+2, r25	; 0x02
    3aee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3af0:	e9 96       	adiw	r28, 0x39	; 57
    3af2:	0f b6       	in	r0, 0x3f	; 63
    3af4:	f8 94       	cli
    3af6:	de bf       	out	0x3e, r29	; 62
    3af8:	0f be       	out	0x3f, r0	; 63
    3afa:	cd bf       	out	0x3d, r28	; 61
    3afc:	cf 91       	pop	r28
    3afe:	df 91       	pop	r29
    3b00:	08 95       	ret

00003b02 <LCD_displayString>:
// description: display required string on screen

void LCD_displayString(const char *Str){
    3b02:	df 93       	push	r29
    3b04:	cf 93       	push	r28
    3b06:	00 d0       	rcall	.+0      	; 0x3b08 <LCD_displayString+0x6>
    3b08:	0f 92       	push	r0
    3b0a:	cd b7       	in	r28, 0x3d	; 61
    3b0c:	de b7       	in	r29, 0x3e	; 62
    3b0e:	9b 83       	std	Y+3, r25	; 0x03
    3b10:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i=0;
    3b12:	19 82       	std	Y+1, r1	; 0x01
    3b14:	0e c0       	rjmp	.+28     	; 0x3b32 <LCD_displayString+0x30>
	while(Str[i]!='\0')
	{
		LCD_display_Character(Str[i]);
    3b16:	89 81       	ldd	r24, Y+1	; 0x01
    3b18:	28 2f       	mov	r18, r24
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b1e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b20:	fc 01       	movw	r30, r24
    3b22:	e2 0f       	add	r30, r18
    3b24:	f3 1f       	adc	r31, r19
    3b26:	80 81       	ld	r24, Z
    3b28:	0e 94 92 1b 	call	0x3724	; 0x3724 <LCD_display_Character>
		i++;
    3b2c:	89 81       	ldd	r24, Y+1	; 0x01
    3b2e:	8f 5f       	subi	r24, 0xFF	; 255
    3b30:	89 83       	std	Y+1, r24	; 0x01
// description: display required string on screen

void LCD_displayString(const char *Str){

	uint8 i=0;
	while(Str[i]!='\0')
    3b32:	89 81       	ldd	r24, Y+1	; 0x01
    3b34:	28 2f       	mov	r18, r24
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b3c:	fc 01       	movw	r30, r24
    3b3e:	e2 0f       	add	r30, r18
    3b40:	f3 1f       	adc	r31, r19
    3b42:	80 81       	ld	r24, Z
    3b44:	88 23       	and	r24, r24
    3b46:	39 f7       	brne	.-50     	; 0x3b16 <LCD_displayString+0x14>
	{
		LCD_display_Character(Str[i]);
		i++;
	}
}
    3b48:	0f 90       	pop	r0
    3b4a:	0f 90       	pop	r0
    3b4c:	0f 90       	pop	r0
    3b4e:	cf 91       	pop	r28
    3b50:	df 91       	pop	r29
    3b52:	08 95       	ret

00003b54 <LCD_moveCursor>:

// description: move cursor to required row and coloumn

void LCD_moveCursor(uint8 row,uint8 col)
{
    3b54:	df 93       	push	r29
    3b56:	cf 93       	push	r28
    3b58:	00 d0       	rcall	.+0      	; 0x3b5a <LCD_moveCursor+0x6>
    3b5a:	00 d0       	rcall	.+0      	; 0x3b5c <LCD_moveCursor+0x8>
    3b5c:	0f 92       	push	r0
    3b5e:	cd b7       	in	r28, 0x3d	; 61
    3b60:	de b7       	in	r29, 0x3e	; 62
    3b62:	8a 83       	std	Y+2, r24	; 0x02
    3b64:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3b66:	8a 81       	ldd	r24, Y+2	; 0x02
    3b68:	28 2f       	mov	r18, r24
    3b6a:	30 e0       	ldi	r19, 0x00	; 0
    3b6c:	3d 83       	std	Y+5, r19	; 0x05
    3b6e:	2c 83       	std	Y+4, r18	; 0x04
    3b70:	8c 81       	ldd	r24, Y+4	; 0x04
    3b72:	9d 81       	ldd	r25, Y+5	; 0x05
    3b74:	81 30       	cpi	r24, 0x01	; 1
    3b76:	91 05       	cpc	r25, r1
    3b78:	c1 f0       	breq	.+48     	; 0x3baa <LCD_moveCursor+0x56>
    3b7a:	2c 81       	ldd	r18, Y+4	; 0x04
    3b7c:	3d 81       	ldd	r19, Y+5	; 0x05
    3b7e:	22 30       	cpi	r18, 0x02	; 2
    3b80:	31 05       	cpc	r19, r1
    3b82:	2c f4       	brge	.+10     	; 0x3b8e <LCD_moveCursor+0x3a>
    3b84:	8c 81       	ldd	r24, Y+4	; 0x04
    3b86:	9d 81       	ldd	r25, Y+5	; 0x05
    3b88:	00 97       	sbiw	r24, 0x00	; 0
    3b8a:	61 f0       	breq	.+24     	; 0x3ba4 <LCD_moveCursor+0x50>
    3b8c:	19 c0       	rjmp	.+50     	; 0x3bc0 <LCD_moveCursor+0x6c>
    3b8e:	2c 81       	ldd	r18, Y+4	; 0x04
    3b90:	3d 81       	ldd	r19, Y+5	; 0x05
    3b92:	22 30       	cpi	r18, 0x02	; 2
    3b94:	31 05       	cpc	r19, r1
    3b96:	69 f0       	breq	.+26     	; 0x3bb2 <LCD_moveCursor+0x5e>
    3b98:	8c 81       	ldd	r24, Y+4	; 0x04
    3b9a:	9d 81       	ldd	r25, Y+5	; 0x05
    3b9c:	83 30       	cpi	r24, 0x03	; 3
    3b9e:	91 05       	cpc	r25, r1
    3ba0:	61 f0       	breq	.+24     	; 0x3bba <LCD_moveCursor+0x66>
    3ba2:	0e c0       	rjmp	.+28     	; 0x3bc0 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    3ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba6:	89 83       	std	Y+1, r24	; 0x01
    3ba8:	0b c0       	rjmp	.+22     	; 0x3bc0 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    3baa:	8b 81       	ldd	r24, Y+3	; 0x03
    3bac:	80 5c       	subi	r24, 0xC0	; 192
    3bae:	89 83       	std	Y+1, r24	; 0x01
    3bb0:	07 c0       	rjmp	.+14     	; 0x3bc0 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    3bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb4:	80 5f       	subi	r24, 0xF0	; 240
    3bb6:	89 83       	std	Y+1, r24	; 0x01
    3bb8:	03 c0       	rjmp	.+6      	; 0x3bc0 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    3bba:	8b 81       	ldd	r24, Y+3	; 0x03
    3bbc:	80 5b       	subi	r24, 0xB0	; 176
    3bbe:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
    3bc2:	80 68       	ori	r24, 0x80	; 128
    3bc4:	0e 94 a3 19 	call	0x3346	; 0x3346 <LCD_sendCommand>
}
    3bc8:	0f 90       	pop	r0
    3bca:	0f 90       	pop	r0
    3bcc:	0f 90       	pop	r0
    3bce:	0f 90       	pop	r0
    3bd0:	0f 90       	pop	r0
    3bd2:	cf 91       	pop	r28
    3bd4:	df 91       	pop	r29
    3bd6:	08 95       	ret

00003bd8 <LCD_displayStringRowColumn>:

// Description:Display the required string in a specified row and column index on the screen

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3bd8:	df 93       	push	r29
    3bda:	cf 93       	push	r28
    3bdc:	00 d0       	rcall	.+0      	; 0x3bde <LCD_displayStringRowColumn+0x6>
    3bde:	00 d0       	rcall	.+0      	; 0x3be0 <LCD_displayStringRowColumn+0x8>
    3be0:	cd b7       	in	r28, 0x3d	; 61
    3be2:	de b7       	in	r29, 0x3e	; 62
    3be4:	89 83       	std	Y+1, r24	; 0x01
    3be6:	6a 83       	std	Y+2, r22	; 0x02
    3be8:	5c 83       	std	Y+4, r21	; 0x04
    3bea:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3bec:	89 81       	ldd	r24, Y+1	; 0x01
    3bee:	6a 81       	ldd	r22, Y+2	; 0x02
    3bf0:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    3bf8:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
}
    3bfc:	0f 90       	pop	r0
    3bfe:	0f 90       	pop	r0
    3c00:	0f 90       	pop	r0
    3c02:	0f 90       	pop	r0
    3c04:	cf 91       	pop	r28
    3c06:	df 91       	pop	r29
    3c08:	08 95       	ret

00003c0a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3c0a:	df 93       	push	r29
    3c0c:	cf 93       	push	r28
    3c0e:	cd b7       	in	r28, 0x3d	; 61
    3c10:	de b7       	in	r29, 0x3e	; 62
    3c12:	62 97       	sbiw	r28, 0x12	; 18
    3c14:	0f b6       	in	r0, 0x3f	; 63
    3c16:	f8 94       	cli
    3c18:	de bf       	out	0x3e, r29	; 62
    3c1a:	0f be       	out	0x3f, r0	; 63
    3c1c:	cd bf       	out	0x3d, r28	; 61
    3c1e:	9a 8b       	std	Y+18, r25	; 0x12
    3c20:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /*itoa C function to convert data to corresponding ASCII, 10 for decimal */
    3c22:	89 89       	ldd	r24, Y+17	; 0x11
    3c24:	9a 89       	ldd	r25, Y+18	; 0x12
    3c26:	9e 01       	movw	r18, r28
    3c28:	2f 5f       	subi	r18, 0xFF	; 255
    3c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c2c:	b9 01       	movw	r22, r18
    3c2e:	4a e0       	ldi	r20, 0x0A	; 10
    3c30:	50 e0       	ldi	r21, 0x00	; 0
    3c32:	0e 94 ee 20 	call	0x41dc	; 0x41dc <itoa>
   LCD_displayString(buff); /* Display the string */
    3c36:	ce 01       	movw	r24, r28
    3c38:	01 96       	adiw	r24, 0x01	; 1
    3c3a:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_displayString>
}
    3c3e:	62 96       	adiw	r28, 0x12	; 18
    3c40:	0f b6       	in	r0, 0x3f	; 63
    3c42:	f8 94       	cli
    3c44:	de bf       	out	0x3e, r29	; 62
    3c46:	0f be       	out	0x3f, r0	; 63
    3c48:	cd bf       	out	0x3d, r28	; 61
    3c4a:	cf 91       	pop	r28
    3c4c:	df 91       	pop	r29
    3c4e:	08 95       	ret

00003c50 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3c50:	df 93       	push	r29
    3c52:	cf 93       	push	r28
    3c54:	cd b7       	in	r28, 0x3d	; 61
    3c56:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3c58:	81 e0       	ldi	r24, 0x01	; 1
    3c5a:	0e 94 a3 19 	call	0x3346	; 0x3346 <LCD_sendCommand>
}
    3c5e:	cf 91       	pop	r28
    3c60:	df 91       	pop	r29
    3c62:	08 95       	ret

00003c64 <__vector_9>:

/*******************************************************************************
 *                     ISR Definitions                                  *
 *******************************************************************************/

ISR(TIMER1_OVF_vect){ //ISR for Timer in normal mode
    3c64:	1f 92       	push	r1
    3c66:	0f 92       	push	r0
    3c68:	0f b6       	in	r0, 0x3f	; 63
    3c6a:	0f 92       	push	r0
    3c6c:	11 24       	eor	r1, r1
    3c6e:	2f 93       	push	r18
    3c70:	3f 93       	push	r19
    3c72:	4f 93       	push	r20
    3c74:	5f 93       	push	r21
    3c76:	6f 93       	push	r22
    3c78:	7f 93       	push	r23
    3c7a:	8f 93       	push	r24
    3c7c:	9f 93       	push	r25
    3c7e:	af 93       	push	r26
    3c80:	bf 93       	push	r27
    3c82:	ef 93       	push	r30
    3c84:	ff 93       	push	r31
    3c86:	df 93       	push	r29
    3c88:	cf 93       	push	r28
    3c8a:	cd b7       	in	r28, 0x3d	; 61
    3c8c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3c8e:	80 91 97 01 	lds	r24, 0x0197
    3c92:	90 91 98 01 	lds	r25, 0x0198
    3c96:	00 97       	sbiw	r24, 0x00	; 0
    3c98:	29 f0       	breq	.+10     	; 0x3ca4 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3c9a:	e0 91 97 01 	lds	r30, 0x0197
    3c9e:	f0 91 98 01 	lds	r31, 0x0198
    3ca2:	09 95       	icall
	}

}
    3ca4:	cf 91       	pop	r28
    3ca6:	df 91       	pop	r29
    3ca8:	ff 91       	pop	r31
    3caa:	ef 91       	pop	r30
    3cac:	bf 91       	pop	r27
    3cae:	af 91       	pop	r26
    3cb0:	9f 91       	pop	r25
    3cb2:	8f 91       	pop	r24
    3cb4:	7f 91       	pop	r23
    3cb6:	6f 91       	pop	r22
    3cb8:	5f 91       	pop	r21
    3cba:	4f 91       	pop	r20
    3cbc:	3f 91       	pop	r19
    3cbe:	2f 91       	pop	r18
    3cc0:	0f 90       	pop	r0
    3cc2:	0f be       	out	0x3f, r0	; 63
    3cc4:	0f 90       	pop	r0
    3cc6:	1f 90       	pop	r1
    3cc8:	18 95       	reti

00003cca <__vector_7>:

ISR(TIMER1_COMPA_vect){ //ISR for timer in CTC mode
    3cca:	1f 92       	push	r1
    3ccc:	0f 92       	push	r0
    3cce:	0f b6       	in	r0, 0x3f	; 63
    3cd0:	0f 92       	push	r0
    3cd2:	11 24       	eor	r1, r1
    3cd4:	2f 93       	push	r18
    3cd6:	3f 93       	push	r19
    3cd8:	4f 93       	push	r20
    3cda:	5f 93       	push	r21
    3cdc:	6f 93       	push	r22
    3cde:	7f 93       	push	r23
    3ce0:	8f 93       	push	r24
    3ce2:	9f 93       	push	r25
    3ce4:	af 93       	push	r26
    3ce6:	bf 93       	push	r27
    3ce8:	ef 93       	push	r30
    3cea:	ff 93       	push	r31
    3cec:	df 93       	push	r29
    3cee:	cf 93       	push	r28
    3cf0:	cd b7       	in	r28, 0x3d	; 61
    3cf2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3cf4:	80 91 97 01 	lds	r24, 0x0197
    3cf8:	90 91 98 01 	lds	r25, 0x0198
    3cfc:	00 97       	sbiw	r24, 0x00	; 0
    3cfe:	29 f0       	breq	.+10     	; 0x3d0a <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3d00:	e0 91 97 01 	lds	r30, 0x0197
    3d04:	f0 91 98 01 	lds	r31, 0x0198
    3d08:	09 95       	icall
	}

}
    3d0a:	cf 91       	pop	r28
    3d0c:	df 91       	pop	r29
    3d0e:	ff 91       	pop	r31
    3d10:	ef 91       	pop	r30
    3d12:	bf 91       	pop	r27
    3d14:	af 91       	pop	r26
    3d16:	9f 91       	pop	r25
    3d18:	8f 91       	pop	r24
    3d1a:	7f 91       	pop	r23
    3d1c:	6f 91       	pop	r22
    3d1e:	5f 91       	pop	r21
    3d20:	4f 91       	pop	r20
    3d22:	3f 91       	pop	r19
    3d24:	2f 91       	pop	r18
    3d26:	0f 90       	pop	r0
    3d28:	0f be       	out	0x3f, r0	; 63
    3d2a:	0f 90       	pop	r0
    3d2c:	1f 90       	pop	r1
    3d2e:	18 95       	reti

00003d30 <Timer1_init>:


/*
 * Description: Function to initialize timer according to choosen configuration
 */
void Timer1_init(const Timer1_ConfigType (* Config_Ptr)){
    3d30:	df 93       	push	r29
    3d32:	cf 93       	push	r28
    3d34:	00 d0       	rcall	.+0      	; 0x3d36 <Timer1_init+0x6>
    3d36:	cd b7       	in	r28, 0x3d	; 61
    3d38:	de b7       	in	r29, 0x3e	; 62
    3d3a:	9a 83       	std	Y+2, r25	; 0x02
    3d3c:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B= (TCCR1B&0xF7) | ((Config_Ptr->mode)<<3); //choose mode of timer between CTC and normal(overflow)
    3d3e:	ae e4       	ldi	r26, 0x4E	; 78
    3d40:	b0 e0       	ldi	r27, 0x00	; 0
    3d42:	ee e4       	ldi	r30, 0x4E	; 78
    3d44:	f0 e0       	ldi	r31, 0x00	; 0
    3d46:	80 81       	ld	r24, Z
    3d48:	28 2f       	mov	r18, r24
    3d4a:	27 7f       	andi	r18, 0xF7	; 247
    3d4c:	e9 81       	ldd	r30, Y+1	; 0x01
    3d4e:	fa 81       	ldd	r31, Y+2	; 0x02
    3d50:	85 81       	ldd	r24, Z+5	; 0x05
    3d52:	88 2f       	mov	r24, r24
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	88 0f       	add	r24, r24
    3d58:	99 1f       	adc	r25, r25
    3d5a:	88 0f       	add	r24, r24
    3d5c:	99 1f       	adc	r25, r25
    3d5e:	88 0f       	add	r24, r24
    3d60:	99 1f       	adc	r25, r25
    3d62:	82 2b       	or	r24, r18
    3d64:	8c 93       	st	X, r24
	TCCR1B= ((TCCR1B&0xF8) | (Config_Ptr->prescaler));
    3d66:	ae e4       	ldi	r26, 0x4E	; 78
    3d68:	b0 e0       	ldi	r27, 0x00	; 0
    3d6a:	ee e4       	ldi	r30, 0x4E	; 78
    3d6c:	f0 e0       	ldi	r31, 0x00	; 0
    3d6e:	80 81       	ld	r24, Z
    3d70:	98 2f       	mov	r25, r24
    3d72:	98 7f       	andi	r25, 0xF8	; 248
    3d74:	e9 81       	ldd	r30, Y+1	; 0x01
    3d76:	fa 81       	ldd	r31, Y+2	; 0x02
    3d78:	84 81       	ldd	r24, Z+4	; 0x04
    3d7a:	89 2b       	or	r24, r25
    3d7c:	8c 93       	st	X, r24
	TCNT1=Config_Ptr->initial_value;//value timer starts counting from
    3d7e:	ac e4       	ldi	r26, 0x4C	; 76
    3d80:	b0 e0       	ldi	r27, 0x00	; 0
    3d82:	e9 81       	ldd	r30, Y+1	; 0x01
    3d84:	fa 81       	ldd	r31, Y+2	; 0x02
    3d86:	80 81       	ld	r24, Z
    3d88:	91 81       	ldd	r25, Z+1	; 0x01
    3d8a:	11 96       	adiw	r26, 0x01	; 1
    3d8c:	9c 93       	st	X, r25
    3d8e:	8e 93       	st	-X, r24
	if(Config_Ptr->mode==CTC){
    3d90:	e9 81       	ldd	r30, Y+1	; 0x01
    3d92:	fa 81       	ldd	r31, Y+2	; 0x02
    3d94:	85 81       	ldd	r24, Z+5	; 0x05
    3d96:	81 30       	cpi	r24, 0x01	; 1
    3d98:	c1 f4       	brne	.+48     	; 0x3dca <Timer1_init+0x9a>
		OCR1A=Config_Ptr->compare_value; //value compared with in CTC mode
    3d9a:	aa e4       	ldi	r26, 0x4A	; 74
    3d9c:	b0 e0       	ldi	r27, 0x00	; 0
    3d9e:	e9 81       	ldd	r30, Y+1	; 0x01
    3da0:	fa 81       	ldd	r31, Y+2	; 0x02
    3da2:	82 81       	ldd	r24, Z+2	; 0x02
    3da4:	93 81       	ldd	r25, Z+3	; 0x03
    3da6:	11 96       	adiw	r26, 0x01	; 1
    3da8:	9c 93       	st	X, r25
    3daa:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A);//enable CTC interrupt
    3dac:	a9 e5       	ldi	r26, 0x59	; 89
    3dae:	b0 e0       	ldi	r27, 0x00	; 0
    3db0:	e9 e5       	ldi	r30, 0x59	; 89
    3db2:	f0 e0       	ldi	r31, 0x00	; 0
    3db4:	80 81       	ld	r24, Z
    3db6:	80 61       	ori	r24, 0x10	; 16
    3db8:	8c 93       	st	X, r24
		TCCR1A |= (1<<FOC1A); //timer work at compare mode
    3dba:	af e4       	ldi	r26, 0x4F	; 79
    3dbc:	b0 e0       	ldi	r27, 0x00	; 0
    3dbe:	ef e4       	ldi	r30, 0x4F	; 79
    3dc0:	f0 e0       	ldi	r31, 0x00	; 0
    3dc2:	80 81       	ld	r24, Z
    3dc4:	88 60       	ori	r24, 0x08	; 8
    3dc6:	8c 93       	st	X, r24
    3dc8:	0c c0       	rjmp	.+24     	; 0x3de2 <Timer1_init+0xb2>
	}
	else if(Config_Ptr->mode==0){
    3dca:	e9 81       	ldd	r30, Y+1	; 0x01
    3dcc:	fa 81       	ldd	r31, Y+2	; 0x02
    3dce:	85 81       	ldd	r24, Z+5	; 0x05
    3dd0:	88 23       	and	r24, r24
    3dd2:	39 f4       	brne	.+14     	; 0x3de2 <Timer1_init+0xb2>
		TIMSK |= (1<<TOIE1); //enable overflow interrupt
    3dd4:	a9 e5       	ldi	r26, 0x59	; 89
    3dd6:	b0 e0       	ldi	r27, 0x00	; 0
    3dd8:	e9 e5       	ldi	r30, 0x59	; 89
    3dda:	f0 e0       	ldi	r31, 0x00	; 0
    3ddc:	80 81       	ld	r24, Z
    3dde:	84 60       	ori	r24, 0x04	; 4
    3de0:	8c 93       	st	X, r24
	}

}
    3de2:	0f 90       	pop	r0
    3de4:	0f 90       	pop	r0
    3de6:	cf 91       	pop	r28
    3de8:	df 91       	pop	r29
    3dea:	08 95       	ret

00003dec <Timer1_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    3dec:	df 93       	push	r29
    3dee:	cf 93       	push	r28
    3df0:	00 d0       	rcall	.+0      	; 0x3df2 <Timer1_setCallBack+0x6>
    3df2:	cd b7       	in	r28, 0x3d	; 61
    3df4:	de b7       	in	r29, 0x3e	; 62
    3df6:	9a 83       	std	Y+2, r25	; 0x02
    3df8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    3dfa:	89 81       	ldd	r24, Y+1	; 0x01
    3dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dfe:	90 93 98 01 	sts	0x0198, r25
    3e02:	80 93 97 01 	sts	0x0197, r24
}
    3e06:	0f 90       	pop	r0
    3e08:	0f 90       	pop	r0
    3e0a:	cf 91       	pop	r28
    3e0c:	df 91       	pop	r29
    3e0e:	08 95       	ret

00003e10 <PWM_Timer0_Start>:


void PWM_Timer0_Start(uint8 duty_cycle){
    3e10:	df 93       	push	r29
    3e12:	cf 93       	push	r28
    3e14:	0f 92       	push	r0
    3e16:	cd b7       	in	r28, 0x3d	; 61
    3e18:	de b7       	in	r29, 0x3e	; 62
    3e1a:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = timer_initial_value; // Set Timer Initial Value to 0
    3e1c:	e2 e5       	ldi	r30, 0x52	; 82
    3e1e:	f0 e0       	ldi	r31, 0x00	; 0
    3e20:	10 82       	st	Z, r1
	OCR0  = duty_cycle; // Set Compare Value
    3e22:	ec e5       	ldi	r30, 0x5C	; 92
    3e24:	f0 e0       	ldi	r31, 0x00	; 0
    3e26:	89 81       	ldd	r24, Y+1	; 0x01
    3e28:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PORTD_ID,PIN4_ID,PIN_OUTPUT);
    3e2a:	83 e0       	ldi	r24, 0x03	; 3
    3e2c:	64 e0       	ldi	r22, 0x04	; 4
    3e2e:	41 e0       	ldi	r20, 0x01	; 1
    3e30:	0e 94 b9 14 	call	0x2972	; 0x2972 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	SET_BIT(TCCR0,WGM00);
    3e34:	a3 e5       	ldi	r26, 0x53	; 83
    3e36:	b0 e0       	ldi	r27, 0x00	; 0
    3e38:	e3 e5       	ldi	r30, 0x53	; 83
    3e3a:	f0 e0       	ldi	r31, 0x00	; 0
    3e3c:	80 81       	ld	r24, Z
    3e3e:	80 64       	ori	r24, 0x40	; 64
    3e40:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    3e42:	a3 e5       	ldi	r26, 0x53	; 83
    3e44:	b0 e0       	ldi	r27, 0x00	; 0
    3e46:	e3 e5       	ldi	r30, 0x53	; 83
    3e48:	f0 e0       	ldi	r31, 0x00	; 0
    3e4a:	80 81       	ld	r24, Z
    3e4c:	88 60       	ori	r24, 0x08	; 8
    3e4e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,FOC0);
    3e50:	a3 e5       	ldi	r26, 0x53	; 83
    3e52:	b0 e0       	ldi	r27, 0x00	; 0
    3e54:	e3 e5       	ldi	r30, 0x53	; 83
    3e56:	f0 e0       	ldi	r31, 0x00	; 0
    3e58:	80 81       	ld	r24, Z
    3e5a:	8f 77       	andi	r24, 0x7F	; 127
    3e5c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    3e5e:	a3 e5       	ldi	r26, 0x53	; 83
    3e60:	b0 e0       	ldi	r27, 0x00	; 0
    3e62:	e3 e5       	ldi	r30, 0x53	; 83
    3e64:	f0 e0       	ldi	r31, 0x00	; 0
    3e66:	80 81       	ld	r24, Z
    3e68:	80 62       	ori	r24, 0x20	; 32
    3e6a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,COM00);
    3e6c:	a3 e5       	ldi	r26, 0x53	; 83
    3e6e:	b0 e0       	ldi	r27, 0x00	; 0
    3e70:	e3 e5       	ldi	r30, 0x53	; 83
    3e72:	f0 e0       	ldi	r31, 0x00	; 0
    3e74:	80 81       	ld	r24, Z
    3e76:	8f 7e       	andi	r24, 0xEF	; 239
    3e78:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS00);
    3e7a:	a3 e5       	ldi	r26, 0x53	; 83
    3e7c:	b0 e0       	ldi	r27, 0x00	; 0
    3e7e:	e3 e5       	ldi	r30, 0x53	; 83
    3e80:	f0 e0       	ldi	r31, 0x00	; 0
    3e82:	80 81       	ld	r24, Z
    3e84:	8e 7f       	andi	r24, 0xFE	; 254
    3e86:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    3e88:	a3 e5       	ldi	r26, 0x53	; 83
    3e8a:	b0 e0       	ldi	r27, 0x00	; 0
    3e8c:	e3 e5       	ldi	r30, 0x53	; 83
    3e8e:	f0 e0       	ldi	r31, 0x00	; 0
    3e90:	80 81       	ld	r24, Z
    3e92:	82 60       	ori	r24, 0x02	; 2
    3e94:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS02);
    3e96:	a3 e5       	ldi	r26, 0x53	; 83
    3e98:	b0 e0       	ldi	r27, 0x00	; 0
    3e9a:	e3 e5       	ldi	r30, 0x53	; 83
    3e9c:	f0 e0       	ldi	r31, 0x00	; 0
    3e9e:	80 81       	ld	r24, Z
    3ea0:	8b 7f       	andi	r24, 0xFB	; 251
    3ea2:	8c 93       	st	X, r24

}
    3ea4:	0f 90       	pop	r0
    3ea6:	cf 91       	pop	r28
    3ea8:	df 91       	pop	r29
    3eaa:	08 95       	ret

00003eac <Timer1_deInit>:

/*
 * Description: Function to de-initialize timer function.
 * put all timer registers with zero
 */
void Timer1_deInit(void){
    3eac:	df 93       	push	r29
    3eae:	cf 93       	push	r28
    3eb0:	cd b7       	in	r28, 0x3d	; 61
    3eb2:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=0;
    3eb4:	ee e4       	ldi	r30, 0x4E	; 78
    3eb6:	f0 e0       	ldi	r31, 0x00	; 0
    3eb8:	10 82       	st	Z, r1
	TIMSK=0;
    3eba:	e9 e5       	ldi	r30, 0x59	; 89
    3ebc:	f0 e0       	ldi	r31, 0x00	; 0
    3ebe:	10 82       	st	Z, r1
	TCCR1A = 0;
    3ec0:	ef e4       	ldi	r30, 0x4F	; 79
    3ec2:	f0 e0       	ldi	r31, 0x00	; 0
    3ec4:	10 82       	st	Z, r1
}
    3ec6:	cf 91       	pop	r28
    3ec8:	df 91       	pop	r29
    3eca:	08 95       	ret

00003ecc <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3ecc:	df 93       	push	r29
    3ece:	cf 93       	push	r28
    3ed0:	00 d0       	rcall	.+0      	; 0x3ed2 <UART_init+0x6>
    3ed2:	00 d0       	rcall	.+0      	; 0x3ed4 <UART_init+0x8>
    3ed4:	cd b7       	in	r28, 0x3d	; 61
    3ed6:	de b7       	in	r29, 0x3e	; 62
    3ed8:	9c 83       	std	Y+4, r25	; 0x04
    3eda:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3edc:	1a 82       	std	Y+2, r1	; 0x02
    3ede:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3ee0:	eb e2       	ldi	r30, 0x2B	; 43
    3ee2:	f0 e0       	ldi	r31, 0x00	; 0
    3ee4:	82 e0       	ldi	r24, 0x02	; 2
    3ee6:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3ee8:	ea e2       	ldi	r30, 0x2A	; 42
    3eea:	f0 e0       	ldi	r31, 0x00	; 0
    3eec:	88 e1       	ldi	r24, 0x18	; 24
    3eee:	80 83       	st	Z, r24

	/*  bit-data as required in configuration */
	UCSRB = (UCSRB & 0xFB) | (((Config_Ptr->bit_data)>>2)<<UCSZ2);
    3ef0:	aa e2       	ldi	r26, 0x2A	; 42
    3ef2:	b0 e0       	ldi	r27, 0x00	; 0
    3ef4:	ea e2       	ldi	r30, 0x2A	; 42
    3ef6:	f0 e0       	ldi	r31, 0x00	; 0
    3ef8:	80 81       	ld	r24, Z
    3efa:	28 2f       	mov	r18, r24
    3efc:	2b 7f       	andi	r18, 0xFB	; 251
    3efe:	eb 81       	ldd	r30, Y+3	; 0x03
    3f00:	fc 81       	ldd	r31, Y+4	; 0x04
    3f02:	86 81       	ldd	r24, Z+6	; 0x06
    3f04:	86 95       	lsr	r24
    3f06:	86 95       	lsr	r24
    3f08:	88 2f       	mov	r24, r24
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	88 0f       	add	r24, r24
    3f0e:	99 1f       	adc	r25, r25
    3f10:	88 0f       	add	r24, r24
    3f12:	99 1f       	adc	r25, r25
    3f14:	82 2b       	or	r24, r18
    3f16:	8c 93       	st	X, r24
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    3f18:	e0 e4       	ldi	r30, 0x40	; 64
    3f1a:	f0 e0       	ldi	r31, 0x00	; 0
    3f1c:	80 e8       	ldi	r24, 0x80	; 128
    3f1e:	80 83       	st	Z, r24

	/*  bit-data as required in configuration */
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data & 0x03)<<UCSZ1);
    3f20:	a0 e4       	ldi	r26, 0x40	; 64
    3f22:	b0 e0       	ldi	r27, 0x00	; 0
    3f24:	e0 e4       	ldi	r30, 0x40	; 64
    3f26:	f0 e0       	ldi	r31, 0x00	; 0
    3f28:	80 81       	ld	r24, Z
    3f2a:	28 2f       	mov	r18, r24
    3f2c:	29 7f       	andi	r18, 0xF9	; 249
    3f2e:	eb 81       	ldd	r30, Y+3	; 0x03
    3f30:	fc 81       	ldd	r31, Y+4	; 0x04
    3f32:	86 81       	ldd	r24, Z+6	; 0x06
    3f34:	88 2f       	mov	r24, r24
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	83 70       	andi	r24, 0x03	; 3
    3f3a:	90 70       	andi	r25, 0x00	; 0
    3f3c:	88 0f       	add	r24, r24
    3f3e:	99 1f       	adc	r25, r25
    3f40:	88 0f       	add	r24, r24
    3f42:	99 1f       	adc	r25, r25
    3f44:	82 2b       	or	r24, r18
    3f46:	8c 93       	st	X, r24

	/*  parity test as required in configuration */
	UCSRC =	(UCSRC & 0xCF) | ((Config_Ptr->parity & 0x03)<<UPM0);
    3f48:	a0 e4       	ldi	r26, 0x40	; 64
    3f4a:	b0 e0       	ldi	r27, 0x00	; 0
    3f4c:	e0 e4       	ldi	r30, 0x40	; 64
    3f4e:	f0 e0       	ldi	r31, 0x00	; 0
    3f50:	80 81       	ld	r24, Z
    3f52:	28 2f       	mov	r18, r24
    3f54:	2f 7c       	andi	r18, 0xCF	; 207
    3f56:	eb 81       	ldd	r30, Y+3	; 0x03
    3f58:	fc 81       	ldd	r31, Y+4	; 0x04
    3f5a:	85 81       	ldd	r24, Z+5	; 0x05
    3f5c:	88 2f       	mov	r24, r24
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	83 70       	andi	r24, 0x03	; 3
    3f62:	90 70       	andi	r25, 0x00	; 0
    3f64:	82 95       	swap	r24
    3f66:	92 95       	swap	r25
    3f68:	90 7f       	andi	r25, 0xF0	; 240
    3f6a:	98 27       	eor	r25, r24
    3f6c:	80 7f       	andi	r24, 0xF0	; 240
    3f6e:	98 27       	eor	r25, r24
    3f70:	82 2b       	or	r24, r18
    3f72:	8c 93       	st	X, r24

	/*  stop bit as required in configuration */
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_Bit & 0x01)<<USBS);
    3f74:	a0 e4       	ldi	r26, 0x40	; 64
    3f76:	b0 e0       	ldi	r27, 0x00	; 0
    3f78:	e0 e4       	ldi	r30, 0x40	; 64
    3f7a:	f0 e0       	ldi	r31, 0x00	; 0
    3f7c:	80 81       	ld	r24, Z
    3f7e:	28 2f       	mov	r18, r24
    3f80:	27 7f       	andi	r18, 0xF7	; 247
    3f82:	eb 81       	ldd	r30, Y+3	; 0x03
    3f84:	fc 81       	ldd	r31, Y+4	; 0x04
    3f86:	84 81       	ldd	r24, Z+4	; 0x04
    3f88:	88 2f       	mov	r24, r24
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	81 70       	andi	r24, 0x01	; 1
    3f8e:	90 70       	andi	r25, 0x00	; 0
    3f90:	88 0f       	add	r24, r24
    3f92:	99 1f       	adc	r25, r25
    3f94:	88 0f       	add	r24, r24
    3f96:	99 1f       	adc	r25, r25
    3f98:	88 0f       	add	r24, r24
    3f9a:	99 1f       	adc	r25, r25
    3f9c:	82 2b       	or	r24, r18
    3f9e:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->UART_BaudRate * 8UL))) - 1);
    3fa0:	eb 81       	ldd	r30, Y+3	; 0x03
    3fa2:	fc 81       	ldd	r31, Y+4	; 0x04
    3fa4:	80 81       	ld	r24, Z
    3fa6:	91 81       	ldd	r25, Z+1	; 0x01
    3fa8:	a2 81       	ldd	r26, Z+2	; 0x02
    3faa:	b3 81       	ldd	r27, Z+3	; 0x03
    3fac:	88 0f       	add	r24, r24
    3fae:	99 1f       	adc	r25, r25
    3fb0:	aa 1f       	adc	r26, r26
    3fb2:	bb 1f       	adc	r27, r27
    3fb4:	88 0f       	add	r24, r24
    3fb6:	99 1f       	adc	r25, r25
    3fb8:	aa 1f       	adc	r26, r26
    3fba:	bb 1f       	adc	r27, r27
    3fbc:	88 0f       	add	r24, r24
    3fbe:	99 1f       	adc	r25, r25
    3fc0:	aa 1f       	adc	r26, r26
    3fc2:	bb 1f       	adc	r27, r27
    3fc4:	9c 01       	movw	r18, r24
    3fc6:	ad 01       	movw	r20, r26
    3fc8:	80 e0       	ldi	r24, 0x00	; 0
    3fca:	92 e1       	ldi	r25, 0x12	; 18
    3fcc:	aa e7       	ldi	r26, 0x7A	; 122
    3fce:	b0 e0       	ldi	r27, 0x00	; 0
    3fd0:	bc 01       	movw	r22, r24
    3fd2:	cd 01       	movw	r24, r26
    3fd4:	0e 94 95 20 	call	0x412a	; 0x412a <__udivmodsi4>
    3fd8:	da 01       	movw	r26, r20
    3fda:	c9 01       	movw	r24, r18
    3fdc:	01 97       	sbiw	r24, 0x01	; 1
    3fde:	9a 83       	std	Y+2, r25	; 0x02
    3fe0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3fe2:	e0 e4       	ldi	r30, 0x40	; 64
    3fe4:	f0 e0       	ldi	r31, 0x00	; 0
    3fe6:	89 81       	ldd	r24, Y+1	; 0x01
    3fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fea:	89 2f       	mov	r24, r25
    3fec:	99 27       	eor	r25, r25
    3fee:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3ff0:	e9 e2       	ldi	r30, 0x29	; 41
    3ff2:	f0 e0       	ldi	r31, 0x00	; 0
    3ff4:	89 81       	ldd	r24, Y+1	; 0x01
    3ff6:	80 83       	st	Z, r24
}
    3ff8:	0f 90       	pop	r0
    3ffa:	0f 90       	pop	r0
    3ffc:	0f 90       	pop	r0
    3ffe:	0f 90       	pop	r0
    4000:	cf 91       	pop	r28
    4002:	df 91       	pop	r29
    4004:	08 95       	ret

00004006 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    4006:	df 93       	push	r29
    4008:	cf 93       	push	r28
    400a:	0f 92       	push	r0
    400c:	cd b7       	in	r28, 0x3d	; 61
    400e:	de b7       	in	r29, 0x3e	; 62
    4010:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    4012:	eb e2       	ldi	r30, 0x2B	; 43
    4014:	f0 e0       	ldi	r31, 0x00	; 0
    4016:	80 81       	ld	r24, Z
    4018:	88 2f       	mov	r24, r24
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	80 72       	andi	r24, 0x20	; 32
    401e:	90 70       	andi	r25, 0x00	; 0
    4020:	00 97       	sbiw	r24, 0x00	; 0
    4022:	b9 f3       	breq	.-18     	; 0x4012 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    4024:	ec e2       	ldi	r30, 0x2C	; 44
    4026:	f0 e0       	ldi	r31, 0x00	; 0
    4028:	89 81       	ldd	r24, Y+1	; 0x01
    402a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    402c:	0f 90       	pop	r0
    402e:	cf 91       	pop	r28
    4030:	df 91       	pop	r29
    4032:	08 95       	ret

00004034 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    4034:	df 93       	push	r29
    4036:	cf 93       	push	r28
    4038:	cd b7       	in	r28, 0x3d	; 61
    403a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    403c:	eb e2       	ldi	r30, 0x2B	; 43
    403e:	f0 e0       	ldi	r31, 0x00	; 0
    4040:	80 81       	ld	r24, Z
    4042:	88 23       	and	r24, r24
    4044:	dc f7       	brge	.-10     	; 0x403c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    4046:	ec e2       	ldi	r30, 0x2C	; 44
    4048:	f0 e0       	ldi	r31, 0x00	; 0
    404a:	80 81       	ld	r24, Z
}
    404c:	cf 91       	pop	r28
    404e:	df 91       	pop	r29
    4050:	08 95       	ret

00004052 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    4052:	df 93       	push	r29
    4054:	cf 93       	push	r28
    4056:	00 d0       	rcall	.+0      	; 0x4058 <UART_sendString+0x6>
    4058:	0f 92       	push	r0
    405a:	cd b7       	in	r28, 0x3d	; 61
    405c:	de b7       	in	r29, 0x3e	; 62
    405e:	9b 83       	std	Y+3, r25	; 0x03
    4060:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4062:	19 82       	std	Y+1, r1	; 0x01
    4064:	0e c0       	rjmp	.+28     	; 0x4082 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    4066:	89 81       	ldd	r24, Y+1	; 0x01
    4068:	28 2f       	mov	r18, r24
    406a:	30 e0       	ldi	r19, 0x00	; 0
    406c:	8a 81       	ldd	r24, Y+2	; 0x02
    406e:	9b 81       	ldd	r25, Y+3	; 0x03
    4070:	fc 01       	movw	r30, r24
    4072:	e2 0f       	add	r30, r18
    4074:	f3 1f       	adc	r31, r19
    4076:	80 81       	ld	r24, Z
    4078:	0e 94 03 20 	call	0x4006	; 0x4006 <UART_sendByte>
		i++;
    407c:	89 81       	ldd	r24, Y+1	; 0x01
    407e:	8f 5f       	subi	r24, 0xFF	; 255
    4080:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    4082:	89 81       	ldd	r24, Y+1	; 0x01
    4084:	28 2f       	mov	r18, r24
    4086:	30 e0       	ldi	r19, 0x00	; 0
    4088:	8a 81       	ldd	r24, Y+2	; 0x02
    408a:	9b 81       	ldd	r25, Y+3	; 0x03
    408c:	fc 01       	movw	r30, r24
    408e:	e2 0f       	add	r30, r18
    4090:	f3 1f       	adc	r31, r19
    4092:	80 81       	ld	r24, Z
    4094:	88 23       	and	r24, r24
    4096:	39 f7       	brne	.-50     	; 0x4066 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    4098:	0f 90       	pop	r0
    409a:	0f 90       	pop	r0
    409c:	0f 90       	pop	r0
    409e:	cf 91       	pop	r28
    40a0:	df 91       	pop	r29
    40a2:	08 95       	ret

000040a4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    40a4:	0f 93       	push	r16
    40a6:	1f 93       	push	r17
    40a8:	df 93       	push	r29
    40aa:	cf 93       	push	r28
    40ac:	00 d0       	rcall	.+0      	; 0x40ae <UART_receiveString+0xa>
    40ae:	0f 92       	push	r0
    40b0:	cd b7       	in	r28, 0x3d	; 61
    40b2:	de b7       	in	r29, 0x3e	; 62
    40b4:	9b 83       	std	Y+3, r25	; 0x03
    40b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    40b8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    40ba:	89 81       	ldd	r24, Y+1	; 0x01
    40bc:	28 2f       	mov	r18, r24
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	8a 81       	ldd	r24, Y+2	; 0x02
    40c2:	9b 81       	ldd	r25, Y+3	; 0x03
    40c4:	8c 01       	movw	r16, r24
    40c6:	02 0f       	add	r16, r18
    40c8:	13 1f       	adc	r17, r19
    40ca:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_recieveByte>
    40ce:	f8 01       	movw	r30, r16
    40d0:	80 83       	st	Z, r24
    40d2:	0f c0       	rjmp	.+30     	; 0x40f2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    40d4:	89 81       	ldd	r24, Y+1	; 0x01
    40d6:	8f 5f       	subi	r24, 0xFF	; 255
    40d8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    40da:	89 81       	ldd	r24, Y+1	; 0x01
    40dc:	28 2f       	mov	r18, r24
    40de:	30 e0       	ldi	r19, 0x00	; 0
    40e0:	8a 81       	ldd	r24, Y+2	; 0x02
    40e2:	9b 81       	ldd	r25, Y+3	; 0x03
    40e4:	8c 01       	movw	r16, r24
    40e6:	02 0f       	add	r16, r18
    40e8:	13 1f       	adc	r17, r19
    40ea:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_recieveByte>
    40ee:	f8 01       	movw	r30, r16
    40f0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    40f2:	89 81       	ldd	r24, Y+1	; 0x01
    40f4:	28 2f       	mov	r18, r24
    40f6:	30 e0       	ldi	r19, 0x00	; 0
    40f8:	8a 81       	ldd	r24, Y+2	; 0x02
    40fa:	9b 81       	ldd	r25, Y+3	; 0x03
    40fc:	fc 01       	movw	r30, r24
    40fe:	e2 0f       	add	r30, r18
    4100:	f3 1f       	adc	r31, r19
    4102:	80 81       	ld	r24, Z
    4104:	83 32       	cpi	r24, 0x23	; 35
    4106:	31 f7       	brne	.-52     	; 0x40d4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    4108:	89 81       	ldd	r24, Y+1	; 0x01
    410a:	28 2f       	mov	r18, r24
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	8a 81       	ldd	r24, Y+2	; 0x02
    4110:	9b 81       	ldd	r25, Y+3	; 0x03
    4112:	fc 01       	movw	r30, r24
    4114:	e2 0f       	add	r30, r18
    4116:	f3 1f       	adc	r31, r19
    4118:	10 82       	st	Z, r1
}
    411a:	0f 90       	pop	r0
    411c:	0f 90       	pop	r0
    411e:	0f 90       	pop	r0
    4120:	cf 91       	pop	r28
    4122:	df 91       	pop	r29
    4124:	1f 91       	pop	r17
    4126:	0f 91       	pop	r16
    4128:	08 95       	ret

0000412a <__udivmodsi4>:
    412a:	a1 e2       	ldi	r26, 0x21	; 33
    412c:	1a 2e       	mov	r1, r26
    412e:	aa 1b       	sub	r26, r26
    4130:	bb 1b       	sub	r27, r27
    4132:	fd 01       	movw	r30, r26
    4134:	0d c0       	rjmp	.+26     	; 0x4150 <__udivmodsi4_ep>

00004136 <__udivmodsi4_loop>:
    4136:	aa 1f       	adc	r26, r26
    4138:	bb 1f       	adc	r27, r27
    413a:	ee 1f       	adc	r30, r30
    413c:	ff 1f       	adc	r31, r31
    413e:	a2 17       	cp	r26, r18
    4140:	b3 07       	cpc	r27, r19
    4142:	e4 07       	cpc	r30, r20
    4144:	f5 07       	cpc	r31, r21
    4146:	20 f0       	brcs	.+8      	; 0x4150 <__udivmodsi4_ep>
    4148:	a2 1b       	sub	r26, r18
    414a:	b3 0b       	sbc	r27, r19
    414c:	e4 0b       	sbc	r30, r20
    414e:	f5 0b       	sbc	r31, r21

00004150 <__udivmodsi4_ep>:
    4150:	66 1f       	adc	r22, r22
    4152:	77 1f       	adc	r23, r23
    4154:	88 1f       	adc	r24, r24
    4156:	99 1f       	adc	r25, r25
    4158:	1a 94       	dec	r1
    415a:	69 f7       	brne	.-38     	; 0x4136 <__udivmodsi4_loop>
    415c:	60 95       	com	r22
    415e:	70 95       	com	r23
    4160:	80 95       	com	r24
    4162:	90 95       	com	r25
    4164:	9b 01       	movw	r18, r22
    4166:	ac 01       	movw	r20, r24
    4168:	bd 01       	movw	r22, r26
    416a:	cf 01       	movw	r24, r30
    416c:	08 95       	ret

0000416e <__prologue_saves__>:
    416e:	2f 92       	push	r2
    4170:	3f 92       	push	r3
    4172:	4f 92       	push	r4
    4174:	5f 92       	push	r5
    4176:	6f 92       	push	r6
    4178:	7f 92       	push	r7
    417a:	8f 92       	push	r8
    417c:	9f 92       	push	r9
    417e:	af 92       	push	r10
    4180:	bf 92       	push	r11
    4182:	cf 92       	push	r12
    4184:	df 92       	push	r13
    4186:	ef 92       	push	r14
    4188:	ff 92       	push	r15
    418a:	0f 93       	push	r16
    418c:	1f 93       	push	r17
    418e:	cf 93       	push	r28
    4190:	df 93       	push	r29
    4192:	cd b7       	in	r28, 0x3d	; 61
    4194:	de b7       	in	r29, 0x3e	; 62
    4196:	ca 1b       	sub	r28, r26
    4198:	db 0b       	sbc	r29, r27
    419a:	0f b6       	in	r0, 0x3f	; 63
    419c:	f8 94       	cli
    419e:	de bf       	out	0x3e, r29	; 62
    41a0:	0f be       	out	0x3f, r0	; 63
    41a2:	cd bf       	out	0x3d, r28	; 61
    41a4:	09 94       	ijmp

000041a6 <__epilogue_restores__>:
    41a6:	2a 88       	ldd	r2, Y+18	; 0x12
    41a8:	39 88       	ldd	r3, Y+17	; 0x11
    41aa:	48 88       	ldd	r4, Y+16	; 0x10
    41ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    41ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    41b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    41b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    41b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    41b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    41b8:	b9 84       	ldd	r11, Y+9	; 0x09
    41ba:	c8 84       	ldd	r12, Y+8	; 0x08
    41bc:	df 80       	ldd	r13, Y+7	; 0x07
    41be:	ee 80       	ldd	r14, Y+6	; 0x06
    41c0:	fd 80       	ldd	r15, Y+5	; 0x05
    41c2:	0c 81       	ldd	r16, Y+4	; 0x04
    41c4:	1b 81       	ldd	r17, Y+3	; 0x03
    41c6:	aa 81       	ldd	r26, Y+2	; 0x02
    41c8:	b9 81       	ldd	r27, Y+1	; 0x01
    41ca:	ce 0f       	add	r28, r30
    41cc:	d1 1d       	adc	r29, r1
    41ce:	0f b6       	in	r0, 0x3f	; 63
    41d0:	f8 94       	cli
    41d2:	de bf       	out	0x3e, r29	; 62
    41d4:	0f be       	out	0x3f, r0	; 63
    41d6:	cd bf       	out	0x3d, r28	; 61
    41d8:	ed 01       	movw	r28, r26
    41da:	08 95       	ret

000041dc <itoa>:
    41dc:	fb 01       	movw	r30, r22
    41de:	9f 01       	movw	r18, r30
    41e0:	e8 94       	clt
    41e2:	42 30       	cpi	r20, 0x02	; 2
    41e4:	c4 f0       	brlt	.+48     	; 0x4216 <itoa+0x3a>
    41e6:	45 32       	cpi	r20, 0x25	; 37
    41e8:	b4 f4       	brge	.+44     	; 0x4216 <itoa+0x3a>
    41ea:	4a 30       	cpi	r20, 0x0A	; 10
    41ec:	29 f4       	brne	.+10     	; 0x41f8 <itoa+0x1c>
    41ee:	97 fb       	bst	r25, 7
    41f0:	1e f4       	brtc	.+6      	; 0x41f8 <itoa+0x1c>
    41f2:	90 95       	com	r25
    41f4:	81 95       	neg	r24
    41f6:	9f 4f       	sbci	r25, 0xFF	; 255
    41f8:	64 2f       	mov	r22, r20
    41fa:	77 27       	eor	r23, r23
    41fc:	0e 94 1f 21 	call	0x423e	; 0x423e <__udivmodhi4>
    4200:	80 5d       	subi	r24, 0xD0	; 208
    4202:	8a 33       	cpi	r24, 0x3A	; 58
    4204:	0c f0       	brlt	.+2      	; 0x4208 <itoa+0x2c>
    4206:	89 5d       	subi	r24, 0xD9	; 217
    4208:	81 93       	st	Z+, r24
    420a:	cb 01       	movw	r24, r22
    420c:	00 97       	sbiw	r24, 0x00	; 0
    420e:	a1 f7       	brne	.-24     	; 0x41f8 <itoa+0x1c>
    4210:	16 f4       	brtc	.+4      	; 0x4216 <itoa+0x3a>
    4212:	5d e2       	ldi	r21, 0x2D	; 45
    4214:	51 93       	st	Z+, r21
    4216:	10 82       	st	Z, r1
    4218:	c9 01       	movw	r24, r18
    421a:	0c 94 0f 21 	jmp	0x421e	; 0x421e <strrev>

0000421e <strrev>:
    421e:	dc 01       	movw	r26, r24
    4220:	fc 01       	movw	r30, r24
    4222:	67 2f       	mov	r22, r23
    4224:	71 91       	ld	r23, Z+
    4226:	77 23       	and	r23, r23
    4228:	e1 f7       	brne	.-8      	; 0x4222 <strrev+0x4>
    422a:	32 97       	sbiw	r30, 0x02	; 2
    422c:	04 c0       	rjmp	.+8      	; 0x4236 <strrev+0x18>
    422e:	7c 91       	ld	r23, X
    4230:	6d 93       	st	X+, r22
    4232:	70 83       	st	Z, r23
    4234:	62 91       	ld	r22, -Z
    4236:	ae 17       	cp	r26, r30
    4238:	bf 07       	cpc	r27, r31
    423a:	c8 f3       	brcs	.-14     	; 0x422e <strrev+0x10>
    423c:	08 95       	ret

0000423e <__udivmodhi4>:
    423e:	aa 1b       	sub	r26, r26
    4240:	bb 1b       	sub	r27, r27
    4242:	51 e1       	ldi	r21, 0x11	; 17
    4244:	07 c0       	rjmp	.+14     	; 0x4254 <__udivmodhi4_ep>

00004246 <__udivmodhi4_loop>:
    4246:	aa 1f       	adc	r26, r26
    4248:	bb 1f       	adc	r27, r27
    424a:	a6 17       	cp	r26, r22
    424c:	b7 07       	cpc	r27, r23
    424e:	10 f0       	brcs	.+4      	; 0x4254 <__udivmodhi4_ep>
    4250:	a6 1b       	sub	r26, r22
    4252:	b7 0b       	sbc	r27, r23

00004254 <__udivmodhi4_ep>:
    4254:	88 1f       	adc	r24, r24
    4256:	99 1f       	adc	r25, r25
    4258:	5a 95       	dec	r21
    425a:	a9 f7       	brne	.-22     	; 0x4246 <__udivmodhi4_loop>
    425c:	80 95       	com	r24
    425e:	90 95       	com	r25
    4260:	bc 01       	movw	r22, r24
    4262:	cd 01       	movw	r24, r26
    4264:	08 95       	ret

00004266 <_exit>:
    4266:	f8 94       	cli

00004268 <__stop_program>:
    4268:	ff cf       	rjmp	.-2      	; 0x4268 <__stop_program>
